ERROR:root:HuggingFace Hub API key not found. See README.
INFO:root:Logger root set to level 10
INFO:root:Creating for ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Finding count of PMIDs matching search term inflammatory bowel disease...
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): eutils.ncbi.nlm.nih.gov:443
DEBUG:urllib3.connectionpool:https://eutils.ncbi.nlm.nih.gov:443 "GET /entrez/eutils/esearch.fcgi?db=pubmed&term=inflammatory+bowel+disease&retmode=json&retmax=0 HTTP/1.1" 200 None
INFO:root:Search returned 128289 PMIDs matching search term inflammatory bowel disease
WARNING:root:PubMed limits search results to 9999 records.
INFO:root:Retrieving PMIDs matching search term inflammatory bowel disease...
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): eutils.ncbi.nlm.nih.gov:443
DEBUG:urllib3.connectionpool:https://eutils.ncbi.nlm.nih.gov:443 "GET /entrez/eutils/esearch.fcgi?db=pubmed&term=inflammatory+bowel+disease&retmode=json&retmax=5000&retstart=0 HTTP/1.1" 200 None
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): eutils.ncbi.nlm.nih.gov:443
DEBUG:urllib3.connectionpool:https://eutils.ncbi.nlm.nih.gov:443 "GET /entrez/eutils/esearch.fcgi?db=pubmed&term=inflammatory+bowel+disease&retmode=json&retmax=5000&retstart=5000 HTTP/1.1" 200 None
INFO:root:Retrieved all PMIDs.
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): eutils.ncbi.nlm.nih.gov:443
DEBUG:urllib3.connectionpool:https://eutils.ncbi.nlm.nih.gov:443 "GET /entrez/eutils/efetch.fcgi?db=pubmed&id=37593734,37593436,37593289,37593267,37592922,37592304,37592164,37591835,37591699,37590310,37590238,37589886,37589651,37589567,37589563,37589220,37588990,37588829,37588593,37588306,37588188,37588005,37587070,37586983,37586907,37586637,37586618,37586416,37586320,37586233,37586038,37585986,37585513,37584424,37584328,37583860,37583859,37583360,37583048,37582768,37582137,37581941,37581468,37581184,37581033,37581011,37580879,37580878,37580868,37580819,37580493,37580400,37580334,37580108,37579856,37579791,37579735,37579307,37579305,37579137,37578543,37578292,37578211,37577829,37577790,37577725,37577589,37577378,37576705,37576427,37576142,37575896,37575488,37575027,37574895,37574471,37574431,37574320,37574161,37574127,37573562,37573077,37572962,37572855,37572826,37572505,37572105,37571863,37571829,37571416,37571379,37571313,37571277,37571230,37570939,37570753,37569849,37569842,37569722,37569708,37569505&rettype=xml&retmode=xml&retstart=0&retmax=200 HTTP/1.1" 200 None
INFO:root:Retrieved document data.
INFO:root:Preprocessing all xml entries...
INFO:root:Parsing all xml entries...
WARNING:root:Truncating entry beginning "Title: [Application of TIGIT combined with interle" to 3000 chars
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): openaipublic.blob.core.windows.net:443
DEBUG:urllib3.connectionpool:https://openaipublic.blob.core.windows.net:443 "GET /encodings/cl100k_base.tiktoken HTTP/1.1" 200 1681126
DEBUG:root:Input text: Title: The causal effect of inflammatory bowel disease on diffuse large B-cell lymphoma: two-sample Mendelian randomization study.
Keywords: Mendelian randomization (MR); diffuse large B-cell lymphoma (DLBCL); genome-wide association studies (GWAS); inflammatory bowel disease (IBD); single-nucleotide polymorphisms (SNPs)
PMID: 37593734
Abstract: It has been reported that inflammatory bowel disease (IBD) is associated with an increased risk of malignancies, including lymphoma. A number of large observational studies have been devoted to exploring the causal link between IBD and malignant lymphoma. However, no consensus exists on whether there is a causal relationship between IBD and malignant lymphoma.The summary dataset of the IBD and lymphoma genome-wide association studies (GWAS) was obtained from the OPEN GWAS website. Single-nucleotide polymorphisms (SNPs) were selected as genetic instrumental variants (IVs) for fulling P < 5 × 10-8 and linkage disequilibrium (LD) of r2 = 0.001 in the IBD GWAS. The proxy SNPs with LD of r2 > 0.8 were identified. Palindromic SNPs and outlier SNPs were excluded. The assessments of sensitivity employed the Cochran's Q test, Mendelian randomization (MR)-Egger intercept test, and leave-one-out analysis.The MR analysis results proved the causality of IBD on diffuse large B-cell lymphoma (DLBCL). The risk of developing DLBCL is increased by 28.6% in patients with IBD [odds ratio (OR)IVW = 1.286, 95% confidence interval (CI) 1.066-1.552, P = 0.009]. The results of the subgroup analysis showed that Crohn's disease (ORIVW = 1.218, 95% CI 1.030-1.441, P = 0.021) rather than ulcerative colitis (ORIVW = 1.206, 95% CI 0.984-1.478, P = 0.072) had a causal effect on DLBCL. No horizontal and directional pleiotropy was observed in the MR studies.The above MR study concluded that IBD itself is causally responsible for DLBCL, especially Crohn's disease. Further investigations are needed to elucidate the mechanism underlying this direct causal link.Copyright © 2023 Lu, Chen, Tao, Xu, Li, Wang and Yu.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2660]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: The causal effect of inflammatory bowel disease on diffuse large B-cell lymphoma: two-sample Mendelian randomization study.\\nKeywords: Mendelian randomization (MR); diffuse large B-cell lymphoma (DLBCL); genome-wide association studies (GWAS); inflammatory bowel disease (IBD); single-nucleotide polymorphisms (SNPs)\\nPMID: 37593734\\nAbstract: It has been reported that inflammatory bowel disease (IBD) is associated with an increased risk of malignancies, including lymphoma. A number of large observational studies have been devoted to exploring the causal link between IBD and malignant lymphoma. However, no consensus exists on whether there is a causal relationship between IBD and malignant lymphoma.The summary dataset of the IBD and lymphoma genome-wide association studies (GWAS) was obtained from the OPEN GWAS website. Single-nucleotide polymorphisms (SNPs) were selected as genetic instrumental variants (IVs) for fulling P < 5 \\u00d7 10-8 and linkage disequilibrium (LD) of r2 = 0.001 in the IBD GWAS. The proxy SNPs with LD of r2 > 0.8 were identified. Palindromic SNPs and outlier SNPs were excluded. The assessments of sensitivity employed the Cochran\'s Q test, Mendelian randomization (MR)-Egger intercept test, and leave-one-out analysis.The MR analysis results proved the causality of IBD on diffuse large B-cell lymphoma (DLBCL). The risk of developing DLBCL is increased by 28.6% in patients with IBD [odds ratio (OR)IVW = 1.286, 95% confidence interval (CI) 1.066-1.552, P = 0.009]. The results of the subgroup analysis showed that Crohn\'s disease (ORIVW = 1.218, 95% CI 1.030-1.441, P = 0.021) rather than ulcerative colitis (ORIVW = 1.206, 95% CI 0.984-1.478, P = 0.072) had a causal effect on DLBCL. No horizontal and directional pleiotropy was observed in the MR studies.The above MR study concluded that IBD itself is causally responsible for DLBCL, especially Crohn\'s disease. Further investigations are needed to elucidate the mechanism underlying this direct causal link.Copyright \\u00a9 2023 Lu, Chen, Tao, Xu, Li, Wang and Yu.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3151 request_id=f03bf665b693843a2ec0bcb5a48fa190 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 480
INFO:root:RAW TEXT: subject: inflammatory bowel disease (IBD)
predicate: is associated with
object: an increased risk of malignancies, including lymphoma.

subject: IBD
predicate: is a causal relationship between
object: malignant lymphoma.

subject: IBD
subject_qualifier: the
predicate: has a causal effect on
object: diffuse large B-cell lymphoma (DLBCL).

subject: IBD
predicate: is causally responsible for
object: DLBCL

subject: Crohn's disease
predicate: has a causal effect on
object: DLBCL.
INFO:root:PARSING LINE: subject: inflammatory bowel disease (IBD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: is associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: object: an increased risk of malignancies, including lymphoma.
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['an increased risk of malignancies, including lymphoma.']
INFO:root:PARSING LINE: subject: IBD
DEBUG:root:SLOT: subject INL: False VALS: ['IBD']
INFO:root:PARSING LINE: predicate: is a causal relationship between
DEBUG:root:SLOT: predicate INL: False VALS: ['is a causal relationship between']
INFO:root:PARSING LINE: object: malignant lymphoma.
DEBUG:root:SLOT: object INL: False VALS: ['malignant lymphoma.']
INFO:root:PARSING LINE: subject: IBD
DEBUG:root:SLOT: subject INL: False VALS: ['IBD']
INFO:root:PARSING LINE: subject_qualifier: the
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['the']
INFO:root:PARSING LINE: predicate: has a causal effect on
DEBUG:root:SLOT: predicate INL: False VALS: ['has a causal effect on']
INFO:root:PARSING LINE: object: diffuse large B-cell lymphoma (DLBCL).
DEBUG:root:SLOT: object INL: False VALS: ['diffuse large B-cell lymphoma (DLBCL).']
INFO:root:PARSING LINE: subject: IBD
DEBUG:root:SLOT: subject INL: False VALS: ['IBD']
INFO:root:PARSING LINE: predicate: is causally responsible for
DEBUG:root:SLOT: predicate INL: False VALS: ['is causally responsible for']
INFO:root:PARSING LINE: object: DLBCL
DEBUG:root:SLOT: object INL: False VALS: ['DLBCL']
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: has a causal effect on
DEBUG:root:SLOT: predicate INL: False VALS: ['has a causal effect on']
INFO:root:PARSING LINE: object: DLBCL.
DEBUG:root:SLOT: object INL: False VALS: ['DLBCL.']
DEBUG:root:RAW: {'subject': "Crohn's disease", 'predicate': 'has a causal effect on', 'object': 'DLBCL.', 'subject_qualifier': 'the'}
DEBUG:root:Grounding annotation object {'subject': "Crohn's disease", 'predicate': 'has a causal effect on', 'object': 'DLBCL.', 'subject_qualifier': 'the'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Crohn's disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Grounding Crohn's disease to MONDO:0005011; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized Crohn's disease with MONDO:0005011 to MONDO:0005011
INFO:ontogpt.engines.knowledge_engine:GROUNDING has a causal effect on using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize has a causal effect on to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING DLBCL. using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize DLBCL. to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING the using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize the to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005011', 'predicate': 'has a causal effect on', 'object': 'DLBCL.', 'subject_qualifier': 'the'}
INFO:root:{'subject': 'MONDO:0005011', 'predicate': 'has a causal effect on', 'object': 'DLBCL.', 'subject_qualifier': 'the'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Retracted: A Study on the Relationship between Sense of Disease Uncertainty and Family Strength and Mental Resilience in Guardians of Children with Inflammatory Bowel Disease.
Keywords: 
PMID: 37593436
Abstract: [This retracts the article DOI: 10.1155/2022/4797281.].Copyright © 2023 Emergency Medicine International.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[932]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Retracted: A Study on the Relationship between Sense of Disease Uncertainty and Family Strength and Mental Resilience in Guardians of Children with Inflammatory Bowel Disease.\\nKeywords: \\nPMID: 37593436\\nAbstract: [This retracts the article DOI: 10.1155/2022/4797281.].Copyright \\u00a9 2023 Emergency Medicine International.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1122 request_id=bbf22dca8aca2ac27355da5ce8a90c0a response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 150
INFO:root:RAW TEXT: subject: inflammatory bowel disease
predicate: relationship between
object: sense of disease uncertainty

subject_qualifier: N/A
object_qualifier: N/A
INFO:root:PARSING LINE: subject: inflammatory bowel disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel disease']
INFO:root:PARSING LINE: predicate: relationship between
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['relationship between']
INFO:root:PARSING LINE: object: sense of disease uncertainty
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['sense of disease uncertainty']
INFO:root:PARSING LINE: subject_qualifier: N/A
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['N/A']
INFO:root:PARSING LINE: object_qualifier: N/A
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['N/A']
DEBUG:root:RAW: {'subject': 'inflammatory bowel disease', 'predicate': 'relationship between', 'object': 'sense of disease uncertainty', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
DEBUG:root:Grounding annotation object {'subject': 'inflammatory bowel disease', 'predicate': 'relationship between', 'object': 'sense of disease uncertainty', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING inflammatory bowel disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding inflammatory bowel disease to MONDO:0005265; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized inflammatory bowel disease with MONDO:0005265 to MONDO:0005265
INFO:ontogpt.engines.knowledge_engine:GROUNDING relationship between using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize relationship between to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING sense of disease uncertainty using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize sense of disease uncertainty to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING N/A using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize N/A to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING N/A using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize N/A to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005265', 'predicate': 'relationship between', 'object': 'sense of disease uncertainty', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
INFO:root:{'subject': 'MONDO:0005265', 'predicate': 'relationship between', 'object': 'sense of disease uncertainty', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Growth Failure and Primary Amenorrhea: Endocrine Dysfunction as a Late Presentation of Crohn's Disease.
Keywords: crohn’s disease; endocrine manifestations; growth failure; inflammatory bowel disease; primary amenorrhea
PMID: 37593289
Abstract: Crohn's disease (CD) is a chronic inflammatory bowel disease involving entire gastrointestinal tract, most commonly affecting terminal ileum and colon. It usually presents with gastrointestinal symptoms like bloody diarrhea, fever and loss of weight. The clinical course of CD includes gastrointestinal complications like fistulas, abscesses and perianal disease. Inflammatory bowel diseases (IBD) are usually diagnosed during childhood and adolescence, majority during puberty and pubertal growth spurt. Various extraintestinal manifestations may be a presentation of CD that poses a diagnostic challenge. Growth failure is an important complication of IBD rather than a manifestation. Herein we present a case of a 16-year-old Sri Lankan girl presenting with growth failure and primary amenorrhea. She had minimal gastrointestinal symptoms. She also had microcytic anemia with marginally elevated inflammatory markers and hormonal profile. She underwent colonoscopy and was diagnosed to have Crohn's disease confirmed by ileal biopsy. On initiation of treatment with immunosuppressants, she attained menarche, although no improvement in height was observed.Copyright © 2023, Muthusamy et al.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2053]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Growth Failure and Primary Amenorrhea: Endocrine Dysfunction as a Late Presentation of Crohn\'s Disease.\\nKeywords: crohn\\u2019s disease; endocrine manifestations; growth failure; inflammatory bowel disease; primary amenorrhea\\nPMID: 37593289\\nAbstract: Crohn\'s disease (CD) is a chronic inflammatory bowel disease involving entire gastrointestinal tract, most commonly affecting terminal ileum and colon. It usually presents with gastrointestinal symptoms like bloody diarrhea, fever and loss of weight. The clinical course of CD includes gastrointestinal complications like fistulas, abscesses and perianal disease. Inflammatory bowel diseases (IBD) are usually diagnosed during childhood and adolescence, majority during puberty and pubertal growth spurt. Various extraintestinal manifestations may be a presentation of CD that poses a diagnostic challenge.\\u00a0Growth failure is an important complication of IBD rather than a manifestation. Herein we present a case of a 16-year-old Sri Lankan girl presenting with growth failure and primary amenorrhea. She had minimal gastrointestinal symptoms. She also had microcytic anemia with marginally elevated inflammatory markers and hormonal profile. She underwent colonoscopy and was diagnosed to have Crohn\'s disease confirmed by ileal biopsy. On initiation of treatment with immunosuppressants, she attained menarche, although no improvement in height was observed.Copyright \\u00a9 2023, Muthusamy et al.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=932 request_id=a27270b34eeda9073e76a785686d4e3b response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 150
INFO:root:RAW TEXT: subject: Crohn's disease
predicate: manifestation
object: growth failure

subject: Crohn's disease
predicate: manifestation
object: primary amenorrhea
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: manifestation
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['manifestation']
INFO:root:PARSING LINE: object: growth failure
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['growth failure']
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: manifestation
DEBUG:root:SLOT: predicate INL: False VALS: ['manifestation']
INFO:root:PARSING LINE: object: primary amenorrhea
DEBUG:root:SLOT: object INL: False VALS: ['primary amenorrhea']
DEBUG:root:RAW: {'subject': "Crohn's disease", 'predicate': 'manifestation', 'object': 'primary amenorrhea'}
DEBUG:root:Grounding annotation object {'subject': "Crohn's disease", 'predicate': 'manifestation', 'object': 'primary amenorrhea'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Crohn's disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Grounding Crohn's disease to MONDO:0005011; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized Crohn's disease with MONDO:0005011 to MONDO:0005011
INFO:ontogpt.engines.knowledge_engine:GROUNDING manifestation using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize manifestation to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING primary amenorrhea using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize primary amenorrhea to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005011', 'predicate': 'manifestation', 'object': 'primary amenorrhea'}
INFO:root:{'subject': 'MONDO:0005011', 'predicate': 'manifestation', 'object': 'primary amenorrhea'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Prevalence and Risk Factors of Anemia in Inflammatory Bowel Diseases: A Case-Control Study.
Keywords: anemia; crohn's disease; inflammatory bowel diseases (ibd); iron therapy; management; treatment; ulcerative colitis
PMID: 37593267
Abstract: Introduction Inflammatory bowel diseases (IBDs) including Crohn's disease and ulcerative colitis may induce anemia, ranging from 25% to 75% depending on the study population and diagnostic criteria. It might negatively impact their health and quality of life. Objectives The aim of this work is to study the effectiveness and safety of treatments for anemia in patients with IBD. Methodology This case-control study compared patients with IBD who have anemia (cases; n=60) with patients who have IBD but do not have anemia (controls; n=60) from June 2019 to August 2021 in Hayatabad Medical Complex, Peshawar, Pakistan. Data were collected through interviews, from patients` medical records, and from lab test reports. Statistical analysis was performed using SPSS, Version 23.0 (IBM Corp., Armonk, NY). Results Cases had a greater mean age (45.2 years) than controls (42.8 years). Cases included 60% females and controls 45%. Also, cases earned less (p = 0.019). Anemic patients (group 1) had lower mean hemoglobin (10.2 g/dL) and iron than non-anemic controls (group 2) (p = 0.042 and 0.009, respectively). Anemia increased Crohn's Disease Activity Index and Mayo Score. Group 1 has iron deficiency anemia, whereas group 2 has chronic disease. Group 1 reacts rapidly, but gastrointestinal side effects, allergies, and iron overload are more prevalent. Conclusion IBD patients exhibited low hemoglobin and iron, suggesting anemia. Anemia increased disease activity, but not statistically. IBD patients need iron and anemia treatment. Comparing groups demonstrates differences in anemia types, iron replacement history, treatment response, and bad effects, proposing targeted iron supplementation for deficiency anemia and managing chronic illness factors for chronic disease anemia. IBD anemia treatment involves individualization.Copyright © 2023, Aslam et al.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2720]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Prevalence and Risk Factors of Anemia in Inflammatory Bowel Diseases: A Case-Control Study.\\nKeywords: anemia; crohn\'s disease; inflammatory bowel diseases (ibd); iron therapy; management; treatment; ulcerative colitis\\nPMID: 37593267\\nAbstract: Introduction Inflammatory bowel diseases (IBDs) including Crohn\'s disease and ulcerative colitis may induce anemia, ranging from 25% to 75% depending on the study population and diagnostic criteria. It might negatively impact their health and quality of life. Objectives The aim of this work is to study the effectiveness and safety of treatments for anemia in patients with IBD. Methodology This case-control study compared patients with IBD who have anemia (cases; n=60) with patients who have IBD but do not have anemia (controls; n=60) from June 2019 to August 2021 in Hayatabad Medical Complex, Peshawar, Pakistan. Data were collected through interviews, from patients` medical records, and from lab test reports. Statistical analysis was performed using SPSS, Version 23.0 (IBM Corp., Armonk, NY). Results Cases had a greater mean age (45.2 years) than controls (42.8 years). Cases included 60% females and controls 45%. Also, cases earned less (p = 0.019). Anemic patients (group 1) had lower mean hemoglobin (10.2 g/dL) and iron than non-anemic controls (group 2) (p = 0.042 and 0.009, respectively). Anemia increased Crohn\'s Disease Activity Index and Mayo Score. Group 1 has iron deficiency anemia, whereas group 2 has chronic disease. Group 1 reacts rapidly, but gastrointestinal side effects, allergies, and iron overload are more prevalent. Conclusion IBD patients exhibited low hemoglobin and iron, suggesting anemia. Anemia increased disease activity, but not statistically. IBD patients need iron and anemia treatment. Comparing groups demonstrates differences in anemia types, iron replacement history, treatment response, and bad effects, proposing targeted iron supplementation for deficiency anemia and managing chronic illness factors for chronic disease anemia. IBD anemia treatment involves individualization.Copyright \\u00a9 2023, Aslam et al.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6708 request_id=c2b47027a701ad2a7cd15e5dfa2cf1a6 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1414
INFO:root:RAW TEXT: subject: anemia
predicate: induce
object: inflammatory bowel diseases (IBDs)                             

subject: inflammatory bowel diseases (IBDs)
predicate: induce
object: anemia                                

subject: anemia
predicate: impact
object: health and quality of life                                

subject: anemia
predicate: increase
object: Crohn's Disease Activity Index and Mayo Score                                

subject: anemic patients (group 1)
predicate: have
object: iron deficiency anemia                                

subject: group 2
predicate: have
object: chronic disease                                

subject: group 1
predicate: react
object: rapidly                                

subject: group 1
predicate: have
object: gastrointestinal side effects, allergies, and iron overload                                

subject: IBD patients
predicate: exhibit
object: low hemoglobin and iron                                

subject: anemia
predicate: increase
object: disease activity                                

subject: IBD patients
predicate: need
object: iron and anemia treatment                                

subject: groups
predicate: demonstrate
object: differences in anemia types, iron replacement history, treatment response, and bad effects                                

subject: IBD anemia treatment
predicate: involve
object: individualization
INFO:root:PARSING LINE: subject: anemia
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['anemia']
INFO:root:PARSING LINE: predicate: induce
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['induce']
INFO:root:PARSING LINE: object: inflammatory bowel diseases (IBDs)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel diseases (IBDs)']
INFO:root:PARSING LINE: subject: inflammatory bowel diseases (IBDs)
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel diseases (IBDs)']
INFO:root:PARSING LINE: predicate: induce
DEBUG:root:SLOT: predicate INL: False VALS: ['induce']
INFO:root:PARSING LINE: object: anemia
DEBUG:root:SLOT: object INL: False VALS: ['anemia']
INFO:root:PARSING LINE: subject: anemia
DEBUG:root:SLOT: subject INL: False VALS: ['anemia']
INFO:root:PARSING LINE: predicate: impact
DEBUG:root:SLOT: predicate INL: False VALS: ['impact']
INFO:root:PARSING LINE: object: health and quality of life
DEBUG:root:SLOT: object INL: False VALS: ['health and quality of life']
INFO:root:PARSING LINE: subject: anemia
DEBUG:root:SLOT: subject INL: False VALS: ['anemia']
INFO:root:PARSING LINE: predicate: increase
DEBUG:root:SLOT: predicate INL: False VALS: ['increase']
INFO:root:PARSING LINE: object: Crohn's Disease Activity Index and Mayo Score
DEBUG:root:SLOT: object INL: False VALS: ["Crohn's Disease Activity Index and Mayo Score"]
INFO:root:PARSING LINE: subject: anemic patients (group 1)
DEBUG:root:SLOT: subject INL: False VALS: ['anemic patients (group 1)']
INFO:root:PARSING LINE: predicate: have
DEBUG:root:SLOT: predicate INL: False VALS: ['have']
INFO:root:PARSING LINE: object: iron deficiency anemia
DEBUG:root:SLOT: object INL: False VALS: ['iron deficiency anemia']
INFO:root:PARSING LINE: subject: group 2
DEBUG:root:SLOT: subject INL: False VALS: ['group 2']
INFO:root:PARSING LINE: predicate: have
DEBUG:root:SLOT: predicate INL: False VALS: ['have']
INFO:root:PARSING LINE: object: chronic disease
DEBUG:root:SLOT: object INL: False VALS: ['chronic disease']
INFO:root:PARSING LINE: subject: group 1
DEBUG:root:SLOT: subject INL: False VALS: ['group 1']
INFO:root:PARSING LINE: predicate: react
DEBUG:root:SLOT: predicate INL: False VALS: ['react']
INFO:root:PARSING LINE: object: rapidly
DEBUG:root:SLOT: object INL: False VALS: ['rapidly']
INFO:root:PARSING LINE: subject: group 1
DEBUG:root:SLOT: subject INL: False VALS: ['group 1']
INFO:root:PARSING LINE: predicate: have
DEBUG:root:SLOT: predicate INL: False VALS: ['have']
INFO:root:PARSING LINE: object: gastrointestinal side effects, allergies, and iron overload
DEBUG:root:SLOT: object INL: False VALS: ['gastrointestinal side effects, allergies, and iron overload']
INFO:root:PARSING LINE: subject: IBD patients
DEBUG:root:SLOT: subject INL: False VALS: ['IBD patients']
INFO:root:PARSING LINE: predicate: exhibit
DEBUG:root:SLOT: predicate INL: False VALS: ['exhibit']
INFO:root:PARSING LINE: object: low hemoglobin and iron
DEBUG:root:SLOT: object INL: False VALS: ['low hemoglobin and iron']
INFO:root:PARSING LINE: subject: anemia
DEBUG:root:SLOT: subject INL: False VALS: ['anemia']
INFO:root:PARSING LINE: predicate: increase
DEBUG:root:SLOT: predicate INL: False VALS: ['increase']
INFO:root:PARSING LINE: object: disease activity
DEBUG:root:SLOT: object INL: False VALS: ['disease activity']
INFO:root:PARSING LINE: subject: IBD patients
DEBUG:root:SLOT: subject INL: False VALS: ['IBD patients']
INFO:root:PARSING LINE: predicate: need
DEBUG:root:SLOT: predicate INL: False VALS: ['need']
INFO:root:PARSING LINE: object: iron and anemia treatment
DEBUG:root:SLOT: object INL: False VALS: ['iron and anemia treatment']
INFO:root:PARSING LINE: subject: groups
DEBUG:root:SLOT: subject INL: False VALS: ['groups']
INFO:root:PARSING LINE: predicate: demonstrate
DEBUG:root:SLOT: predicate INL: False VALS: ['demonstrate']
INFO:root:PARSING LINE: object: differences in anemia types, iron replacement history, treatment response, and bad effects
DEBUG:root:SLOT: object INL: False VALS: ['differences in anemia types, iron replacement history, treatment response, and bad effects']
INFO:root:PARSING LINE: subject: IBD anemia treatment
DEBUG:root:SLOT: subject INL: False VALS: ['IBD anemia treatment']
INFO:root:PARSING LINE: predicate: involve
DEBUG:root:SLOT: predicate INL: False VALS: ['involve']
INFO:root:PARSING LINE: object: individualization
DEBUG:root:SLOT: object INL: False VALS: ['individualization']
DEBUG:root:RAW: {'subject': 'IBD anemia treatment', 'predicate': 'involve', 'object': 'individualization'}
DEBUG:root:Grounding annotation object {'subject': 'IBD anemia treatment', 'predicate': 'involve', 'object': 'individualization'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING IBD anemia treatment using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize IBD anemia treatment to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING involve using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize involve to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING individualization using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize individualization to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'IBD anemia treatment', 'predicate': 'involve', 'object': 'individualization'}
INFO:root:{'subject': 'IBD anemia treatment', 'predicate': 'involve', 'object': 'individualization'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: A case series of appendicitis and pseudo-appendicitis in a paediatric intensive care unit.
Keywords: appendicitis; critical care; diagnosis; pancreatitis; peritonitis; rupture
PMID: 37592922
Abstract: Appendicitis is a common childhood condition that can be diagnostically challenging. Severe cases may necessitate support in the critical or intensive care unit. These "critical appendicitis diagnoses" have rarely been described.We retrospective reviewed the PICU database of the Hong Kong Children's Hospital and identified cases of suspected and confirmed appendicitis. Clinical features, radiologic findings and final diagnosis of each case were summarized and reported in this case series. We review six anonymized cases of appendicitis managed in a paediatric intensive care unit (PICU) to illustrate the different age spectrum and clinical manifestations of the condition. Rupture of the inflamed appendix, peritonitis and pancreatitis were some of the complications encountered. Crohn disease was found in one case as an underlying diagnosis. Also, one girl clinically diagnosed with appendicitis was found to be a case of ruptured hepatoblastoma with no appendicitis (i.e., pseudoappendicitis).Prompt diagnosis, surgical removal of the inflamed appendix, and use of appropriate antimicrobials when indicated are essential in reducing mortality and morbidity associated with severe appendicitis. Significant premorbid conditions such as acute myeloid leukemia, mitochondrial encephalopathy lactic acidosis syndrome (MELAS), inflammatory bowel disease and complications may be present in patients needing intensive care as is illustrated in the present cases. Pseudoappendicitis is an important differential diagnosis. Imaging is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases.Copyright© Bentham Science Publishers; For any queries, please email at epub@benthamscience.net.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2572]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: A case series of appendicitis and pseudo-appendicitis in a paediatric intensive care unit.\\nKeywords: appendicitis; critical care; diagnosis; pancreatitis; peritonitis; rupture\\nPMID: 37592922\\nAbstract: Appendicitis is a common childhood condition that can be diagnostically challenging. Severe cases may necessitate support in the critical or intensive care unit. These \\"critical appendicitis diagnoses\\" have rarely been described.We retrospective reviewed the PICU database of the Hong Kong Children\'s Hospital and identified cases of suspected and confirmed appendicitis. Clinical features, radiologic findings and final diagnosis of each case were summarized and reported in this case series. We review six anonymized cases of appendicitis managed in a paediatric intensive care unit (PICU) to illustrate the different age spectrum and clinical manifestations of the condition. Rupture of the inflamed appendix, peritonitis and pancreatitis were some of the complications encountered. Crohn disease was found in one case as an underlying diagnosis. Also, one girl clinically diagnosed with appendicitis was found to be a case of ruptured hepatoblastoma with no appendicitis (i.e., pseudoappendicitis).Prompt diagnosis, surgical removal of the inflamed appendix, and use of appropriate antimicrobials when indicated are essential in reducing mortality and morbidity associated with severe appendicitis. Significant premorbid conditions such as acute myeloid leukemia, mitochondrial encephalopathy lactic acidosis syndrome (MELAS), inflammatory bowel disease and complications may be present in patients needing intensive care as is illustrated in the present cases. Pseudoappendicitis is an important differential diagnosis. Imaging is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases.Copyright\\u00a9 Bentham Science Publishers; For any queries, please email at epub@benthamscience.net.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=16199 request_id=494f0e185e9eccefccd655eb28788bde response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 2737
INFO:root:RAW TEXT: subject: appendicitis
predicate: is a common childhood condition
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: severe cases
predicate: may necessitate support in the critical or intensive care unit
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: critical appendicitis diagnoses
predicate: have rarely been described
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: PICU database of the Hong Kong Children's Hospital
predicate: reviewed
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: cases of suspected and confirmed appendicitis
predicate: identified
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: clinical features, radiologic findings and final diagnosis
predicate: were summarized and reported in this case series
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: six anonymized cases of appendicitis
predicate: managed in a paediatric intensive care unit (PICU) to illustrate the different age spectrum and clinical manifestations of the condition
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: Rupture of the inflamed appendix, peritonitis and pancreatitis
predicate: 
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: complications
predicate: encountered
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: Crohn disease
predicate: found in one case as an underlying diagnosis
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: one girl clinically diagnosed with appendicitis
predicate: found to be a case of ruptured hepatoblastoma with no appendicitis (i.e., pseudoappendicitis)
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: Prompt diagnosis, surgical removal of the inflamed appendix, and use of appropriate antimicrobials when indicated
predicate: are essential in reducing mortality and morbidity associated with severe appendicitis
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: Significant premorbid conditions such as acute myeloid leukemia, mitochondrial encephalopathy lactic acidosis syndrome (MELAS), inflammatory bowel disease and complications
predicate: may be present in patients needing intensive care as is illustrated in the present cases
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: Pseudoappendicitis
predicate: is an important differential diagnosis
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: Imaging
predicate: is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases
object: 
qualifier: 
subject_qualifier: 
object_qualifier:
INFO:root:PARSING LINE: subject: appendicitis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['appendicitis']
INFO:root:PARSING LINE: predicate: is a common childhood condition
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is a common childhood condition']
INFO:root:PARSING LINE: object:
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:root:PARSING LINE: subject: severe cases
DEBUG:root:SLOT: subject INL: False VALS: ['severe cases']
INFO:root:PARSING LINE: predicate: may necessitate support in the critical or intensive care unit
DEBUG:root:SLOT: predicate INL: False VALS: ['may necessitate support in the critical or intensive care unit']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: critical appendicitis diagnoses
DEBUG:root:SLOT: subject INL: False VALS: ['critical appendicitis diagnoses']
INFO:root:PARSING LINE: predicate: have rarely been described
DEBUG:root:SLOT: predicate INL: False VALS: ['have rarely been described']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: PICU database of the Hong Kong Children's Hospital
DEBUG:root:SLOT: subject INL: False VALS: ["PICU database of the Hong Kong Children's Hospital"]
INFO:root:PARSING LINE: predicate: reviewed
DEBUG:root:SLOT: predicate INL: False VALS: ['reviewed']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: cases of suspected and confirmed appendicitis
DEBUG:root:SLOT: subject INL: False VALS: ['cases of suspected and confirmed appendicitis']
INFO:root:PARSING LINE: predicate: identified
DEBUG:root:SLOT: predicate INL: False VALS: ['identified']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: clinical features, radiologic findings and final diagnosis
DEBUG:root:SLOT: subject INL: False VALS: ['clinical features, radiologic findings and final diagnosis']
INFO:root:PARSING LINE: predicate: were summarized and reported in this case series
DEBUG:root:SLOT: predicate INL: False VALS: ['were summarized and reported in this case series']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: six anonymized cases of appendicitis
DEBUG:root:SLOT: subject INL: False VALS: ['six anonymized cases of appendicitis']
INFO:root:PARSING LINE: predicate: managed in a paediatric intensive care unit (PICU) to illustrate the different age spectrum and clinical manifestations of the condition
DEBUG:root:SLOT: predicate INL: False VALS: ['managed in a paediatric intensive care unit (PICU) to illustrate the different age spectrum and clinical manifestations of the condition']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: Rupture of the inflamed appendix, peritonitis and pancreatitis
DEBUG:root:SLOT: subject INL: False VALS: ['Rupture of the inflamed appendix, peritonitis and pancreatitis']
INFO:root:PARSING LINE: predicate:
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: complications
DEBUG:root:SLOT: subject INL: False VALS: ['complications']
INFO:root:PARSING LINE: predicate: encountered
DEBUG:root:SLOT: predicate INL: False VALS: ['encountered']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: Crohn disease
DEBUG:root:SLOT: subject INL: False VALS: ['Crohn disease']
INFO:root:PARSING LINE: predicate: found in one case as an underlying diagnosis
DEBUG:root:SLOT: predicate INL: False VALS: ['found in one case as an underlying diagnosis']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: one girl clinically diagnosed with appendicitis
DEBUG:root:SLOT: subject INL: False VALS: ['one girl clinically diagnosed with appendicitis']
INFO:root:PARSING LINE: predicate: found to be a case of ruptured hepatoblastoma with no appendicitis (i.e., pseudoappendicitis)
DEBUG:root:SLOT: predicate INL: False VALS: ['found to be a case of ruptured hepatoblastoma with no appendicitis (i.e., pseudoappendicitis)']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: Prompt diagnosis, surgical removal of the inflamed appendix, and use of appropriate antimicrobials when indicated
DEBUG:root:SLOT: subject INL: False VALS: ['Prompt diagnosis, surgical removal of the inflamed appendix, and use of appropriate antimicrobials when indicated']
INFO:root:PARSING LINE: predicate: are essential in reducing mortality and morbidity associated with severe appendicitis
DEBUG:root:SLOT: predicate INL: False VALS: ['are essential in reducing mortality and morbidity associated with severe appendicitis']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: Significant premorbid conditions such as acute myeloid leukemia, mitochondrial encephalopathy lactic acidosis syndrome (MELAS), inflammatory bowel disease and complications
DEBUG:root:SLOT: subject INL: False VALS: ['Significant premorbid conditions such as acute myeloid leukemia, mitochondrial encephalopathy lactic acidosis syndrome (MELAS), inflammatory bowel disease and complications']
INFO:root:PARSING LINE: predicate: may be present in patients needing intensive care as is illustrated in the present cases
DEBUG:root:SLOT: predicate INL: False VALS: ['may be present in patients needing intensive care as is illustrated in the present cases']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: Pseudoappendicitis
DEBUG:root:SLOT: subject INL: False VALS: ['Pseudoappendicitis']
INFO:root:PARSING LINE: predicate: is an important differential diagnosis
DEBUG:root:SLOT: predicate INL: False VALS: ['is an important differential diagnosis']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: Imaging
DEBUG:root:SLOT: subject INL: False VALS: ['Imaging']
INFO:root:PARSING LINE: predicate: is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases
DEBUG:root:SLOT: predicate INL: False VALS: ['is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:RAW: {'subject': 'Imaging', 'predicate': 'is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases'}
DEBUG:root:Grounding annotation object {'subject': 'Imaging', 'predicate': 'is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Imaging using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Imaging to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases to is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these picu case
INFO:ontogpt.engines.knowledge_engine:GROUNDING is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these picu case using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases to DiseaseToCellularProcessPredicate
DEBUG:root:Creating object from dict {'subject': 'Imaging', 'predicate': 'is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases'}
INFO:root:{'subject': 'Imaging', 'predicate': 'is crucial and useful in establishing and confirming the diagnosis of appendicitis and pseudo-appendicitis in these PICU cases'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Dynamic alterations in metabolomics and transcriptomics associated with intestinal fibrosis in a 2,4,6-trinitrobenzene sulfonic acid-induced murine model.
Keywords: Inflammatory bowel disease; Intestinal fibrosis; Lipid metabolism; Metabolomics; RNA-sequencing
PMID: 37592304
Abstract: Intestinal fibrosis is a common and severe complication of inflammatory bowel disease without clear pathogenesis. Abnormal expression of host genes and metabolic perturbations might associate with the onset of intestinal fibrosis. In this study, we aimed to investigate the relationship between the development of intestinal fibrosis and the dynamic alterations in both fecal metabolites and host gene expression.We induced intestinal fibrosis in a murine model using 2,4,6-trinitrobenzene sulfonic acid (TNBS). TNBS-treated or control mice were sacrificed after 4 and 6 weeks of intervention; alterations in colonic genes and fecal metabolites were determined by transcriptomics and metabolomics, respectively. Differential, tendency, enrichment, and correlation analyses were performed to assess the relationship between host genes and fecal metabolites.RNA-sequencing analysis revealed that 679 differential genes with enduring changes were mainly enriched in immune response-related signaling pathways and metabolism-related biological processes. Among them, 15 lipid metabolism-related genes were closely related to the development of intestinal fibrosis. Moreover, the fecal metabolic profile was significantly altered during intestinal fibrosis development, especially the lipid metabolites. Particularly, dynamic perturbations in lipids were strongly associated with alterations in lipid metabolism-related genes expression. Additionally, six dynamically altered metabolites might serve as biomarkers to identify colitis-related intestinal fibrosis in the murine model.Intestinal fibrosis in colitis mice might be related to dynamic changes in gene expression and metabolites. These findings could provide new insights into the pathogenesis of intestinal fibrosis.© 2023. BioMed Central Ltd., part of Springer Nature.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2726]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Dynamic alterations in metabolomics and transcriptomics associated with intestinal fibrosis in a 2,4,6-trinitrobenzene sulfonic acid-induced murine model.\\nKeywords: Inflammatory bowel disease; Intestinal fibrosis; Lipid metabolism; Metabolomics; RNA-sequencing\\nPMID: 37592304\\nAbstract: Intestinal fibrosis is a common and severe complication of inflammatory bowel disease without clear pathogenesis. Abnormal expression of host genes and metabolic perturbations might associate with the onset of intestinal fibrosis. In this study, we aimed to investigate the relationship between the development of intestinal fibrosis and the dynamic alterations in both fecal metabolites and host gene expression.We induced intestinal fibrosis in a murine model using 2,4,6-trinitrobenzene sulfonic acid (TNBS). TNBS-treated or control mice were sacrificed after 4 and 6\\u00a0weeks of intervention; alterations in colonic genes and fecal metabolites were determined by transcriptomics and metabolomics, respectively. Differential, tendency, enrichment, and correlation analyses were performed to assess the relationship between host genes and fecal metabolites.RNA-sequencing analysis revealed that 679 differential genes with enduring changes were mainly enriched in immune response-related signaling pathways and metabolism-related biological processes. Among them, 15 lipid metabolism-related genes were closely related to the development of intestinal fibrosis. Moreover, the fecal metabolic profile was significantly altered during intestinal fibrosis development, especially the lipid metabolites. Particularly, dynamic perturbations in lipids were strongly associated with alterations in lipid metabolism-related genes expression. Additionally, six dynamically altered metabolites might serve as biomarkers to identify colitis-related intestinal fibrosis in the murine model.Intestinal fibrosis in colitis mice might be related to dynamic changes in gene expression and metabolites. These findings could provide new insights into the pathogenesis of intestinal fibrosis.\\u00a9 2023. BioMed Central Ltd., part of Springer Nature.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=432 request_id=b01c7f24c777c5da88be778330dceb23 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 51
INFO:root:RAW TEXT: There is no specific disease mentioned in the text.
ERROR:root:Line 'There is no specific disease mentioned in the text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Laparoscopic intracorporeal rectus aponeuroplasty (LIRA) technique versus intraperitoneal onlay mesh (IPOM plus) for ventral hernia repair: a comparative analysis.
Keywords: Bulging; Intraperitoneal onlay mesh (IPOM) plus; Laparoscopic intracorporeal rectus aponeuroplasty (LIRA); Laparoscopic ventral hernia repair (LVHR); Primary closure of defect (PCD); Recurrence
PMID: 37592164
Abstract: Primary aim of this study is to compare the postoperative outcomes of the laparoscopic intracorporeal rectus aponeuroplasty (LIRA) technique to the intraperitoneal onlay mesh closing the defect (IPOM plus), in terms of recurrence and bulging rates at one-year follow-up; secondary aim is to compare the postoperative complications, seroma and pain at 30 days and one-year after surgery.Patients with midline ventral hernia of 4-10 cm in width were included. Computed tomography scan was performed before, 1 and 12 months after surgery. Pain was evaluated using the visual analogue scale.Forty-five and forty-seven consecutive patients underwent LIRA and IPOM plus, respectively. Preoperatively, smoke habits and chronic obstructive pulmonary disease rates were statistically significantly higher in the LIRA group (p = 0.0001 and p = 0.012, respectively). Two bulgings (4.4%) occurred in the LIRA group, while in the IPOM plus group occurred 10 bulgings (21.3%) and three recurrences (6.4%) (p = 0.017 and p = 0.085, respectively). Postoperatively, seven (15.6%, Clavien-Dindo I) and four complications (8.5%, two Clavien-Dindo I, two Clavien-Dindo III-b) occurred in the LIRA and in the IPOM plus group, respectively (p = 0.298). One month after surgery, clinical seroma, occurred in five (11.1%) and eight patients (17%) in the LIRA and in the IPOM plus group, respectively (p = 0.416). During follow-up, pain reduction occurred, without statistically significant differences.In this study, even if we analysed a small series, LIRA showed lower bulging and recurrence rates in comparison to IPOM plus at one-year follow-up. Further prospective studies, with a large sample of patients and longer follow-up are required to draw definitive conclusions.© 2023. The Author(s), under exclusive licence to Springer-Verlag France SAS, part of Springer Nature.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2862]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Laparoscopic intracorporeal rectus aponeuroplasty (LIRA) technique versus intraperitoneal onlay mesh (IPOM plus) for ventral hernia repair: a comparative analysis.\\nKeywords: Bulging; Intraperitoneal onlay mesh (IPOM) plus; Laparoscopic intracorporeal rectus aponeuroplasty (LIRA); Laparoscopic ventral hernia repair (LVHR); Primary closure of defect (PCD); Recurrence\\nPMID: 37592164\\nAbstract: Primary aim of this study is to compare the postoperative outcomes of the laparoscopic intracorporeal rectus aponeuroplasty (LIRA) technique to the intraperitoneal onlay mesh closing the defect (IPOM plus), in terms of recurrence and bulging rates at one-year follow-up; secondary aim is to compare the postoperative complications, seroma and pain at 30\\u00a0days and one-year after surgery.Patients with midline ventral hernia of 4-10\\u00a0cm in width were included. Computed tomography scan was performed before, 1 and 12\\u00a0months after surgery. Pain was evaluated using the visual analogue scale.Forty-five and forty-seven consecutive patients underwent LIRA and IPOM plus, respectively. Preoperatively, smoke habits and chronic obstructive pulmonary disease rates were statistically significantly higher in the LIRA group (p\\u2009=\\u20090.0001 and p\\u2009=\\u20090.012, respectively). Two bulgings (4.4%) occurred in the LIRA group, while in the IPOM plus group occurred 10 bulgings (21.3%) and three recurrences (6.4%) (p\\u2009=\\u20090.017 and p\\u2009=\\u20090.085, respectively). Postoperatively, seven (15.6%, Clavien-Dindo I) and four complications (8.5%, two Clavien-Dindo I, two Clavien-Dindo III-b) occurred in the LIRA and in the IPOM plus group, respectively (p\\u2009=\\u20090.298). One month after surgery, clinical seroma, occurred in five (11.1%) and eight patients (17%) in the LIRA and in the IPOM plus group, respectively (p\\u2009=\\u20090.416). During follow-up, pain reduction occurred, without statistically significant differences.In this study, even if we analysed a small series, LIRA showed lower bulging and recurrence rates in comparison to IPOM plus at one-year follow-up. Further prospective studies, with a large sample of patients and longer follow-up are required to draw definitive conclusions.\\u00a9 2023. The Author(s), under exclusive licence to Springer-Verlag France SAS, part of Springer Nature.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=459 request_id=68ff53e37bb5b84ee0a5b825ffd46b6e response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 65
INFO:root:RAW TEXT: No relevant disease or cellular process is mentioned in the text.
ERROR:root:Line 'No relevant disease or cellular process is mentioned in the text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: RORγt-Raftlin1 complex regulates the pathogenicity of Th17 cells and colonic inflammation.
Keywords: 
PMID: 37591835
Abstract: Th17 cells that produce Interleukin IL-17 are pathogenic in many human diseases, including inflammatory bowel disease, but are, paradoxically, essential for maintaining the integrity of the intestinal barrier in a non-inflammatory state. However, the intracellular mechanisms that regulate distinct transcriptional profiles and functional diversity of Th17 cells remain unclear. Here we show Raftlin1, a lipid raft protein, specifically upregulates and forms a complex with RORγt in pathogenic Th17 cells. Disruption of the RORγt-Raftlin1 complex results in the reduction of pathogenic Th17 cells in response to Citrobacter rodentium; however, there is no effect on nonpathogenic Th17 cells in response to commensal segmented filamentous bacteria. Mechanistically, we show that Raftlin1 recruits distinct phospholipids to RORγt and promotes the pathogenicity of Th17 cells. Thus, we have identified a mechanism that drives the pathogenic function of Th17 cells, which could provide a platform for advanced therapeutic strategies to dampen Th17-mediated inflammatory diseases.© 2023. Springer Nature Limited.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1849]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: ROR\\u03b3t-Raftlin1 complex regulates the pathogenicity of Th17 cells and colonic inflammation.\\nKeywords: \\nPMID: 37591835\\nAbstract: Th17 cells that produce Interleukin IL-17 are pathogenic in many human diseases, including inflammatory bowel disease, but are, paradoxically, essential for maintaining the integrity of the intestinal barrier in a non-inflammatory state. However, the intracellular mechanisms that regulate distinct transcriptional profiles and functional diversity of Th17 cells remain unclear. Here we show Raftlin1, a lipid raft protein, specifically upregulates and forms a complex with ROR\\u03b3t in pathogenic Th17 cells. Disruption of the ROR\\u03b3t-Raftlin1 complex results in the reduction of pathogenic Th17 cells in response to Citrobacter rodentium; however, there is no effect on nonpathogenic Th17 cells in response to commensal segmented filamentous bacteria. Mechanistically, we show that Raftlin1 recruits distinct phospholipids to ROR\\u03b3t and promotes the pathogenicity of Th17 cells. Thus, we have identified a mechanism that drives the pathogenic function of Th17 cells, which could provide a platform for advanced therapeutic strategies to dampen Th17-mediated inflammatory diseases.\\u00a9 2023. Springer Nature Limited.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6419 request_id=0bbf1d40431997dbd1d3fe33a1cace51 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 916
INFO:root:RAW TEXT: subject: Th17 cells
predicate: produce
object: Interleukin IL-17

subject: Th17 cells
predicate: are pathogenic in
object: many human diseases

subject: Th17 cells
predicate: are essential for
object: maintaining the integrity of the intestinal barrier in a non-inflammatory state

subject: RORγt-Raftlin1 complex
predicate: regulates
object: the pathogenicity of Th17 cells

subject: Raftlin1
predicate: upregulates and forms a complex with
object: RORγt in pathogenic Th17 cells

subject: disruption of the RORγt-Raftlin1 complex
predicate: results in the reduction of
object: pathogenic Th17 cells in response to Citrobacter rodentium

subject: there is no effect on
object: nonpathogenic Th17 cells in response to commensal segmented filamentous bacteria

subject: Raftlin1
predicate: recruits
object: distinct phospholipids to RORγt

subject: Raftlin1
predicate: promotes
object: the pathogenicity of Th17 cells
INFO:root:PARSING LINE: subject: Th17 cells
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Th17 cells']
INFO:root:PARSING LINE: predicate: produce
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['produce']
INFO:root:PARSING LINE: object: Interleukin IL-17
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['Interleukin IL-17']
INFO:root:PARSING LINE: subject: Th17 cells
DEBUG:root:SLOT: subject INL: False VALS: ['Th17 cells']
INFO:root:PARSING LINE: predicate: are pathogenic in
DEBUG:root:SLOT: predicate INL: False VALS: ['are pathogenic in']
INFO:root:PARSING LINE: object: many human diseases
DEBUG:root:SLOT: object INL: False VALS: ['many human diseases']
INFO:root:PARSING LINE: subject: Th17 cells
DEBUG:root:SLOT: subject INL: False VALS: ['Th17 cells']
INFO:root:PARSING LINE: predicate: are essential for
DEBUG:root:SLOT: predicate INL: False VALS: ['are essential for']
INFO:root:PARSING LINE: object: maintaining the integrity of the intestinal barrier in a non-inflammatory state
DEBUG:root:SLOT: object INL: False VALS: ['maintaining the integrity of the intestinal barrier in a non-inflammatory state']
INFO:root:PARSING LINE: subject: RORγt-Raftlin1 complex
DEBUG:root:SLOT: subject INL: False VALS: ['RORγt-Raftlin1 complex']
INFO:root:PARSING LINE: predicate: regulates
DEBUG:root:SLOT: predicate INL: False VALS: ['regulates']
INFO:root:PARSING LINE: object: the pathogenicity of Th17 cells
DEBUG:root:SLOT: object INL: False VALS: ['the pathogenicity of Th17 cells']
INFO:root:PARSING LINE: subject: Raftlin1
DEBUG:root:SLOT: subject INL: False VALS: ['Raftlin1']
INFO:root:PARSING LINE: predicate: upregulates and forms a complex with
DEBUG:root:SLOT: predicate INL: False VALS: ['upregulates and forms a complex with']
INFO:root:PARSING LINE: object: RORγt in pathogenic Th17 cells
DEBUG:root:SLOT: object INL: False VALS: ['RORγt in pathogenic Th17 cells']
INFO:root:PARSING LINE: subject: disruption of the RORγt-Raftlin1 complex
DEBUG:root:SLOT: subject INL: False VALS: ['disruption of the RORγt-Raftlin1 complex']
INFO:root:PARSING LINE: predicate: results in the reduction of
DEBUG:root:SLOT: predicate INL: False VALS: ['results in the reduction of']
INFO:root:PARSING LINE: object: pathogenic Th17 cells in response to Citrobacter rodentium
DEBUG:root:SLOT: object INL: False VALS: ['pathogenic Th17 cells in response to Citrobacter rodentium']
INFO:root:PARSING LINE: subject: there is no effect on
DEBUG:root:SLOT: subject INL: False VALS: ['there is no effect on']
INFO:root:PARSING LINE: object: nonpathogenic Th17 cells in response to commensal segmented filamentous bacteria
DEBUG:root:SLOT: object INL: False VALS: ['nonpathogenic Th17 cells in response to commensal segmented filamentous bacteria']
INFO:root:PARSING LINE: subject: Raftlin1
DEBUG:root:SLOT: subject INL: False VALS: ['Raftlin1']
INFO:root:PARSING LINE: predicate: recruits
DEBUG:root:SLOT: predicate INL: False VALS: ['recruits']
INFO:root:PARSING LINE: object: distinct phospholipids to RORγt
DEBUG:root:SLOT: object INL: False VALS: ['distinct phospholipids to RORγt']
INFO:root:PARSING LINE: subject: Raftlin1
DEBUG:root:SLOT: subject INL: False VALS: ['Raftlin1']
INFO:root:PARSING LINE: predicate: promotes
DEBUG:root:SLOT: predicate INL: False VALS: ['promotes']
INFO:root:PARSING LINE: object: the pathogenicity of Th17 cells
DEBUG:root:SLOT: object INL: False VALS: ['the pathogenicity of Th17 cells']
DEBUG:root:RAW: {'subject': 'Raftlin1', 'predicate': 'promotes', 'object': 'the pathogenicity of Th17 cells'}
DEBUG:root:Grounding annotation object {'subject': 'Raftlin1', 'predicate': 'promotes', 'object': 'the pathogenicity of Th17 cells'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Raftlin1 using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Raftlin1 to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING promotes using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized promotes to promote
INFO:ontogpt.engines.knowledge_engine:GROUNDING promote using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize promotes to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING the pathogenicity of Th17 cells using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized the pathogenicity of Th17 cells to the pathogenicity of th17 cell
INFO:ontogpt.engines.knowledge_engine:GROUNDING the pathogenicity of th17 cell using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize the pathogenicity of Th17 cells to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'Raftlin1', 'predicate': 'promotes', 'object': 'the pathogenicity of Th17 cells'}
INFO:root:{'subject': 'Raftlin1', 'predicate': 'promotes', 'object': 'the pathogenicity of Th17 cells'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Key metabolomic alterations are associated with ulcerative colitis disease state and activity: a validation analysis.
Keywords: COLONIC MUCOSAL METABOLISM; INFLAMMATORY BOWEL DISEASE; INTESTINAL MICROBIOLOGY; ULCERATIVE COLITIS
PMID: 37591699
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[868]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Key metabolomic alterations are associated with ulcerative colitis disease state and activity: a validation analysis.\\nKeywords: COLONIC MUCOSAL METABOLISM; INFLAMMATORY BOWEL DISEASE; INTESTINAL MICROBIOLOGY; ULCERATIVE COLITIS\\nPMID: 37591699\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1108 request_id=c213296d2ea42974499b0a44cb35f94a response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 152
INFO:root:RAW TEXT: subject: ulcerative colitis
predicate: associated with
object: disease state and activity
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: ulcerative colitis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['ulcerative colitis']
INFO:root:PARSING LINE: predicate: associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['associated with']
INFO:root:PARSING LINE: object: disease state and activity
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['disease state and activity']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'ulcerative colitis', 'predicate': 'associated with', 'object': 'disease state and activity', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'ulcerative colitis', 'predicate': 'associated with', 'object': 'disease state and activity', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative colitis using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized ulcerative colitis to ulcerative coliti
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative coliti using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding ulcerative colitis to MONDO:0005101; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized ulcerative colitis with MONDO:0005101 to MONDO:0005101
INFO:ontogpt.engines.knowledge_engine:GROUNDING associated with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize associated with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING disease state and activity using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize disease state and activity to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005101', 'predicate': 'associated with', 'object': 'disease state and activity', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'MONDO:0005101', 'predicate': 'associated with', 'object': 'disease state and activity', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Exosomes-transferred LINC00668 Contributes to Thrombosis by Promoting NETs Formation in Inflammatory Bowel Disease.
Keywords: LINC00668; berberines; exosomes; inflammatory bowel diseases; neutrophil elastase; neutrophil extracellular traps; thrombus
PMID: 37590310
Abstract: Epidemiological studies show an association between inflammatory bowel disease (IBD) and increased risk of thrombosis. However, how IBD influences thrombosis remains unknown. The current study shows that formation of neutrophil extracellular traps (NETs) significantly increased in the dextran sulfate sodium (DSS)-induced IBD mice, which in turn, contributes to thrombus formation in a NETs-dependent fashion. Furthermore, the exosomes isolated from the plasma of the IBD mice induce arterial and venous thrombosis in vivo. Importantly, proinflammatory factors-exposed intestinal epithelial cells (inflamed IECs) promote neutrophils to release NETs through their secreted exosomes. RNA sequencing revealed that LINC00668 is highly enriched in the inflamed IECs-derived exosomes. Mechanistically, LINC00668 facilitates the translocation of neutrophil elastase (NE) from the cytoplasmic granules to the nucleus via its interaction with NE in a sequence-specific manner, thereby inducing NETs release and thrombus formation. Importantly, berberine (BBR) suppresses the nuclear translocation of NE and subsequent NETs formation by inhibiting the interaction of LINC00668 with NE, thus exerting its antithrombotic effects. This study provides a novel pathobiological mechanism linking IBD and thrombosis by exosome-mediated NETs formation. Targeting LINC00668 can serve as a novel molecular treatment strategy to treat IBD-related thrombosis.© 2023 The Authors. Advanced Science published by Wiley-VCH GmbH.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2393]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Exosomes-transferred LINC00668 Contributes to Thrombosis by Promoting NETs Formation in Inflammatory Bowel Disease.\\nKeywords: LINC00668; berberines; exosomes; inflammatory bowel diseases; neutrophil elastase; neutrophil extracellular traps; thrombus\\nPMID: 37590310\\nAbstract: Epidemiological studies show an association between inflammatory bowel disease (IBD) and increased risk of thrombosis. However, how IBD influences thrombosis remains unknown. The current study shows that formation\\u00a0of\\u00a0neutrophil extracellular traps (NETs) significantly increased in the dextran sulfate sodium (DSS)-induced\\u00a0IBD\\u00a0mice, which in turn, contributes to thrombus formation in a NETs-dependent fashion. Furthermore, the exosomes isolated from the plasma of the IBD mice induce arterial and venous thrombosis in vivo. Importantly, proinflammatory factors-exposed intestinal epithelial cells (inflamed IECs) promote neutrophils to release NETs through their secreted exosomes. RNA sequencing revealed\\u00a0that LINC00668 is highly enriched in the inflamed IECs-derived exosomes. Mechanistically, LINC00668 facilitates the translocation of neutrophil elastase (NE) from the cytoplasmic granules to the nucleus via its interaction with NE in a sequence-specific manner, thereby inducing NETs release and thrombus formation. Importantly, berberine (BBR) suppresses the nuclear translocation of NE and subsequent NETs formation by inhibiting the interaction of LINC00668 with NE, thus exerting its antithrombotic effects. This study provides a novel pathobiological mechanism linking IBD and thrombosis by exosome-mediated NETs formation. Targeting LINC00668 can serve as a novel molecular treatment strategy to treat IBD-related thrombosis.\\u00a9 2023 The Authors. Advanced Science published by Wiley-VCH GmbH.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=11259 request_id=b5247b79f273287a78b1c887c632f412 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1613
INFO:root:RAW TEXT: subject: IBD (inflammatory bowel disease)
predicate: influences
object: thrombosis

subject: formation of neutrophil extracellular traps (NETs)
predicate: significantly increased
object: dextran sulfate sodium (DSS)-induced IBD mice

subject: exosomes
predicate: induce
object: arterial and venous thrombosis

subject: inflamed IECs (intestinal epithelial cells)
predicate: promote
object: neutrophils

subject: LINC00668
predicate: facilitates
object: translocation of neutrophil elastase (NE) from cytoplasmic granules to nucleus

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: induces
object: NETs release and thrombus formation

subject: berberine (BBR)
predicate: suppresses
object: nuclear translocation of NE and subsequent NETs formation

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: LINC00668
predicate: interacts with
object: NE

subject: berberine (BBR)
predicate: inhibits
object: interaction of LINC00668 with NE
INFO:root:PARSING LINE: subject: IBD (inflammatory bowel disease)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['IBD (inflammatory bowel disease)']
INFO:root:PARSING LINE: predicate: influences
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['influences']
INFO:root:PARSING LINE: object: thrombosis
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['thrombosis']
INFO:root:PARSING LINE: subject: formation of neutrophil extracellular traps (NETs)
DEBUG:root:SLOT: subject INL: False VALS: ['formation of neutrophil extracellular traps (NETs)']
INFO:root:PARSING LINE: predicate: significantly increased
DEBUG:root:SLOT: predicate INL: False VALS: ['significantly increased']
INFO:root:PARSING LINE: object: dextran sulfate sodium (DSS)-induced IBD mice
DEBUG:root:SLOT: object INL: False VALS: ['dextran sulfate sodium (DSS)-induced IBD mice']
INFO:root:PARSING LINE: subject: exosomes
DEBUG:root:SLOT: subject INL: False VALS: ['exosomes']
INFO:root:PARSING LINE: predicate: induce
DEBUG:root:SLOT: predicate INL: False VALS: ['induce']
INFO:root:PARSING LINE: object: arterial and venous thrombosis
DEBUG:root:SLOT: object INL: False VALS: ['arterial and venous thrombosis']
INFO:root:PARSING LINE: subject: inflamed IECs (intestinal epithelial cells)
DEBUG:root:SLOT: subject INL: False VALS: ['inflamed IECs (intestinal epithelial cells)']
INFO:root:PARSING LINE: predicate: promote
DEBUG:root:SLOT: predicate INL: False VALS: ['promote']
INFO:root:PARSING LINE: object: neutrophils
DEBUG:root:SLOT: object INL: False VALS: ['neutrophils']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: facilitates
DEBUG:root:SLOT: predicate INL: False VALS: ['facilitates']
INFO:root:PARSING LINE: object: translocation of neutrophil elastase (NE) from cytoplasmic granules to nucleus
DEBUG:root:SLOT: object INL: False VALS: ['translocation of neutrophil elastase (NE) from cytoplasmic granules to nucleus']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: induces
DEBUG:root:SLOT: predicate INL: False VALS: ['induces']
INFO:root:PARSING LINE: object: NETs release and thrombus formation
DEBUG:root:SLOT: object INL: False VALS: ['NETs release and thrombus formation']
INFO:root:PARSING LINE: subject: berberine (BBR)
DEBUG:root:SLOT: subject INL: False VALS: ['berberine (BBR)']
INFO:root:PARSING LINE: predicate: suppresses
DEBUG:root:SLOT: predicate INL: False VALS: ['suppresses']
INFO:root:PARSING LINE: object: nuclear translocation of NE and subsequent NETs formation
DEBUG:root:SLOT: object INL: False VALS: ['nuclear translocation of NE and subsequent NETs formation']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: LINC00668
DEBUG:root:SLOT: subject INL: False VALS: ['LINC00668']
INFO:root:PARSING LINE: predicate: interacts with
DEBUG:root:SLOT: predicate INL: False VALS: ['interacts with']
INFO:root:PARSING LINE: object: NE
DEBUG:root:SLOT: object INL: False VALS: ['NE']
INFO:root:PARSING LINE: subject: berberine (BBR)
DEBUG:root:SLOT: subject INL: False VALS: ['berberine (BBR)']
INFO:root:PARSING LINE: predicate: inhibits
DEBUG:root:SLOT: predicate INL: False VALS: ['inhibits']
INFO:root:PARSING LINE: object: interaction of LINC00668 with NE
DEBUG:root:SLOT: object INL: False VALS: ['interaction of LINC00668 with NE']
DEBUG:root:RAW: {'subject': 'berberine (BBR)', 'predicate': 'inhibits', 'object': 'interaction of LINC00668 with NE'}
DEBUG:root:Grounding annotation object {'subject': 'berberine (BBR)', 'predicate': 'inhibits', 'object': 'interaction of LINC00668 with NE'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING berberine (BBR) using Disease
INFO:ontogpt.engines.knowledge_engine:berberine (bbr) =>paren=> ['bbr']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF bbr from ['bbr']
INFO:ontogpt.engines.knowledge_engine:GROUNDING bbr using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:berberine (bbr) =>trimmed=> berberine; in ['bbr']
INFO:ontogpt.engines.knowledge_engine:GROUNDING berberine using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize berberine (BBR) to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING inhibits using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized inhibits to inhibit
INFO:ontogpt.engines.knowledge_engine:GROUNDING inhibit using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize inhibits to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING interaction of LINC00668 with NE using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize interaction of LINC00668 with NE to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'berberine (BBR)', 'predicate': 'inhibits', 'object': 'interaction of LINC00668 with NE'}
INFO:root:{'subject': 'berberine (BBR)', 'predicate': 'inhibits', 'object': 'interaction of LINC00668 with NE'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Gastrointestinal Guidelines app: Streamlining guideline awareness and adherence in gastroenterology.
Keywords: endoscopy; guidelines; inflammatory bowel disease; phone application; survey
PMID: 37590238
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[828]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Gastrointestinal Guidelines app: Streamlining guideline awareness and adherence in gastroenterology.\\nKeywords: endoscopy; guidelines; inflammatory bowel disease; phone application; survey\\nPMID: 37590238\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=309 request_id=958b492678e015eaa3b54129e9d36e7a response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 40
INFO:root:RAW TEXT: No entities mentioned in the given text.
ERROR:root:Line 'No entities mentioned in the given text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Therapeutic Effect of HDAC5 Binding and Cell Penetrating Peptide for the Treatment of Inflammatory Bowel Disease.
Keywords: Anti-inflammatory agent; Cell-penetrating peptide; Histone deacetylase; Inflammatory bowel disease; Macrophage
PMID: 37589886
Abstract: Inflammatory bowel disease (IBD) is an incurable disease that negatively influences the quality of life of patients. Current and emerging therapies target proinflammatory cytokines and/or receptors to downregulate proinflammatory responses, but insufficient remission requires other therapeutic agents. Herein, we report that the synthetic anti-inflammatory peptide 15 (SAP15) is capable of cell penetration and anti-inflammatory activity in human macrophages.SAP15 was labeled with fluorescence and administered to human leukemia monocytic cells (THP-1) cells for cell penetration analysis. Using biolayer interferometry analysis, the binding affinity of SAP15 with histone deacetylase 5 (HDAC5) was measured. SAP15-treated THP-1 cells were analyzed by protein phosphorylation assay, flow cytometry, and enzyme-linked immunosorbent assay (ELISA). In addition, in vivo analysis of the therapeutic effect on IBD was observed in a dextran sulfate sodium (DSS)-induced model. Samples from SAP15-treated mice were analyzed at both the macroscopic and microscopic levels using ELISA, myeloperoxidase (MPO) assays, and histological evaluations.SAP15 was internalized within the cytosol and nucleus of THP-1 cells and bound to the HDAC5 protein. SAP15-treated macrophages were assessed for protein phosphorylation and showed inhibited phosphorylation of HDAC5 and other immune-related proteins, which led to increased M2-like macrophage markers and decreased M1-like macrophage markers and tumor necrosis factor-α and interleukin-6 cytokine levels. The SAP15 treatment on IBD model showed significant recovery of colon length. Further histological analysis of colon demonstrated the therapeutic effect of SAP15 on mucosal layer. Moreover, proinflammatory cytokine levels and MPO activity from the plasma show that SAP15 is effective in reduced proinflammatory responses.These findings suggest that SAP15 is a novel peptide with a novel cell-penetrating peptide with anti-inflammatory property that can be used as a therapeutic agent for IBD and other inflammatory diseases.© 2023. Korean Tissue Engineering and Regenerative Medicine Society.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3009]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Therapeutic Effect of HDAC5 Binding and Cell Penetrating Peptide for the Treatment of Inflammatory Bowel Disease.\\nKeywords: Anti-inflammatory agent; Cell-penetrating peptide; Histone deacetylase; Inflammatory bowel disease; Macrophage\\nPMID: 37589886\\nAbstract: Inflammatory bowel disease (IBD) is an incurable disease that negatively influences the quality of life of patients. Current and emerging therapies target proinflammatory cytokines and/or receptors to downregulate proinflammatory responses, but insufficient remission requires other therapeutic agents. Herein, we report that the synthetic anti-inflammatory peptide 15 (SAP15) is capable of cell penetration and anti-inflammatory activity in human macrophages.SAP15 was labeled with fluorescence and administered to human leukemia\\u00a0monocytic cells (THP-1) cells for cell penetration analysis. Using biolayer interferometry analysis, the binding affinity of SAP15 with histone deacetylase 5 (HDAC5) was measured. SAP15-treated THP-1 cells were analyzed by protein phosphorylation assay, flow cytometry, and enzyme-linked immunosorbent assay (ELISA). In addition, in vivo analysis of the therapeutic effect on IBD was observed in a dextran sulfate sodium (DSS)-induced model. Samples from SAP15-treated mice were analyzed at both the macroscopic and microscopic levels using ELISA, myeloperoxidase (MPO) assays, and histological evaluations.SAP15 was internalized within the cytosol and nucleus of THP-1 cells and bound to the HDAC5 protein. SAP15-treated macrophages were assessed for protein phosphorylation and showed inhibited phosphorylation of HDAC5 and other immune-related proteins, which led to increased M2-like macrophage markers and decreased M1-like macrophage markers and tumor necrosis factor-\\u03b1 and interleukin-6 cytokine levels. The SAP15 treatment on IBD model showed significant recovery of colon length. Further histological analysis of colon demonstrated the therapeutic effect of SAP15 on mucosal layer. Moreover, proinflammatory cytokine levels and MPO activity from the plasma show that SAP15 is effective in reduced proinflammatory responses.These findings suggest that SAP15 is a novel peptide with a novel\\u00a0cell-penetrating\\u00a0peptide with anti-inflammatory property that can be used as a therapeutic agent for IBD and other inflammatory diseases.\\u00a9 2023. Korean Tissue Engineering and Regenerative Medicine Society.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=16236 request_id=629340c6c7c4cfe595de566158a06b3d response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 2624
INFO:root:RAW TEXT: subject: Inflammatory bowel disease (IBD)
predicate: negatively influences
object: quality of life of patients
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: anti-inflammatory agent
predicate: target
object: proinflammatory cytokines and/or receptors
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: synthetic anti-inflammatory peptide 15 (SAP15)
predicate: is capable of
object: cell penetration and anti-inflammatory activity in human macrophages
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15
predicate: was labeled with
object: fluorescence
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15
predicate: administered to
object: human leukemia monocytic cells (THP-1) cells for cell penetration analysis
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15
predicate: binding affinity
object: histone deacetylase 5 (HDAC5)
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15-treated THP-1 cells
predicate: analyzed by
object: protein phosphorylation assay, flow cytometry, and enzyme-linked immunosorbent assay (ELISA)
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15-treated macrophages
predicate: assessed for
object: protein phosphorylation
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15-treated macrophages
predicate: showed inhibited phosphorylation of
object: HDAC5 and other immune-related proteins
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15-treated macrophages
predicate: led to increased
object: M2-like macrophage markers
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15-treated macrophages
predicate: led to decreased
object: M1-like macrophage markers and tumor necrosis factor-α and interleukin-6 cytokine levels
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15 treatment
predicate: showed significant recovery of
object: colon length
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15 treatment
predicate: demonstrated the therapeutic effect of
object: SAP15 on mucosal layer
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15
predicate: is effective in reduced
object: proinflammatory responses
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: SAP15
predicate: can be used as a therapeutic agent for
object: IBD and other inflammatory diseases
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Inflammatory bowel disease (IBD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: negatively influences
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['negatively influences']
INFO:root:PARSING LINE: object: quality of life of patients
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['quality of life of patients']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: anti-inflammatory agent
DEBUG:root:SLOT: subject INL: False VALS: ['anti-inflammatory agent']
INFO:root:PARSING LINE: predicate: target
DEBUG:root:SLOT: predicate INL: False VALS: ['target']
INFO:root:PARSING LINE: object: proinflammatory cytokines and/or receptors
DEBUG:root:SLOT: object INL: False VALS: ['proinflammatory cytokines and/or receptors']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: synthetic anti-inflammatory peptide 15 (SAP15)
DEBUG:root:SLOT: subject INL: False VALS: ['synthetic anti-inflammatory peptide 15 (SAP15)']
INFO:root:PARSING LINE: predicate: is capable of
DEBUG:root:SLOT: predicate INL: False VALS: ['is capable of']
INFO:root:PARSING LINE: object: cell penetration and anti-inflammatory activity in human macrophages
DEBUG:root:SLOT: object INL: False VALS: ['cell penetration and anti-inflammatory activity in human macrophages']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15']
INFO:root:PARSING LINE: predicate: was labeled with
DEBUG:root:SLOT: predicate INL: False VALS: ['was labeled with']
INFO:root:PARSING LINE: object: fluorescence
DEBUG:root:SLOT: object INL: False VALS: ['fluorescence']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15']
INFO:root:PARSING LINE: predicate: administered to
DEBUG:root:SLOT: predicate INL: False VALS: ['administered to']
INFO:root:PARSING LINE: object: human leukemia monocytic cells (THP-1) cells for cell penetration analysis
DEBUG:root:SLOT: object INL: False VALS: ['human leukemia monocytic cells (THP-1) cells for cell penetration analysis']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15']
INFO:root:PARSING LINE: predicate: binding affinity
DEBUG:root:SLOT: predicate INL: False VALS: ['binding affinity']
INFO:root:PARSING LINE: object: histone deacetylase 5 (HDAC5)
DEBUG:root:SLOT: object INL: False VALS: ['histone deacetylase 5 (HDAC5)']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15-treated THP-1 cells
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15-treated THP-1 cells']
INFO:root:PARSING LINE: predicate: analyzed by
DEBUG:root:SLOT: predicate INL: False VALS: ['analyzed by']
INFO:root:PARSING LINE: object: protein phosphorylation assay, flow cytometry, and enzyme-linked immunosorbent assay (ELISA)
DEBUG:root:SLOT: object INL: False VALS: ['protein phosphorylation assay, flow cytometry, and enzyme-linked immunosorbent assay (ELISA)']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15-treated macrophages
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15-treated macrophages']
INFO:root:PARSING LINE: predicate: assessed for
DEBUG:root:SLOT: predicate INL: False VALS: ['assessed for']
INFO:root:PARSING LINE: object: protein phosphorylation
DEBUG:root:SLOT: object INL: False VALS: ['protein phosphorylation']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15-treated macrophages
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15-treated macrophages']
INFO:root:PARSING LINE: predicate: showed inhibited phosphorylation of
DEBUG:root:SLOT: predicate INL: False VALS: ['showed inhibited phosphorylation of']
INFO:root:PARSING LINE: object: HDAC5 and other immune-related proteins
DEBUG:root:SLOT: object INL: False VALS: ['HDAC5 and other immune-related proteins']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15-treated macrophages
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15-treated macrophages']
INFO:root:PARSING LINE: predicate: led to increased
DEBUG:root:SLOT: predicate INL: False VALS: ['led to increased']
INFO:root:PARSING LINE: object: M2-like macrophage markers
DEBUG:root:SLOT: object INL: False VALS: ['M2-like macrophage markers']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15-treated macrophages
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15-treated macrophages']
INFO:root:PARSING LINE: predicate: led to decreased
DEBUG:root:SLOT: predicate INL: False VALS: ['led to decreased']
INFO:root:PARSING LINE: object: M1-like macrophage markers and tumor necrosis factor-α and interleukin-6 cytokine levels
DEBUG:root:SLOT: object INL: False VALS: ['M1-like macrophage markers and tumor necrosis factor-α and interleukin-6 cytokine levels']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15 treatment
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15 treatment']
INFO:root:PARSING LINE: predicate: showed significant recovery of
DEBUG:root:SLOT: predicate INL: False VALS: ['showed significant recovery of']
INFO:root:PARSING LINE: object: colon length
DEBUG:root:SLOT: object INL: False VALS: ['colon length']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15 treatment
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15 treatment']
INFO:root:PARSING LINE: predicate: demonstrated the therapeutic effect of
DEBUG:root:SLOT: predicate INL: False VALS: ['demonstrated the therapeutic effect of']
INFO:root:PARSING LINE: object: SAP15 on mucosal layer
DEBUG:root:SLOT: object INL: False VALS: ['SAP15 on mucosal layer']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15']
INFO:root:PARSING LINE: predicate: is effective in reduced
DEBUG:root:SLOT: predicate INL: False VALS: ['is effective in reduced']
INFO:root:PARSING LINE: object: proinflammatory responses
DEBUG:root:SLOT: object INL: False VALS: ['proinflammatory responses']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: SAP15
DEBUG:root:SLOT: subject INL: False VALS: ['SAP15']
INFO:root:PARSING LINE: predicate: can be used as a therapeutic agent for
DEBUG:root:SLOT: predicate INL: False VALS: ['can be used as a therapeutic agent for']
INFO:root:PARSING LINE: object: IBD and other inflammatory diseases
DEBUG:root:SLOT: object INL: False VALS: ['IBD and other inflammatory diseases']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'SAP15', 'predicate': 'can be used as a therapeutic agent for', 'object': 'IBD and other inflammatory diseases', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'SAP15', 'predicate': 'can be used as a therapeutic agent for', 'object': 'IBD and other inflammatory diseases', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING SAP15 using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize SAP15 to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING can be used as a therapeutic agent for using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize can be used as a therapeutic agent for to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING IBD and other inflammatory diseases using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized IBD and other inflammatory diseases to ibd and other inflammatory disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING ibd and other inflammatory disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize IBD and other inflammatory diseases to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'SAP15', 'predicate': 'can be used as a therapeutic agent for', 'object': 'IBD and other inflammatory diseases', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'SAP15', 'predicate': 'can be used as a therapeutic agent for', 'object': 'IBD and other inflammatory diseases', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Effectiveness and Safety Profile of Budesonide Maintenance in Microscopic Colitis: A Systematic Review and Meta-Analysis.
Keywords: adverse effects; budesonide; collagenous colitis; lymphocytic colitis; microscopic colitis
PMID: 37589651
Abstract: Microscopic colitis (MC) is a common cause of chronic diarrhea. Randomized controlled trials (RCTs) have demonstrated the efficacy of budesonide treatment for MC. However, relapse is frequent after discontinuation of budesonide, and data on maintenance therapy are limited. We performed a systematic review and meta-analysis evaluating these outcomes in clinical trials and real-world settings.A systematic search was performed on October 31, 2022, of Medline, Embase, Cochrane, and Scopus. Case series, case-control, cohort studies, and RCTs of adults with MC were included. Data were pooled using random effects models to calculate weighted pooled estimates and 95% confidence intervals. Heterogeneity was assessed using the I2 statistic.We included 35 studies (11 RCTs, 24 observational studies) with 1657 MC patients treated with budesonide induction and 146 for maintenance. The overall pooled clinical remission rate with budesonide treatment was similar between RCTs and observational studies. The pooled remission rate with budesonide maintenance therapy was 84% (95% CI, 0.60-1.00; I2 = 91%). After budesonide discontinuation, the pooled relapse rate was 53% (95% CI, 0.42-0.63; I2 = 76%). On maintenance therapy, no differences were noted in adverse events (eg, metabolic bone disease, hypertension, hyperglycemia, cataracts/glaucoma) in those on budesonide vs placebo or other noncorticosteroid medications for MC (P = .9).Budesonide is an effective maintenance treatment for MC. There is a high risk of recurrence after budesonide discontinuation, but long-term use at the lowest effective dose appears to be relatively safe and have limited adverse effects.© The Author(s) 2023. Published by Oxford University Press on behalf of Crohn’s & Colitis Foundation. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2717]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Effectiveness and Safety Profile of Budesonide Maintenance in Microscopic Colitis: A Systematic Review and Meta-Analysis.\\nKeywords: adverse effects; budesonide; collagenous colitis; lymphocytic colitis; microscopic colitis\\nPMID: 37589651\\nAbstract: Microscopic colitis (MC) is a common cause of chronic diarrhea. Randomized controlled trials (RCTs) have demonstrated the efficacy of budesonide treatment for MC. However, relapse is frequent after discontinuation of budesonide, and data on maintenance therapy are limited. We performed a systematic review and meta-analysis evaluating these outcomes in clinical trials and real-world settings.A systematic search was performed on October 31, 2022, of Medline, Embase, Cochrane, and Scopus. Case series, case-control, cohort studies, and RCTs of adults with MC were included. Data were pooled using random effects models to calculate weighted pooled estimates and 95% confidence intervals. Heterogeneity was assessed using the I2 statistic.We included 35 studies (11 RCTs, 24 observational studies) with 1657 MC patients treated with budesonide induction and 146 for maintenance. The overall pooled clinical remission rate with budesonide treatment was similar between RCTs and observational studies. The pooled remission rate with budesonide maintenance therapy was 84% (95% CI, 0.60-1.00; I2 = 91%). After budesonide discontinuation, the pooled relapse rate was 53% (95% CI, 0.42-0.63; I2\\u2005=\\u200576%). On maintenance therapy, no differences were noted in adverse events (eg, metabolic bone disease, hypertension, hyperglycemia, cataracts/glaucoma) in those on budesonide vs placebo or other noncorticosteroid medications for MC (P = .9).Budesonide is an effective maintenance treatment for MC. There is a high risk of recurrence after budesonide discontinuation, but long-term use at the lowest effective dose appears to be relatively safe and have limited adverse effects.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of Crohn\\u2019s & Colitis Foundation. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=390 request_id=ff97a5e9322bc5c6f6e7f16f35e388f0 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 56
INFO:root:RAW TEXT: No relevant entities are mentioned in the provided text.
ERROR:root:Line 'No relevant entities are mentioned in the provided text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Approval Timelines for Advanced Therapeutics in Inflammatory Bowel Disease: A Comparison Between the European Medicines Agency and the Food and Drug Administration.
Keywords: clinical trials; drug approval; regulatory agency
PMID: 37589567
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[865]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Approval Timelines for Advanced Therapeutics in Inflammatory Bowel Disease: A Comparison Between the European Medicines Agency and the Food and Drug Administration.\\nKeywords: clinical trials; drug approval; regulatory agency\\nPMID: 37589567\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=484 request_id=a89f3bb5ef6a82a4c7d3d12b13c423cc response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 106
INFO:root:RAW TEXT: No relevant information regarding diseases and cellular processes can be extracted from the provided text.
ERROR:root:Line 'No relevant information regarding diseases and cellular processes can be extracted from the provided text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: The dual lipid desaturase/hydroxylase DEGS2 controls phytoceramide levels necessary to counter intestinal inflammation.
Keywords: Dextran sodium sulfate (DSS); Inflammatory bowel disease (IBD); N-ethyl-N-nitrosourea (ENU)
PMID: 37589563
Abstract: Intestinal immunity is dependent on barrier function to maintain quiescence. The mechanisms for the maintenance of this barrier are not fully understood. Delta 4-desaturase, sphingolipid 2 (DEGS2) is a lipid desaturase and hydroxylase, which catalyzes the synthesis of ceramide and phytoceramide from dihydroceramide. Using a forward genetic approach, we found and validated a mutation in Degs2 as causative in increasing susceptibility to colitis and altering the phytoceramide balance in the colon. DEGS2 is expressed in the intestinal epithelium, and the colitis phenotype is dependent on the non-hematopoietic compartment of the mouse. In the absence of DEGS2, the colon lacks phytoceramides and accumulates large amounts of the precursor lipid dihydroceramide. In response to DSS induced colitis, colonic epithelial cells in DEGS2-deficient mice had increased cell death and decreased proliferation compared to those in wildtype mice. These findings demonstrate that DEGS2 is needed to maintain epithelial integrity, protect against DSS-induced colitis and maintain lipid balances in vivo.© 2023. Published by The Company of Biologists Ltd.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2007]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: The dual lipid desaturase/hydroxylase DEGS2 controls phytoceramide levels necessary to counter intestinal inflammation.\\nKeywords: Dextran sodium sulfate (DSS); Inflammatory bowel disease (IBD); N-ethyl-N-nitrosourea (ENU)\\nPMID: 37589563\\nAbstract: Intestinal immunity is dependent on barrier function to maintain quiescence. The mechanisms for the maintenance of this barrier are not fully understood. Delta 4-desaturase, sphingolipid 2 (DEGS2) is a lipid desaturase and hydroxylase, which catalyzes the synthesis of ceramide and phytoceramide from dihydroceramide. Using a forward genetic approach, we found and validated a mutation in Degs2 as causative in increasing susceptibility to colitis and altering the phytoceramide balance in the colon. DEGS2 is expressed in the intestinal epithelium, and the colitis phenotype is dependent on the non-hematopoietic compartment of the mouse. In the absence of DEGS2, the colon lacks phytoceramides and accumulates large amounts of the precursor lipid dihydroceramide. In response to DSS induced colitis, colonic epithelial cells in DEGS2-deficient mice had increased cell death and decreased proliferation compared to those in wildtype mice. These findings demonstrate that DEGS2 is needed to maintain epithelial integrity, protect against DSS-induced colitis and maintain lipid balances in vivo.\\u00a9 2023. Published by The Company of Biologists Ltd.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5220 request_id=04e3bc0cbd95e43b48658c6b7004ed4b response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 840
INFO:root:RAW TEXT: subject: DEGS2
predicate: controls
object: phytoceramide levels
---

subject: mechanisms
predicate: for the maintenance of
object: barrier function
---

subject: DEGS2
predicate: is expressed in
object: intestinal epithelium
---

subject: colitis phenotype
predicate: is dependent on
object: non-hematopoietic compartment
---

subject: colon
predicate: lacks
object: phytoceramides
---

subject: colon
predicate: accumulates
object: large amounts of the precursor lipid dihydroceramide
---

subject: colonic epithelial cells in DEGS2-deficient mice
predicate: had
object: increased cell death and decreased proliferation
---

subject: DEGS2
predicate: is needed to maintain
object: epithelial integrity
---

subject: DEGS2
predicate: protect against
object: DSS-induced colitis
---

subject: DEGS2
predicate: maintain
object: lipid balances
INFO:root:PARSING LINE: subject: DEGS2
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['DEGS2']
INFO:root:PARSING LINE: predicate: controls
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['controls']
INFO:root:PARSING LINE: object: phytoceramide levels
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['phytoceramide levels']
ERROR:root:Line '---' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Bone health in inflammatory bowel disease.
Keywords: Fracture; inflammatory bowel disease; osteopenia; osteoporosis; pediatric
PMID: 37589220
Abstract: Inflammatory bowel disease (IBD) is a chronic disease characterized by the presence of systemic inflammation, manifesting not only as gastrointestinal symptoms but also as extraintestinal bone complications, including osteopenia and osteoporosis. However, the association between IBD and osteoporosis is complex, and the presence of multifactorial participants in the development of osteoporosis is increasingly recognized. Unlike in adults, delayed puberty and growth hormone/insulin-like growth factor-1 axis abnormalities are essential risk factors for osteoporosis in pediatric patients with IBD.This article reviews the potential pathophysiological mechanisms contributing to osteoporosis in adult and pediatric patients with IBD and provides evidence for effective prevention and treatment, focusing on pediatric patients with IBD. A search was performed from PubMed and Web of Science inception to February 2023 to identify articles on IBD, osteoporosis, pediatric, and fracture risk.A comprehensive treatment pattern based on individualized principles can be used to manage pediatric IBD-related osteoporosis.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1884]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Bone health in inflammatory bowel disease.\\nKeywords: Fracture; inflammatory bowel disease; osteopenia; osteoporosis; pediatric\\nPMID: 37589220\\nAbstract: Inflammatory bowel disease (IBD) is a chronic disease characterized by the presence of systemic inflammation, manifesting not only as gastrointestinal symptoms but also as extraintestinal bone complications, including osteopenia and osteoporosis. However, the association between IBD and osteoporosis is complex, and the presence of multifactorial participants in the development of osteoporosis is increasingly recognized. Unlike in adults, delayed puberty and growth hormone/insulin-like growth factor-1 axis abnormalities are essential risk factors for osteoporosis in pediatric patients with IBD.This article reviews the potential pathophysiological mechanisms contributing to osteoporosis in adult and pediatric patients with IBD and provides evidence for effective prevention and treatment, focusing on pediatric patients with IBD. A search was performed from PubMed and Web of Science inception to February 2023 to identify articles on IBD, osteoporosis, pediatric, and fracture risk.A comprehensive treatment pattern based on individualized principles can be used to manage pediatric IBD-related osteoporosis.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=935 request_id=eff48ef729baac5f3238725cdb7742d6 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 155
INFO:root:RAW TEXT: subject: Inflammatory bowel disease
predicate: is associated with
object: extraintestinal bone complications
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Inflammatory bowel disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease']
INFO:root:PARSING LINE: predicate: is associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: object: extraintestinal bone complications
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['extraintestinal bone complications']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'Inflammatory bowel disease', 'predicate': 'is associated with', 'object': 'extraintestinal bone complications', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'Inflammatory bowel disease', 'predicate': 'is associated with', 'object': 'extraintestinal bone complications', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Inflammatory bowel disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding Inflammatory bowel disease to MONDO:0005265; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized Inflammatory bowel disease with MONDO:0005265 to MONDO:0005265
INFO:ontogpt.engines.knowledge_engine:GROUNDING is associated with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is associated with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING extraintestinal bone complications using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized extraintestinal bone complications to extraintestinal bone complication
INFO:ontogpt.engines.knowledge_engine:GROUNDING extraintestinal bone complication using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize extraintestinal bone complications to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005265', 'predicate': 'is associated with', 'object': 'extraintestinal bone complications', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'MONDO:0005265', 'predicate': 'is associated with', 'object': 'extraintestinal bone complications', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Dual pH and microbial-sensitive galactosylated polymeric nanocargoes for multi-level targeting to combat ulcerative colitis.
Keywords: Galactosylated nanocargoes; Macrophage galactose type-lectin C; Microbial sensitive; Pullulan; Ulcerative colitis; pH-sensitive drug delivery
PMID: 37588990
Abstract: Ulcerative colitis (UC) is a type of inflammatory bowel disease characterized by inflammation, ulcers and irritation of the mucosal lining. Oral drug delivery in UC encounters challenges because of multifaceted barriers. Dexamethasone-loaded galactosylated-PLGA/Eudragit S100/pullulan nanocargoes (Dexa-GP/ES/Pu NCs) have been developed with a dual stimuli-sensitive coating responsive to both colonic pH and microbiota, and an underneath galactosylated-PLGA core (GP). The galactose ligand of the GP preferentially binds to the macrophage galactose type-lectin-C (MGL-2) surface receptor. Therefore, both stimuli and ligand-mediated targeting facilitate nanocargoes to deliver Dexa specifically to the colon with enhanced macrophage uptake. Modified emulsion method coupled with a solvent evaporation coating technique was employed to prepare Dexa-GP/ES/Pu NCs. The nanocargoes were tested using in vitro, ex vivo techniques and dextran sodium sulfate (DSS) induced UC model. Prepared nanocargoes had desired physicochemical properties, drug release, cell uptake and cellular viability. Investigations using a DSS-colitis model showed high localization and mitigation of colitis with downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity. Thus, Dexa-GP/ES/Pu NCs found to be biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration.© 2023 Shenyang Pharmaceutical University.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2511]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Dual pH and microbial-sensitive galactosylated polymeric nanocargoes for multi-level targeting to combat ulcerative colitis.\\nKeywords: Galactosylated nanocargoes; Macrophage galactose type-lectin C; Microbial sensitive; Pullulan; Ulcerative colitis; pH-sensitive drug delivery\\nPMID: 37588990\\nAbstract: Ulcerative colitis (UC) is a type of inflammatory bowel disease characterized by inflammation, ulcers and irritation of the mucosal lining. Oral drug delivery in UC encounters challenges because of multifaceted barriers. Dexamethasone-loaded galactosylated-PLGA/Eudragit S100/pullulan nanocargoes (Dexa-GP/ES/Pu NCs) have been developed with a dual stimuli-sensitive coating responsive to both colonic pH and microbiota, and an underneath galactosylated-PLGA core (GP). The galactose ligand of the GP preferentially binds to the macrophage galactose type-lectin-C (MGL-2) surface receptor. Therefore, both stimuli and ligand-mediated targeting facilitate nanocargoes to deliver Dexa specifically to the colon with enhanced macrophage uptake. Modified emulsion method coupled with a solvent evaporation coating technique was employed to prepare Dexa-GP/ES/Pu NCs. The nanocargoes were tested using in vitro, ex vivo techniques and dextran sodium sulfate (DSS) induced UC model. Prepared nanocargoes had desired physicochemical properties, drug release, cell uptake and cellular viability. Investigations using a DSS-colitis model showed high localization and mitigation of colitis with downregulation of NF-\\u0138B and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions\' integrity. Thus, Dexa-GP/ES/Pu NCs found to be biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration.\\u00a9 2023 Shenyang Pharmaceutical University.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=7660 request_id=6ae2098dddd39e54ec93cd29b0b466f1 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1249
INFO:root:RAW TEXT: subject: Ulcerative colitis
predicate: characterized by
object: inflammation, ulcers and irritation of the mucosal lining

subject: Oral drug delivery in UC
predicate: encounters challenges because of
object: multifaceted barriers

subject: Dexamethasone-loaded galactosylated-PLGA/Eudragit S100/pullulan nanocargoes
predicate: have been developed with
object: a dual stimuli-sensitive coating responsive to both colonic pH and microbiota

subject: The galactose ligand of the GP
predicate: preferentially binds to
object: the macrophage galactose type-lectin-C (MGL-2) surface receptor

subject: nanocargoes
predicate: facilitate
object: nanocargoes to deliver Dexa specifically to the colon with enhanced macrophage uptake

subject: Dexa-GP/ES/Pu NCs
predicate: found to be
object_qualifier: biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration

subject: investigations using a DSS-colitis model
predicate: showed high localization and mitigation of colitis with
object: downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity
INFO:root:PARSING LINE: subject: Ulcerative colitis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Ulcerative colitis']
INFO:root:PARSING LINE: predicate: characterized by
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['characterized by']
INFO:root:PARSING LINE: object: inflammation, ulcers and irritation of the mucosal lining
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['inflammation, ulcers and irritation of the mucosal lining']
INFO:root:PARSING LINE: subject: Oral drug delivery in UC
DEBUG:root:SLOT: subject INL: False VALS: ['Oral drug delivery in UC']
INFO:root:PARSING LINE: predicate: encounters challenges because of
DEBUG:root:SLOT: predicate INL: False VALS: ['encounters challenges because of']
INFO:root:PARSING LINE: object: multifaceted barriers
DEBUG:root:SLOT: object INL: False VALS: ['multifaceted barriers']
INFO:root:PARSING LINE: subject: Dexamethasone-loaded galactosylated-PLGA/Eudragit S100/pullulan nanocargoes
DEBUG:root:SLOT: subject INL: False VALS: ['Dexamethasone-loaded galactosylated-PLGA/Eudragit S100/pullulan nanocargoes']
INFO:root:PARSING LINE: predicate: have been developed with
DEBUG:root:SLOT: predicate INL: False VALS: ['have been developed with']
INFO:root:PARSING LINE: object: a dual stimuli-sensitive coating responsive to both colonic pH and microbiota
DEBUG:root:SLOT: object INL: False VALS: ['a dual stimuli-sensitive coating responsive to both colonic pH and microbiota']
INFO:root:PARSING LINE: subject: The galactose ligand of the GP
DEBUG:root:SLOT: subject INL: False VALS: ['The galactose ligand of the GP']
INFO:root:PARSING LINE: predicate: preferentially binds to
DEBUG:root:SLOT: predicate INL: False VALS: ['preferentially binds to']
INFO:root:PARSING LINE: object: the macrophage galactose type-lectin-C (MGL-2) surface receptor
DEBUG:root:SLOT: object INL: False VALS: ['the macrophage galactose type-lectin-C (MGL-2) surface receptor']
INFO:root:PARSING LINE: subject: nanocargoes
DEBUG:root:SLOT: subject INL: False VALS: ['nanocargoes']
INFO:root:PARSING LINE: predicate: facilitate
DEBUG:root:SLOT: predicate INL: False VALS: ['facilitate']
INFO:root:PARSING LINE: object: nanocargoes to deliver Dexa specifically to the colon with enhanced macrophage uptake
DEBUG:root:SLOT: object INL: False VALS: ['nanocargoes to deliver Dexa specifically to the colon with enhanced macrophage uptake']
INFO:root:PARSING LINE: subject: Dexa-GP/ES/Pu NCs
DEBUG:root:SLOT: subject INL: False VALS: ['Dexa-GP/ES/Pu NCs']
INFO:root:PARSING LINE: predicate: found to be
DEBUG:root:SLOT: predicate INL: False VALS: ['found to be']
INFO:root:PARSING LINE: object_qualifier: biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration']
INFO:root:PARSING LINE: subject: investigations using a DSS-colitis model
DEBUG:root:SLOT: subject INL: False VALS: ['investigations using a DSS-colitis model']
INFO:root:PARSING LINE: predicate: showed high localization and mitigation of colitis with
DEBUG:root:SLOT: predicate INL: False VALS: ['showed high localization and mitigation of colitis with']
INFO:root:PARSING LINE: object: downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity
DEBUG:root:SLOT: object INL: False VALS: ["downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity"]
DEBUG:root:RAW: {'subject': 'investigations using a DSS-colitis model', 'predicate': 'showed high localization and mitigation of colitis with', 'object': "downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity", 'object_qualifier': 'biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration'}
DEBUG:root:Grounding annotation object {'subject': 'investigations using a DSS-colitis model', 'predicate': 'showed high localization and mitigation of colitis with', 'object': "downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity", 'object_qualifier': 'biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING investigations using a DSS-colitis model using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize investigations using a DSS-colitis model to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING showed high localization and mitigation of colitis with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize showed high localization and mitigation of colitis with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'investigations using a DSS-colitis model', 'predicate': 'showed high localization and mitigation of colitis with', 'object': "downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity", 'object_qualifier': 'biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration'}
INFO:root:{'subject': 'investigations using a DSS-colitis model', 'predicate': 'showed high localization and mitigation of colitis with', 'object': "downregulation of NF-ĸB and COX-2, and restoration of clinical, histopathological, biochemical indices, antioxidant balance, microbial alterations, FTIR spectra, and epithelial junctions' integrity", 'object_qualifier': 'biocompatible nanocargoes capable of delivering drugs to the inflamed colon with unique targeting properties for prolonged duration'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Impact of Dietary Patterns in Inflammatory Bowel Disease Subtypes Versus Healthy Subjects: a Retrospective Cohort Study.
Keywords: 
PMID: 37588829
Abstract: Objectives:Inflammatory bowel diseases (IBD) have been associated with multiple environmental factors, including diet. A dietary pattern characterized by low fiber content, high fat content and high carbohydrate content has been linked to the development of IBD. The objective of the current investigation is to examine the potential link between dietary patterns and the occurrence of IBD and to investigate whether there are any differences in relation to the type of IBD and specific food groups. Material and methods:We conducted an observational retrospective comparative study using three cohorts: 89 Crohn's disease (CD) patients, 40 ulcerative colitis (UC) patients and 64 healthy subjects. All participants underwent structured interviews and were required to complete a questionnaire regarding their dietary habits either prior to the onset of IBD or within the last year for control subjects. Results:A higher proportion of CD patients reported a higher rate of salt intake (71.9% vs. 53.1%, p-value = 0.043), sweetened beverages (38.2% vs. 17.2%, p-value=0.022), processed meat (66.3% vs. 40.6%, p-value=0.007), fatty meat (50.6% vs. 28.1%, p-value=0.021), fried foods (47.2% vs. 9.4%, p-value<0.001) and mayonnaise (21.3% vs. 6.2%, p-value=0.032) and a lower intake of nuts and seeds (20.2% vs. 43.8%, p-value=0.004) and yogurt (23.6% vs. 43.8%, p-value=0.030) compared to healthy subjects. Compared to controls, in the UC group there was a higher consumption of salt (85% vs. 53.1%, p-value=0.003), sweetened beverages (47.5% vs. 17.2%, p-value=0.005), fatty meat (55% vs. 28.1%, p-value=0.025) and fried foods (55% vs. 9.4%, p-value<0.001) and a lower intake of nuts and seeds (10% vs. 43.8%, p-value=0.001). Conclusion:Diet patterns before the onset of the disease are similar in patients with Crohn's disease and patients with ulcerative colitis: increased consumption of sweetened beverages, processed and fatty meat, fried food, salt, store-bought ice cream, and mayonnaise, and decreased intake of seeds, nuts, and yogurt.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2814]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Impact of Dietary Patterns in Inflammatory Bowel Disease Subtypes Versus Healthy Subjects: a Retrospective Cohort Study.\\nKeywords: \\nPMID: 37588829\\nAbstract: Objectives:Inflammatory bowel diseases (IBD) have been associated with multiple environmental factors, including diet. A dietary pattern characterized by low fiber content, high fat content and high carbohydrate content has been linked to the development of IBD. The objective of the current investigation is to examine the potential link between dietary patterns and the occurrence of IBD and to investigate whether there are any differences in relation to the type of IBD and specific food groups. Material and methods:We conducted an observational retrospective comparative study using three cohorts: 89 Crohn\'s disease (CD) patients, 40 ulcerative colitis (UC) patients and 64 healthy subjects. All participants underwent structured interviews and were required to complete a questionnaire regarding their dietary habits either prior to the onset of IBD or within the last year for control subjects. Results:A higher proportion of CD patients reported a higher rate of salt intake (71.9% vs. 53.1%, p-value = 0.043), sweetened beverages (38.2% vs. 17.2%, p-value=0.022), processed meat (66.3% vs. 40.6%, p-value=0.007), fatty meat (50.6% vs. 28.1%, p-value=0.021), fried foods (47.2% vs. 9.4%, p-value<0.001) and mayonnaise (21.3% vs. 6.2%, p-value=0.032) and a lower intake of nuts and seeds (20.2% vs. 43.8%, p-value=0.004) and yogurt (23.6% vs. 43.8%, p-value=0.030) compared to healthy subjects. Compared to controls, in the UC group there was a higher consumption of salt (85% vs. 53.1%, p-value=0.003), sweetened beverages (47.5% vs. 17.2%, p-value=0.005), fatty meat (55% vs. 28.1%, p-value=0.025) and fried foods (55% vs. 9.4%, p-value<0.001) and a lower intake of nuts and seeds (10% vs. 43.8%, p-value=0.001). Conclusion:Diet patterns before the onset of the disease are similar in patients with Crohn\'s disease and patients with ulcerative colitis: increased consumption of sweetened beverages, processed and fatty meat, fried food, salt, store-bought ice cream, and mayonnaise, and decreased intake of seeds, nuts, and yogurt.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=21190 request_id=f6ce769f8193040305f0c19c2998089a response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 3482
INFO:root:RAW TEXT: subject: Inflammatory bowel diseases
predicate: have been associated with
object: multiple environmental factors, including diet
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: dietary pattern
predicate: characterized by
object: low fiber content, high fat content and high carbohydrate content
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: dietary patterns
predicate: linked to
object: the development of IBD
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: potential link
predicate: between
object: dietary patterns and the occurrence of IBD
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: type of IBD
predicate: differences in relation to
object: specific food groups
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a higher rate of salt intake
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a higher rate of sweetened beverages intake
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a higher rate of processed meat intake
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a higher rate of fatty meat intake
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a higher rate of fried foods intake
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a higher rate of mayonnaise intake
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a lower intake of nuts and seeds
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Crohn's disease patients
predicate: reported
object: a lower intake of yogurt
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: UC group
predicate: showed
object: a higher consumption of salt
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: UC group
predicate: showed
object: a higher consumption of sweetened beverages
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: UC group
predicate: showed
object: a higher consumption of fatty meat
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: UC group
predicate: showed
object: a higher consumption of fried foods
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: UC group
predicate: showed
object: a lower intake of nuts and seeds
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: diet patterns
predicate: before the onset of the disease
object: are similar in patients with Crohn's disease and patients with ulcerative colitis
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: patients with Crohn's disease
predicate: have increased consumption of
object: sweetened beverages, processed and fatty meat, fried food, salt, store-bought ice cream, and mayonnaise
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: patients with Crohn's disease
predicate: have decreased intake of
object: seeds, nuts, and yogurt
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Inflammatory bowel diseases
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel diseases']
INFO:root:PARSING LINE: predicate: have been associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['have been associated with']
INFO:root:PARSING LINE: object: multiple environmental factors, including diet
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['multiple environmental factors, including diet']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: dietary pattern
DEBUG:root:SLOT: subject INL: False VALS: ['dietary pattern']
INFO:root:PARSING LINE: predicate: characterized by
DEBUG:root:SLOT: predicate INL: False VALS: ['characterized by']
INFO:root:PARSING LINE: object: low fiber content, high fat content and high carbohydrate content
DEBUG:root:SLOT: object INL: False VALS: ['low fiber content, high fat content and high carbohydrate content']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: dietary patterns
DEBUG:root:SLOT: subject INL: False VALS: ['dietary patterns']
INFO:root:PARSING LINE: predicate: linked to
DEBUG:root:SLOT: predicate INL: False VALS: ['linked to']
INFO:root:PARSING LINE: object: the development of IBD
DEBUG:root:SLOT: object INL: False VALS: ['the development of IBD']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: potential link
DEBUG:root:SLOT: subject INL: False VALS: ['potential link']
INFO:root:PARSING LINE: predicate: between
DEBUG:root:SLOT: predicate INL: False VALS: ['between']
INFO:root:PARSING LINE: object: dietary patterns and the occurrence of IBD
DEBUG:root:SLOT: object INL: False VALS: ['dietary patterns and the occurrence of IBD']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: type of IBD
DEBUG:root:SLOT: subject INL: False VALS: ['type of IBD']
INFO:root:PARSING LINE: predicate: differences in relation to
DEBUG:root:SLOT: predicate INL: False VALS: ['differences in relation to']
INFO:root:PARSING LINE: object: specific food groups
DEBUG:root:SLOT: object INL: False VALS: ['specific food groups']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a higher rate of salt intake
DEBUG:root:SLOT: object INL: False VALS: ['a higher rate of salt intake']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a higher rate of sweetened beverages intake
DEBUG:root:SLOT: object INL: False VALS: ['a higher rate of sweetened beverages intake']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a higher rate of processed meat intake
DEBUG:root:SLOT: object INL: False VALS: ['a higher rate of processed meat intake']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a higher rate of fatty meat intake
DEBUG:root:SLOT: object INL: False VALS: ['a higher rate of fatty meat intake']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a higher rate of fried foods intake
DEBUG:root:SLOT: object INL: False VALS: ['a higher rate of fried foods intake']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a higher rate of mayonnaise intake
DEBUG:root:SLOT: object INL: False VALS: ['a higher rate of mayonnaise intake']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a lower intake of nuts and seeds
DEBUG:root:SLOT: object INL: False VALS: ['a lower intake of nuts and seeds']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Crohn's disease patients
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease patients"]
INFO:root:PARSING LINE: predicate: reported
DEBUG:root:SLOT: predicate INL: False VALS: ['reported']
INFO:root:PARSING LINE: object: a lower intake of yogurt
DEBUG:root:SLOT: object INL: False VALS: ['a lower intake of yogurt']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: UC group
DEBUG:root:SLOT: subject INL: False VALS: ['UC group']
INFO:root:PARSING LINE: predicate: showed
DEBUG:root:SLOT: predicate INL: False VALS: ['showed']
INFO:root:PARSING LINE: object: a higher consumption of salt
DEBUG:root:SLOT: object INL: False VALS: ['a higher consumption of salt']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: UC group
DEBUG:root:SLOT: subject INL: False VALS: ['UC group']
INFO:root:PARSING LINE: predicate: showed
DEBUG:root:SLOT: predicate INL: False VALS: ['showed']
INFO:root:PARSING LINE: object: a higher consumption of sweetened beverages
DEBUG:root:SLOT: object INL: False VALS: ['a higher consumption of sweetened beverages']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: UC group
DEBUG:root:SLOT: subject INL: False VALS: ['UC group']
INFO:root:PARSING LINE: predicate: showed
DEBUG:root:SLOT: predicate INL: False VALS: ['showed']
INFO:root:PARSING LINE: object: a higher consumption of fatty meat
DEBUG:root:SLOT: object INL: False VALS: ['a higher consumption of fatty meat']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: UC group
DEBUG:root:SLOT: subject INL: False VALS: ['UC group']
INFO:root:PARSING LINE: predicate: showed
DEBUG:root:SLOT: predicate INL: False VALS: ['showed']
INFO:root:PARSING LINE: object: a higher consumption of fried foods
DEBUG:root:SLOT: object INL: False VALS: ['a higher consumption of fried foods']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: UC group
DEBUG:root:SLOT: subject INL: False VALS: ['UC group']
INFO:root:PARSING LINE: predicate: showed
DEBUG:root:SLOT: predicate INL: False VALS: ['showed']
INFO:root:PARSING LINE: object: a lower intake of nuts and seeds
DEBUG:root:SLOT: object INL: False VALS: ['a lower intake of nuts and seeds']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: diet patterns
DEBUG:root:SLOT: subject INL: False VALS: ['diet patterns']
INFO:root:PARSING LINE: predicate: before the onset of the disease
DEBUG:root:SLOT: predicate INL: False VALS: ['before the onset of the disease']
INFO:root:PARSING LINE: object: are similar in patients with Crohn's disease and patients with ulcerative colitis
DEBUG:root:SLOT: object INL: False VALS: ["are similar in patients with Crohn's disease and patients with ulcerative colitis"]
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients with Crohn's disease
DEBUG:root:SLOT: subject INL: False VALS: ["patients with Crohn's disease"]
INFO:root:PARSING LINE: predicate: have increased consumption of
DEBUG:root:SLOT: predicate INL: False VALS: ['have increased consumption of']
INFO:root:PARSING LINE: object: sweetened beverages, processed and fatty meat, fried food, salt, store-bought ice cream, and mayonnaise
DEBUG:root:SLOT: object INL: False VALS: ['sweetened beverages, processed and fatty meat, fried food, salt, store-bought ice cream, and mayonnaise']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients with Crohn's disease
DEBUG:root:SLOT: subject INL: False VALS: ["patients with Crohn's disease"]
INFO:root:PARSING LINE: predicate: have decreased intake of
DEBUG:root:SLOT: predicate INL: False VALS: ['have decreased intake of']
INFO:root:PARSING LINE: object: seeds, nuts, and yogurt
DEBUG:root:SLOT: object INL: False VALS: ['seeds, nuts, and yogurt']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': "patients with Crohn's disease", 'predicate': 'have decreased intake of', 'object': 'seeds, nuts, and yogurt', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': "patients with Crohn's disease", 'predicate': 'have decreased intake of', 'object': 'seeds, nuts, and yogurt', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING patients with Crohn's disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize patients with Crohn's disease to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING have decreased intake of using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize have decreased intake of to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING seeds, nuts, and yogurt using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize seeds, nuts, and yogurt to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': "patients with Crohn's disease", 'predicate': 'have decreased intake of', 'object': 'seeds, nuts, and yogurt', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': "patients with Crohn's disease", 'predicate': 'have decreased intake of', 'object': 'seeds, nuts, and yogurt', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Causality between inflammatory bowel disease and the cerebral cortex: insights from Mendelian randomization and integrated bioinformatics analysis.
Keywords: Mendelian randomization; causality; cerebral cortex; inflammatory bowel disease; integrated bioinformatics
PMID: 37588593
Abstract: Inflammatory bowel disease (IBD), which includes ulcerative colitis (UC) and Crohn's disease (CD), is a chronic, progressive, and recurrent intestinal condition that poses a significant global health burden. The high prevalence of neuropsychiatric comorbidities in IBD necessitates the development of targeted management strategies.Leveraging genetic data from genome-wide association studies and Immunochip genotype analyses of nearly 150,000 individuals, we conducted a two-sample Mendelian randomization study to elucidate the driving force of IBD, UC, and CD on cortical reshaping. Genetic variants mediating the causality were collected to disclose the biological pathways linking intestinal inflammation to brain dysfunction.Here, 115, 69, and 98 instrumental variables genetically predicted IBD, UC, and CD. We found that CD significantly decreased the surface area of the temporal pole gyrus (β = -0.946 mm2, P = 0.005, false discovery rate-P = 0.085). Additionally, we identified suggestive variations in cortical surface area and thickness induced by exposure across eight functional gyri. The top 10 variant-matched genes were STAT3, FOS, NFKB1, JAK2, STAT4, TYK2, SMAD3, IL12B, MYC, and CCL2, which are interconnected in the interaction network and play a role in inflammatory and immune processes.We explore the causality between intestinal inflammation and altered cortical morphology. It is likely that neuroinflammation-induced damage, impaired neurological function, and persistent nociceptive input lead to morphological changes in the cerebral cortex, which may trigger neuropsychiatric disorders.Copyright © 2023 He, Peng, Chen and Ou.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2560]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Causality between inflammatory bowel disease and the cerebral cortex: insights from Mendelian randomization and integrated bioinformatics analysis.\\nKeywords: Mendelian randomization; causality; cerebral cortex; inflammatory bowel disease; integrated bioinformatics\\nPMID: 37588593\\nAbstract: Inflammatory bowel disease (IBD), which includes ulcerative colitis (UC) and Crohn\'s disease (CD), is a chronic, progressive, and recurrent intestinal condition that poses a significant global health burden. The high prevalence of neuropsychiatric comorbidities in IBD necessitates the development of targeted management strategies.Leveraging genetic data from genome-wide association studies and Immunochip genotype analyses of nearly 150,000 individuals, we conducted a two-sample Mendelian randomization study to elucidate the driving force of IBD, UC, and CD on cortical reshaping. Genetic variants mediating the causality were collected to disclose the biological pathways linking intestinal inflammation to brain dysfunction.Here, 115, 69, and 98 instrumental variables genetically predicted IBD, UC, and CD. We found that CD significantly decreased the surface area of the temporal pole gyrus (\\u03b2 = -0.946 mm2, P = 0.005, false discovery rate-P = 0.085). Additionally, we identified suggestive variations in cortical surface area and thickness induced by exposure across eight functional gyri. The top 10 variant-matched genes were STAT3, FOS, NFKB1, JAK2, STAT4, TYK2, SMAD3, IL12B, MYC, and CCL2, which are interconnected in the interaction network and play a role in inflammatory and immune processes.We explore the causality between intestinal inflammation and altered cortical morphology. It is likely that neuroinflammation-induced damage, impaired neurological function, and persistent nociceptive input lead to morphological changes in the cerebral cortex, which may trigger neuropsychiatric disorders.Copyright \\u00a9 2023 He, Peng, Chen and Ou.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1154 request_id=59dc3820fe2bffb5305e46409960c6a4 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 165
INFO:root:RAW TEXT: subject: Inflammatory bowel disease
predicate: significantly decreased
object: surface area of the temporal pole gyrus
subject_qualifier: none
object_qualifier: none
INFO:root:PARSING LINE: subject: Inflammatory bowel disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease']
INFO:root:PARSING LINE: predicate: significantly decreased
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['significantly decreased']
INFO:root:PARSING LINE: object: surface area of the temporal pole gyrus
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['surface area of the temporal pole gyrus']
INFO:root:PARSING LINE: subject_qualifier: none
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['none']
INFO:root:PARSING LINE: object_qualifier: none
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['none']
DEBUG:root:RAW: {'subject': 'Inflammatory bowel disease', 'predicate': 'significantly decreased', 'object': 'surface area of the temporal pole gyrus', 'subject_qualifier': 'none', 'object_qualifier': 'none'}
DEBUG:root:Grounding annotation object {'subject': 'Inflammatory bowel disease', 'predicate': 'significantly decreased', 'object': 'surface area of the temporal pole gyrus', 'subject_qualifier': 'none', 'object_qualifier': 'none'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Inflammatory bowel disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding Inflammatory bowel disease to MONDO:0005265; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized Inflammatory bowel disease with MONDO:0005265 to MONDO:0005265
INFO:ontogpt.engines.knowledge_engine:GROUNDING significantly decreased using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize significantly decreased to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING surface area of the temporal pole gyrus using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized surface area of the temporal pole gyrus to surface area of the temporal pole gyru
INFO:ontogpt.engines.knowledge_engine:GROUNDING surface area of the temporal pole gyru using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize surface area of the temporal pole gyrus to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING none using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize none to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING none using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize none to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005265', 'predicate': 'significantly decreased', 'object': 'surface area of the temporal pole gyrus', 'subject_qualifier': 'none', 'object_qualifier': 'none'}
INFO:root:{'subject': 'MONDO:0005265', 'predicate': 'significantly decreased', 'object': 'surface area of the temporal pole gyrus', 'subject_qualifier': 'none', 'object_qualifier': 'none'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Surgical Treatment in Ulcerative Colitis, Still Topical: A Narrative Review.
Keywords: colorectal cancer (crc); inflammatory bowel disease; laparascopic surgery; postoperative complications; preventive colectomy; surgical treatment; timing; total proctocolectomy; ulcerative colitis (uc); • open surgery
PMID: 37588306
Abstract: In this paper, different studies were integrated to conclude the impact of ulcerative colitis (UC) on the patient's vital prognosis, specifically highlighting the association with colorectal cancer (CRC). These severe complications have led us to consider studying the role of preventive surgery in managing UC. This study reviewed total preventive colectomy in UC patients for preventing the onset of CRC, the role of surgery in UC management, and its potential as a definitive treatment for the condition. The study also emphasized the effectiveness of annual colonoscopic monitoring and preventive colectomy in reducing the incidence of colorectal cancer (CRC). It discussed the role of laparoscopic surgery in minimizing postoperative complications and highlighted that partial surgical resection of the colon can be a viable option, offering improved bowel function without increasing the risk of CRC-related mortality. Elective surgery has an important place in UC management by preventing the development of forms requiring emergency surgery. Although surgery can cure UC, it can lead to significant postoperative complications and adverse effects.Copyright © 2023, Slonovschi et al.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2134]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Surgical Treatment in Ulcerative Colitis, Still Topical: A Narrative Review.\\nKeywords: colorectal cancer (crc); inflammatory bowel disease; laparascopic surgery; postoperative complications; preventive colectomy; surgical treatment; timing; total proctocolectomy; ulcerative colitis (uc); \\u2022 open surgery\\nPMID: 37588306\\nAbstract: In this paper, different studies were integrated to conclude the impact of ulcerative colitis (UC) on the patient\'s vital prognosis, specifically highlighting the association with colorectal cancer (CRC). These severe complications have led us to consider studying the role of preventive surgery in managing UC. This study reviewed total preventive colectomy in UC patients for preventing the onset of CRC, the role of surgery in UC management, and its potential as a definitive treatment for the condition. The study also emphasized the effectiveness of annual colonoscopic monitoring and preventive colectomy in reducing the incidence of colorectal cancer (CRC). It discussed the role of laparoscopic surgery in minimizing postoperative complications and highlighted that partial surgical resection of the colon can be a viable option, offering improved bowel function without increasing the risk of CRC-related mortality. Elective surgery has an important place in UC management by preventing the development of forms requiring emergency surgery. Although surgery can cure UC, it can lead to significant postoperative complications and adverse effects.Copyright \\u00a9 2023, Slonovschi et al.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1280 request_id=003b1ee518c2e5f42807a9e91f099e3c response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 162
INFO:root:RAW TEXT: subject: ulcerative colitis
predicate: association with colorectal cancer
object: colorectal cancer
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: ulcerative colitis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['ulcerative colitis']
INFO:root:PARSING LINE: predicate: association with colorectal cancer
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['association with colorectal cancer']
INFO:root:PARSING LINE: object: colorectal cancer
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'ulcerative colitis', 'predicate': 'association with colorectal cancer', 'object': 'colorectal cancer', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'ulcerative colitis', 'predicate': 'association with colorectal cancer', 'object': 'colorectal cancer', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative colitis using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized ulcerative colitis to ulcerative coliti
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative coliti using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding ulcerative colitis to MONDO:0005101; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized ulcerative colitis with MONDO:0005101 to MONDO:0005101
INFO:ontogpt.engines.knowledge_engine:GROUNDING association with colorectal cancer using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize association with colorectal cancer to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING colorectal cancer using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize colorectal cancer to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005101', 'predicate': 'association with colorectal cancer', 'object': 'colorectal cancer', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'MONDO:0005101', 'predicate': 'association with colorectal cancer', 'object': 'colorectal cancer', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Monogenic deficiency in murine intestinal Cdc42 leads to mucosal inflammation that induces crypt dysplasia.
Keywords: Cell division cycle 42 (CDC42); Colitis; Colorectal cancer (CRC); Inflammatory bowel diseases (IBD); Intestinal epithelial cell (IEC); Intestinal epithelial stem cell (IESC); Irradiation
PMID: 37588188
Abstract: CDC42 controls intestinal epithelial (IEC) stem cell (IESC) division. How aberrant CDC42 initiates intestinal inflammation or neoplasia is unclear. We utilized models of inflammatory bowel diseases (IBD), colorectal cancer, aging, and IESC injury to determine the loss of intestinal Cdc42 upon inflammation and neoplasia. Intestinal specimens were collected to determine the levels of CDC42 in IBD or colorectal cancer. Cdc42 floxed mice were crossed with Villin-Cre, Villin-CreERT2 and/or Lgr5-eGFP-IRES-CreERT2, or Bmi1-CreERT2 mice to generate Cdc42 deficient mice. Irradiation, colitis, aging, and intestinal organoid were used to evaluate CDC42 upon mucosal inflammation, IESC/progenitor regenerative capacity, and IEC repair. Our studies revealed that increased CDC42 in colorectal cancer correlated with lower survival; in contrast, lower levels of CDC42 were found in the inflamed IBD colon. Colonic Cdc42 depletion significantly reduced Lgr5+ IESCs, increased progenitors' hyperplasia, and induced mucosal inflammation, which led to crypt dysplasia. Colonic Cdc42 depletion markedly enhanced irradiation- or chemical-induced colitis. Depletion or inhibition of Cdc42 reduced colonic Lgr5+ IESC regeneration. In conclusion, depletion of Cdc42 reduces the IESC regeneration and IEC repair, leading to prolonged mucosal inflammation. Constitutive monogenic loss of Cdc42 induces mucosal inflammation, which could result in intestinal neoplasia in the context of aging.© 2023 The Authors. Publishing services by Elsevier B.V. on behalf of KeAi Communications Co., Ltd.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2518]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Monogenic deficiency in murine intestinal Cdc42 leads to mucosal inflammation that induces crypt dysplasia.\\nKeywords: Cell division cycle 42 (CDC42); Colitis; Colorectal cancer (CRC); Inflammatory bowel diseases (IBD); Intestinal epithelial cell (IEC); Intestinal epithelial stem cell (IESC); Irradiation\\nPMID: 37588188\\nAbstract: CDC42 controls intestinal epithelial (IEC) stem cell (IESC) division. How aberrant CDC42 initiates intestinal inflammation or neoplasia is unclear. We utilized models of inflammatory bowel diseases (IBD), colorectal cancer, aging, and IESC injury to determine the loss of intestinal Cdc42 upon inflammation and neoplasia. Intestinal specimens were collected to determine the levels of CDC42 in IBD or colorectal cancer. Cdc42 floxed mice were crossed with Villin-Cre, Villin-CreERT2 and/or Lgr5-eGFP-IRES-CreERT2, or Bmi1-CreERT2 mice to generate Cdc42 deficient mice. Irradiation, colitis, aging, and intestinal organoid were used to evaluate CDC42 upon mucosal inflammation, IESC/progenitor regenerative capacity, and IEC repair. Our studies revealed that increased CDC42 in colorectal cancer correlated with lower survival; in contrast, lower levels of CDC42 were found in the inflamed IBD colon. Colonic Cdc42 depletion significantly reduced Lgr5+ IESCs, increased progenitors\' hyperplasia, and induced mucosal inflammation, which led to crypt dysplasia. Colonic Cdc42 depletion markedly enhanced irradiation- or chemical-induced colitis. Depletion or inhibition of Cdc42 reduced colonic Lgr5+ IESC regeneration. In conclusion, depletion of Cdc42 reduces the IESC regeneration and IEC repair, leading to prolonged mucosal inflammation. Constitutive monogenic loss of Cdc42 induces mucosal inflammation, which could result in intestinal neoplasia in the context of aging.\\u00a9 2023 The Authors. Publishing services by Elsevier B.V. on behalf of KeAi Communications Co., Ltd.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12632 request_id=bba8b3d25c35c994b37f74bcb4833cdf response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1894
INFO:root:RAW TEXT: subject: CDC42
predicate: controls
object: intestinal epithelial (IEC) stem cell (IESC) division
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: CDC42
predicate: initiates
object: intestinal inflammation or neoplasia
qualifier: None
subject_qualifier: aberrant
object_qualifier: None

subject: CDC42
predicate: correlated with
object: lower survival
qualifier: None
subject_qualifier: increased
object_qualifier: None

subject: CDC42
predicate: found in
object: inflamed IBD colon
qualifier: None
subject_qualifier: lower levels of
object_qualifier: None

subject: Colonic Cdc42
predicate: significantly reduced
object: Lgr5+ IESCs
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Colonic Cdc42
predicate: increased
object: progenitors' hyperplasia
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Colonic Cdc42
predicate: induced
object: mucosal inflammation
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Colonic Cdc42
predicate: led to
object: crypt dysplasia
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Colonic Cdc42
predicate: enhanced
object: irradiation- or chemical-induced colitis
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Cdc42
predicate: reduced
object: colonic Lgr5+ IESC regeneration
qualifier: None
subject_qualifier: Depletion or inhibition of
object_qualifier: None

subject: depletion of Cdc42
predicate: reduces
object: IESC regeneration and IEC repair
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Constitutive monogenic loss of Cdc42
predicate: induces
object: mucosal inflammation
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: mucosal inflammation
predicate: result in
object: intestinal neoplasia
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: CDC42
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['CDC42']
INFO:root:PARSING LINE: predicate: controls
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['controls']
INFO:root:PARSING LINE: object: intestinal epithelial (IEC) stem cell (IESC) division
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['intestinal epithelial (IEC) stem cell (IESC) division']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: CDC42
DEBUG:root:SLOT: subject INL: False VALS: ['CDC42']
INFO:root:PARSING LINE: predicate: initiates
DEBUG:root:SLOT: predicate INL: False VALS: ['initiates']
INFO:root:PARSING LINE: object: intestinal inflammation or neoplasia
DEBUG:root:SLOT: object INL: False VALS: ['intestinal inflammation or neoplasia']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: aberrant
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['aberrant']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: CDC42
DEBUG:root:SLOT: subject INL: False VALS: ['CDC42']
INFO:root:PARSING LINE: predicate: correlated with
DEBUG:root:SLOT: predicate INL: False VALS: ['correlated with']
INFO:root:PARSING LINE: object: lower survival
DEBUG:root:SLOT: object INL: False VALS: ['lower survival']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: increased
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['increased']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: CDC42
DEBUG:root:SLOT: subject INL: False VALS: ['CDC42']
INFO:root:PARSING LINE: predicate: found in
DEBUG:root:SLOT: predicate INL: False VALS: ['found in']
INFO:root:PARSING LINE: object: inflamed IBD colon
DEBUG:root:SLOT: object INL: False VALS: ['inflamed IBD colon']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: lower levels of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['lower levels of']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Colonic Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Colonic Cdc42']
INFO:root:PARSING LINE: predicate: significantly reduced
DEBUG:root:SLOT: predicate INL: False VALS: ['significantly reduced']
INFO:root:PARSING LINE: object: Lgr5+ IESCs
DEBUG:root:SLOT: object INL: False VALS: ['Lgr5+ IESCs']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Colonic Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Colonic Cdc42']
INFO:root:PARSING LINE: predicate: increased
DEBUG:root:SLOT: predicate INL: False VALS: ['increased']
INFO:root:PARSING LINE: object: progenitors' hyperplasia
DEBUG:root:SLOT: object INL: False VALS: ["progenitors' hyperplasia"]
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Colonic Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Colonic Cdc42']
INFO:root:PARSING LINE: predicate: induced
DEBUG:root:SLOT: predicate INL: False VALS: ['induced']
INFO:root:PARSING LINE: object: mucosal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['mucosal inflammation']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Colonic Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Colonic Cdc42']
INFO:root:PARSING LINE: predicate: led to
DEBUG:root:SLOT: predicate INL: False VALS: ['led to']
INFO:root:PARSING LINE: object: crypt dysplasia
DEBUG:root:SLOT: object INL: False VALS: ['crypt dysplasia']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Colonic Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Colonic Cdc42']
INFO:root:PARSING LINE: predicate: enhanced
DEBUG:root:SLOT: predicate INL: False VALS: ['enhanced']
INFO:root:PARSING LINE: object: irradiation- or chemical-induced colitis
DEBUG:root:SLOT: object INL: False VALS: ['irradiation- or chemical-induced colitis']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Cdc42']
INFO:root:PARSING LINE: predicate: reduced
DEBUG:root:SLOT: predicate INL: False VALS: ['reduced']
INFO:root:PARSING LINE: object: colonic Lgr5+ IESC regeneration
DEBUG:root:SLOT: object INL: False VALS: ['colonic Lgr5+ IESC regeneration']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: Depletion or inhibition of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['Depletion or inhibition of']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: depletion of Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['depletion of Cdc42']
INFO:root:PARSING LINE: predicate: reduces
DEBUG:root:SLOT: predicate INL: False VALS: ['reduces']
INFO:root:PARSING LINE: object: IESC regeneration and IEC repair
DEBUG:root:SLOT: object INL: False VALS: ['IESC regeneration and IEC repair']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Constitutive monogenic loss of Cdc42
DEBUG:root:SLOT: subject INL: False VALS: ['Constitutive monogenic loss of Cdc42']
INFO:root:PARSING LINE: predicate: induces
DEBUG:root:SLOT: predicate INL: False VALS: ['induces']
INFO:root:PARSING LINE: object: mucosal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['mucosal inflammation']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: mucosal inflammation
DEBUG:root:SLOT: subject INL: False VALS: ['mucosal inflammation']
INFO:root:PARSING LINE: predicate: result in
DEBUG:root:SLOT: predicate INL: False VALS: ['result in']
INFO:root:PARSING LINE: object: intestinal neoplasia
DEBUG:root:SLOT: object INL: False VALS: ['intestinal neoplasia']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'mucosal inflammation', 'predicate': 'result in', 'object': 'intestinal neoplasia', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'mucosal inflammation', 'predicate': 'result in', 'object': 'intestinal neoplasia', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING mucosal inflammation using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize mucosal inflammation to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING result in using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize result in to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING intestinal neoplasia using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized intestinal neoplasia to intestinal neoplasium
INFO:ontogpt.engines.knowledge_engine:GROUNDING intestinal neoplasium using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize intestinal neoplasia to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'mucosal inflammation', 'predicate': 'result in', 'object': 'intestinal neoplasia', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'mucosal inflammation', 'predicate': 'result in', 'object': 'intestinal neoplasia', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Impaired Abcb1a function and red meat in a translational colitis mouse model induces inflammation and alters microbiota composition.
Keywords: Abcb1; NETs; colon mucosa; diet; microbiota; neutrophil degranulation; p-glycoprotein; proteomics
PMID: 37588005
Abstract: Inflammatory Bowel Disease (IBD) affects approximately 0.3% of the global population, with incidence rates rising dramatically worldwide. Emerging evidence points to an interplay between exposome factors such as diet and gut microbiota, host genetics, and the immune system as crucial elements in IBD development. ATP-binding cassette (ABC) transporters, including human p-glycoprotein encoded by the Abcb1 gene, influence intestinal inflammation, and their expression may interact with environmental factors such as diet and gut microbes. Our study aimed to examine the impact of protein sources on a genetic colitis mouse model.Abcb1a-deficient colitis mice were fed either casein or red meat-supplemented diets to investigate potential colitis-aggravating components in red meat and their effects on host-microbiota interactions. We conducted deep label free quantitative proteomic inflammation profiling of gastrointestinal tissue (colon, ileum) and urine, and determined the overall microbiome in feces using 16S rRNA gene sequencing. Microbiota shifts by diet and protein transporter impairment were addressed by multivariate statistical analysis. Colon and systemic gut inflammation were validated through histology and immune assays, respectively.A quantitative discovery based proteomic analysis of intestinal tissue and urine revealed associations between ileum and urine proteomes in relation to Abcb1a deficiency. The absence of Abcb1a efflux pump function and diet-induced intestinal inflammation impacted multiple systemic immune processes, including extensive neutrophil extracellular trap (NET) components observed in relation to neutrophil degranulation throughout the gastrointestinal tract. The colitis model's microbiome differed significantly from that of wild-type mice, indicating the substantial influence of efflux transporter deficiency on microbiota.The proteomic and microbiota analyzes of a well-established murine model enabled the correlation of gastrointestinal interactions not readily identifiable in human cohorts. Insights into dysregulated biological pathways in this disease model might offer translational biomarkers based on NETs and improved understanding of IBD pathogenesis in human patients. Our findings demonstrate that drug transporter deficiency induces substantial changes in the microbiota, leading to increased levels of IBD-associated strains and resulting in intestinal inflammation. GRAPHICAL ABSTRACT.Copyright © 2023 Stensballe, Bennike, Ravn-Haren, Mortensen, Aboo, Knudsen, Rühlemann, Birkelund, Bang, Franke, Vogel, Hansen and Andersen.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3476]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Impaired Abcb1a function and red meat in a translational colitis mouse model induces inflammation and alters microbiota composition.\\nKeywords: Abcb1; NETs; colon mucosa; diet; microbiota; neutrophil degranulation; p-glycoprotein; proteomics\\nPMID: 37588005\\nAbstract: Inflammatory Bowel Disease (IBD) affects approximately 0.3% of the global population, with incidence rates rising dramatically worldwide. Emerging evidence points to an interplay between exposome factors such as diet and gut microbiota, host genetics, and the immune system as crucial elements in IBD development. ATP-binding cassette (ABC) transporters, including human p-glycoprotein encoded by the Abcb1 gene, influence intestinal inflammation, and their expression may interact with environmental factors such as diet and gut microbes. Our study aimed to examine the impact of protein sources on a genetic colitis mouse model.Abcb1a-deficient colitis mice were fed either casein or red meat-supplemented diets to investigate potential colitis-aggravating components in red meat and their effects on host-microbiota interactions. We conducted deep label free quantitative proteomic inflammation profiling of gastrointestinal tissue (colon, ileum) and urine, and determined the overall microbiome in feces using 16S rRNA gene sequencing. Microbiota shifts by diet and protein transporter impairment were addressed by multivariate statistical analysis. Colon and systemic gut inflammation were validated through histology and immune assays, respectively.A quantitative discovery based proteomic analysis of intestinal tissue and urine revealed associations between ileum and urine proteomes in relation to Abcb1a deficiency. The absence of Abcb1a efflux pump function and diet-induced intestinal inflammation impacted multiple systemic immune processes, including extensive neutrophil extracellular trap (NET) components observed in relation to neutrophil degranulation throughout the gastrointestinal tract. The colitis model\'s microbiome differed significantly from that of wild-type mice, indicating the substantial influence of efflux transporter deficiency on microbiota.The proteomic and microbiota analyzes of a well-established murine model enabled the correlation of gastrointestinal interactions not readily identifiable in human cohorts. Insights into dysregulated biological pathways in this disease model might offer translational biomarkers based on NETs and improved understanding of IBD pathogenesis in human patients. Our findings demonstrate that drug transporter deficiency induces substantial changes in the microbiota, leading to increased levels of IBD-associated strains and resulting in intestinal inflammation. GRAPHICAL ABSTRACT.Copyright \\u00a9 2023 Stensballe, Bennike, Ravn-Haren, Mortensen, Aboo, Knudsen, R\\u00fchlemann, Birkelund, Bang, Franke, Vogel, Hansen and Andersen.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=13108 request_id=4c19363df830cf038d6b7e58ad3978e7 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 2160
INFO:root:RAW TEXT: subject: Inflammatory Bowel Disease (IBD)
predicate: affects
object: approximately 0.3% of the global population
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: ATP-binding cassette (ABC) transporters
predicate: influence
object: intestinal inflammation
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: human p-glycoprotein
predicate: encoded by
object: the Abcb1 gene
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Abcb1a-deficient colitis mice
predicate: were fed
object: either casein or red meat-supplemented diets
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: protein sources
predicate: impact
object: a genetic colitis mouse model
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: diet
predicate: interact with
object: gut microbes
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: proteomic inflammation profiling
predicate: revealed associations between
object: ileum and urine proteomes
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Abcb1a efflux pump function
predicate: absence of
object: diet-induced intestinal inflammation
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: diet and protein transporter impairment
predicate: induced
object: intestinal inflammation
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Abcb1a deficiency
predicate: impacted
object: multiple systemic immune processes
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: neutrophil extracellular trap (NET) components
predicate: observed in relation to
object: neutrophil degranulation throughout the gastrointestinal tract
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: colitis model's microbiome
predicate: differed significantly from
object: that of wild-type mice
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: efflux transporter deficiency
predicate: led to
object: increased levels of IBD-associated strains
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Inflammatory Bowel Disease (IBD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory Bowel Disease (IBD)']
INFO:root:PARSING LINE: predicate: affects
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['affects']
INFO:root:PARSING LINE: object: approximately 0.3% of the global population
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['approximately 0.3% of the global population']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: ATP-binding cassette (ABC) transporters
DEBUG:root:SLOT: subject INL: False VALS: ['ATP-binding cassette (ABC) transporters']
INFO:root:PARSING LINE: predicate: influence
DEBUG:root:SLOT: predicate INL: False VALS: ['influence']
INFO:root:PARSING LINE: object: intestinal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['intestinal inflammation']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: human p-glycoprotein
DEBUG:root:SLOT: subject INL: False VALS: ['human p-glycoprotein']
INFO:root:PARSING LINE: predicate: encoded by
DEBUG:root:SLOT: predicate INL: False VALS: ['encoded by']
INFO:root:PARSING LINE: object: the Abcb1 gene
DEBUG:root:SLOT: object INL: False VALS: ['the Abcb1 gene']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Abcb1a-deficient colitis mice
DEBUG:root:SLOT: subject INL: False VALS: ['Abcb1a-deficient colitis mice']
INFO:root:PARSING LINE: predicate: were fed
DEBUG:root:SLOT: predicate INL: False VALS: ['were fed']
INFO:root:PARSING LINE: object: either casein or red meat-supplemented diets
DEBUG:root:SLOT: object INL: False VALS: ['either casein or red meat-supplemented diets']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: protein sources
DEBUG:root:SLOT: subject INL: False VALS: ['protein sources']
INFO:root:PARSING LINE: predicate: impact
DEBUG:root:SLOT: predicate INL: False VALS: ['impact']
INFO:root:PARSING LINE: object: a genetic colitis mouse model
DEBUG:root:SLOT: object INL: False VALS: ['a genetic colitis mouse model']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: diet
DEBUG:root:SLOT: subject INL: False VALS: ['diet']
INFO:root:PARSING LINE: predicate: interact with
DEBUG:root:SLOT: predicate INL: False VALS: ['interact with']
INFO:root:PARSING LINE: object: gut microbes
DEBUG:root:SLOT: object INL: False VALS: ['gut microbes']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: proteomic inflammation profiling
DEBUG:root:SLOT: subject INL: False VALS: ['proteomic inflammation profiling']
INFO:root:PARSING LINE: predicate: revealed associations between
DEBUG:root:SLOT: predicate INL: False VALS: ['revealed associations between']
INFO:root:PARSING LINE: object: ileum and urine proteomes
DEBUG:root:SLOT: object INL: False VALS: ['ileum and urine proteomes']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Abcb1a efflux pump function
DEBUG:root:SLOT: subject INL: False VALS: ['Abcb1a efflux pump function']
INFO:root:PARSING LINE: predicate: absence of
DEBUG:root:SLOT: predicate INL: False VALS: ['absence of']
INFO:root:PARSING LINE: object: diet-induced intestinal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['diet-induced intestinal inflammation']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: diet and protein transporter impairment
DEBUG:root:SLOT: subject INL: False VALS: ['diet and protein transporter impairment']
INFO:root:PARSING LINE: predicate: induced
DEBUG:root:SLOT: predicate INL: False VALS: ['induced']
INFO:root:PARSING LINE: object: intestinal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['intestinal inflammation']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Abcb1a deficiency
DEBUG:root:SLOT: subject INL: False VALS: ['Abcb1a deficiency']
INFO:root:PARSING LINE: predicate: impacted
DEBUG:root:SLOT: predicate INL: False VALS: ['impacted']
INFO:root:PARSING LINE: object: multiple systemic immune processes
DEBUG:root:SLOT: object INL: False VALS: ['multiple systemic immune processes']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: neutrophil extracellular trap (NET) components
DEBUG:root:SLOT: subject INL: False VALS: ['neutrophil extracellular trap (NET) components']
INFO:root:PARSING LINE: predicate: observed in relation to
DEBUG:root:SLOT: predicate INL: False VALS: ['observed in relation to']
INFO:root:PARSING LINE: object: neutrophil degranulation throughout the gastrointestinal tract
DEBUG:root:SLOT: object INL: False VALS: ['neutrophil degranulation throughout the gastrointestinal tract']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: colitis model's microbiome
DEBUG:root:SLOT: subject INL: False VALS: ["colitis model's microbiome"]
INFO:root:PARSING LINE: predicate: differed significantly from
DEBUG:root:SLOT: predicate INL: False VALS: ['differed significantly from']
INFO:root:PARSING LINE: object: that of wild-type mice
DEBUG:root:SLOT: object INL: False VALS: ['that of wild-type mice']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: efflux transporter deficiency
DEBUG:root:SLOT: subject INL: False VALS: ['efflux transporter deficiency']
INFO:root:PARSING LINE: predicate: led to
DEBUG:root:SLOT: predicate INL: False VALS: ['led to']
INFO:root:PARSING LINE: object: increased levels of IBD-associated strains
DEBUG:root:SLOT: object INL: False VALS: ['increased levels of IBD-associated strains']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'efflux transporter deficiency', 'predicate': 'led to', 'object': 'increased levels of IBD-associated strains', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'efflux transporter deficiency', 'predicate': 'led to', 'object': 'increased levels of IBD-associated strains', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING efflux transporter deficiency using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize efflux transporter deficiency to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING led to using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize led to to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING increased levels of IBD-associated strains using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized increased levels of IBD-associated strains to increased levels of ibd-associated strain
INFO:ontogpt.engines.knowledge_engine:GROUNDING increased levels of ibd-associated strain using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize increased levels of IBD-associated strains to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'efflux transporter deficiency', 'predicate': 'led to', 'object': 'increased levels of IBD-associated strains', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'efflux transporter deficiency', 'predicate': 'led to', 'object': 'increased levels of IBD-associated strains', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Clinical characteristics and long-term prognosis of elderly onset Crohn's disease.
Keywords: Crohn’s disease; aged; clinical characteristics; prognosis
PMID: 37587070
Abstract: With the increase in aging population in China, elderly Crohn's disease (CD) patients need to receive more attention. This study aims to explore the clinical characteristics and disease process of elderly onset CD (EOCD) patients in a single center.From January 2002 to January 2022, a total of 221 patients with CD from the Seventh Medical Center of Chinese PLA General Hospital were enrolled. According to the Montreal CD classification standard, the patients were further divided into 4 groups: an EOCD group (≥60 years old, n=25), a middle age onset CD (MOCD) group (40-59 years old, n=46), a young onset CD (YOCD) group (17-40 years old, n=131), and a childhood onset CD (COCD) group (6-16 years old, n=19). We compared the clinical characteristics and long-term prognosis among them.Females were predominant in the EOCD group (15/25, 60%). The number of people without smoking in the EOCD group (80%) was lower than that in COCD group (100%), higher than that in the YOCD group (70.2%) and the MOCD group (69.6%) (all P<0.05). Patients with perianal diseases at diagnosis were rare in the EOCD group (0%), lower than that in the COCD group (21.1%) and the YOVD group (19.8%) (all P<0.05). Stenosis was the most common disease behavior in the EOCD group (63.0%), significantly higher than that in the COCD group (15.8%), the YOCD group (36.6%) and the MOCD group (43.5%) (all P<0.05). The EOCD group was easier to be misdiagnosed as tumor (24%), higher than that in the COCD group (0%), the YOCD group (6.9%) and the MOCD group (19.6%) (all P<0.05). The EOCD group was prone to comorbidities (52%), and 20% of them were complicated with multiple comorbidities (P<0.05). During the follow-up, the all-cause mortality of EOCD was 12%, and the CD-related mortality was 8%, which was significantly higher than the other groups (all P<0.05). The use of immunosuppressants in the EOCD group (4.8%) was lower than that in the COCD group (12.8%), the YOCD group (16.8%) and the MOCD group (16.1%), but there was no statistical significance among the 4 groups (P=0.467). In addition, there was no significant difference in the rate of intestinal resection among the 4 groups (P=0.062).In EOCD patients, females were predominant, smoking was less common, and they were prone to comorbidity. At the initial stage of diagnosis, it is easy to be misdiagnosed as tumor, and the disease behavior mainly showed stricture type, less complicated with perianal diseases. During the follow-up, all-cause mortality and CD-related mortality of EOCD patients were significantly higher than those of the non-elderly onset CD patients.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3407]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Clinical characteristics and long-term prognosis of elderly onset Crohn\'s disease.\\nKeywords: Crohn\\u2019s disease; aged; clinical characteristics; prognosis\\nPMID: 37587070\\nAbstract: With the increase in aging population in China, elderly Crohn\'s disease (CD) patients need to receive more attention. This study aims to explore the clinical characteristics and disease process of elderly onset CD (EOCD) patients in a single center.From January 2002 to January 2022, a total of 221 patients with CD from the Seventh Medical Center of Chinese PLA General Hospital were enrolled. According to the Montreal CD classification standard, the patients were further divided into 4 groups: an EOCD group (\\u226560 years old, n=25), a middle age onset CD (MOCD) group (40-59 years old, n=46), a young onset CD (YOCD) group (17-40 years old, n=131), and a childhood onset CD (COCD) group (6-16 years old, n=19). We compared the clinical characteristics and long-term prognosis among them.Females were predominant in the EOCD group (15/25, 60%). The number of people without smoking in the EOCD group (80%) was lower than that in COCD group (100%), higher than that in the YOCD group (70.2%) and the MOCD group (69.6%) (all P<0.05). Patients with perianal diseases at diagnosis were rare in the EOCD group (0%), lower than that in the COCD group (21.1%) and the YOVD group (19.8%) (all P<0.05). Stenosis was the most common disease behavior in the EOCD group (63.0%), significantly higher than that in the COCD group (15.8%), the YOCD group (36.6%) and the MOCD group (43.5%) (all P<0.05). The EOCD group was easier to be misdiagnosed as tumor (24%), higher than that in the COCD group (0%), the YOCD group (6.9%) and the MOCD group (19.6%) (all P<0.05). The EOCD group was prone to comorbidities (52%), and 20% of them were complicated with multiple comorbidities (P<0.05). During the follow-up, the all-cause mortality of EOCD was 12%, and the CD-related mortality was 8%, which was significantly higher than the other groups (all P<0.05). The use of immunosuppressants in the EOCD group (4.8%) was lower than that in the COCD group (12.8%), the YOCD group (16.8%) and the MOCD group (16.1%), but there was no statistical significance among the 4 groups (P=0.467). In addition, there was no significant difference in the rate of intestinal resection among the 4 groups (P=0.062).In EOCD patients, females were predominant, smoking was less common, and they were prone to comorbidity. At the initial stage of diagnosis, it is easy to be misdiagnosed as tumor, and the disease behavior mainly showed stricture type, less complicated with perianal diseases. During the follow-up, all-cause mortality and CD-related mortality of EOCD patients were significantly higher than those of the non-elderly onset CD patients.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8883 request_id=3f92a33cd6dd06583c70ed5246064b2f response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1386
INFO:root:RAW TEXT: subject: Crohn's disease
predicate: onset
object: elderly
subject_qualifier: None
object_qualifier: None

subject: CD
predicate: classification standard
object: Montreal CD
subject_qualifier: None
object_qualifier: None

subject: patients
predicate: smoking
object: without smoking
subject_qualifier: None
object_qualifier: None

subject: patients
predicate: perianal diseases
object: rare
subject_qualifier: None
object_qualifier: None

subject: disease behavior
predicate: disease behavior
object: stenosis
subject_qualifier: None
object_qualifier: None

subject: misdiagnosed
predicate: misdiagnosed as
object: tumor
subject_qualifier: EOCD group
object_qualifier: None

subject: EOCD group
predicate: comorbidities
object: comorbidities
subject_qualifier: None
object_qualifier: None

subject: mortality
predicate: all-cause mortality
object: EOCD
subject_qualifier: None
object_qualifier: None

subject: mortality
predicate: CD-related mortality
object: EOCD
subject_qualifier: None
object_qualifier: None

subject: patients
predicate: use of immunosuppressants
object: immunosuppressants
subject_qualifier: EOCD group
object_qualifier: None

subject: rate
predicate: rate of intestinal resection
object: intestinal resection
subject_qualifier: None
object_qualifier: None

subject: patients
predicate: follow-up
object: EOCD patients
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: onset
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['onset']
INFO:root:PARSING LINE: object: elderly
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['elderly']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: CD
DEBUG:root:SLOT: subject INL: False VALS: ['CD']
INFO:root:PARSING LINE: predicate: classification standard
DEBUG:root:SLOT: predicate INL: False VALS: ['classification standard']
INFO:root:PARSING LINE: object: Montreal CD
DEBUG:root:SLOT: object INL: False VALS: ['Montreal CD']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: smoking
DEBUG:root:SLOT: predicate INL: False VALS: ['smoking']
INFO:root:PARSING LINE: object: without smoking
DEBUG:root:SLOT: object INL: False VALS: ['without smoking']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: perianal diseases
DEBUG:root:SLOT: predicate INL: False VALS: ['perianal diseases']
INFO:root:PARSING LINE: object: rare
DEBUG:root:SLOT: object INL: False VALS: ['rare']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: disease behavior
DEBUG:root:SLOT: subject INL: False VALS: ['disease behavior']
INFO:root:PARSING LINE: predicate: disease behavior
DEBUG:root:SLOT: predicate INL: False VALS: ['disease behavior']
INFO:root:PARSING LINE: object: stenosis
DEBUG:root:SLOT: object INL: False VALS: ['stenosis']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: misdiagnosed
DEBUG:root:SLOT: subject INL: False VALS: ['misdiagnosed']
INFO:root:PARSING LINE: predicate: misdiagnosed as
DEBUG:root:SLOT: predicate INL: False VALS: ['misdiagnosed as']
INFO:root:PARSING LINE: object: tumor
DEBUG:root:SLOT: object INL: False VALS: ['tumor']
INFO:root:PARSING LINE: subject_qualifier: EOCD group
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['EOCD group']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: EOCD group
DEBUG:root:SLOT: subject INL: False VALS: ['EOCD group']
INFO:root:PARSING LINE: predicate: comorbidities
DEBUG:root:SLOT: predicate INL: False VALS: ['comorbidities']
INFO:root:PARSING LINE: object: comorbidities
DEBUG:root:SLOT: object INL: False VALS: ['comorbidities']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: mortality
DEBUG:root:SLOT: subject INL: False VALS: ['mortality']
INFO:root:PARSING LINE: predicate: all-cause mortality
DEBUG:root:SLOT: predicate INL: False VALS: ['all-cause mortality']
INFO:root:PARSING LINE: object: EOCD
DEBUG:root:SLOT: object INL: False VALS: ['EOCD']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: mortality
DEBUG:root:SLOT: subject INL: False VALS: ['mortality']
INFO:root:PARSING LINE: predicate: CD-related mortality
DEBUG:root:SLOT: predicate INL: False VALS: ['CD-related mortality']
INFO:root:PARSING LINE: object: EOCD
DEBUG:root:SLOT: object INL: False VALS: ['EOCD']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: use of immunosuppressants
DEBUG:root:SLOT: predicate INL: False VALS: ['use of immunosuppressants']
INFO:root:PARSING LINE: object: immunosuppressants
DEBUG:root:SLOT: object INL: False VALS: ['immunosuppressants']
INFO:root:PARSING LINE: subject_qualifier: EOCD group
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['EOCD group']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: rate
DEBUG:root:SLOT: subject INL: False VALS: ['rate']
INFO:root:PARSING LINE: predicate: rate of intestinal resection
DEBUG:root:SLOT: predicate INL: False VALS: ['rate of intestinal resection']
INFO:root:PARSING LINE: object: intestinal resection
DEBUG:root:SLOT: object INL: False VALS: ['intestinal resection']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: follow-up
DEBUG:root:SLOT: predicate INL: False VALS: ['follow-up']
INFO:root:PARSING LINE: object: EOCD patients
DEBUG:root:SLOT: object INL: False VALS: ['EOCD patients']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'patients', 'predicate': 'follow-up', 'object': 'EOCD patients', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'patients', 'predicate': 'follow-up', 'object': 'EOCD patients', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING patients using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized patients to patient
INFO:ontogpt.engines.knowledge_engine:GROUNDING patient using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize patients to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING follow-up using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize follow-up to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING EOCD patients using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized EOCD patients to eocd patient
INFO:ontogpt.engines.knowledge_engine:GROUNDING eocd patient using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize EOCD patients to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'patients', 'predicate': 'follow-up', 'object': 'EOCD patients', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'patients', 'predicate': 'follow-up', 'object': 'EOCD patients', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Autophagy in intestinal epithelial cells prevents gut inflammation.
Keywords: autophagy; epithelium; inflammation; inflammatory bowel diseases; intestinal barrier; intestine
PMID: 37586983
Abstract: Intestinal epithelial cells form the largest barrier in the body, separating us from the outside world. Here, we review recent findings that highlight the role of autophagy in the cell-intrinsic response of the epithelial cells to the harsh intestinal environment and how they shape host physiology.Copyright © 2023 Elsevier Ltd. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1164]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Autophagy in intestinal epithelial cells prevents gut inflammation.\\nKeywords: autophagy; epithelium; inflammation; inflammatory bowel diseases; intestinal barrier; intestine\\nPMID: 37586983\\nAbstract: Intestinal epithelial cells form the largest barrier in the body, separating us from the outside world. Here, we review recent findings that highlight the role of autophagy in the cell-intrinsic response of the epithelial cells to the harsh intestinal environment and how they shape host physiology.Copyright \\u00a9 2023 Elsevier Ltd. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=905 request_id=33cbf0a34fdfbba9de2ac2a3bed2e4a8 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 195
INFO:root:RAW TEXT: There are no explicit statements provided in the given text that indicate a relationship between a disease and a cellular process. Therefore, it is not possible to extract the requested entities.
ERROR:root:Line 'There are no explicit statements provided in the given text that indicate a relationship between a disease and a cellular process. Therefore, it is not possible to extract the requested entities.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Corticosteroid use in patients with inflammatory bowel diseases: A real-life sub-analysis of the Italian DICE study.
Keywords: 
PMID: 37586907
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[768]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Corticosteroid use in patients with inflammatory bowel diseases: A real-life sub-analysis of the Italian DICE study.\\nKeywords: \\nPMID: 37586907\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1523 request_id=a9a52c676fd9dbb8e7522ee336b14f9e response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 261
INFO:root:RAW TEXT: Unfortunately, the provided text does not contain any information related to a disease, a type of relationship between a disease and a cellular process, or a cellular process itself. Therefore, it is not possible to extract the required entities from this text.
ERROR:root:Line 'Unfortunately, the provided text does not contain any information related to a disease, a type of relationship between a disease and a cellular process, or a cellular process itself. Therefore, it is not possible to extract the required entities from this text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Principles to advance value in inflammatory bowel disease: a collaborative payer-provider framework.
Keywords: Crohn’s disease; alternative payment models; ulcerative colitis; value-based care; value-based payment
PMID: 37586637
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[854]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Principles to advance value in inflammatory bowel disease: a collaborative payer-provider framework.\\nKeywords: Crohn\\u2019s disease; alternative payment models; ulcerative colitis; value-based care; value-based payment\\nPMID: 37586637\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=516 request_id=2afd7f5a5a100c989f66cf0b936d7394 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 74
INFO:root:RAW TEXT: No disease-cellular process relationships are mentioned in the given text.
ERROR:root:Line 'No disease-cellular process relationships are mentioned in the given text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Administration of Intestinal Mesenchymal Stromal Cells Reduces Colitis-Associated Cancer in C57BL/6J mice modulating the immune response and gut dysbiosis.
Keywords: DSS colitis; Mesenchymal stromal cells; azoxymethane; cell therapy; colorectal cancer; dysbiosis; inflammation; intestinal microbiota
PMID: 37586618
Abstract: Patients with Inflammatory bowel disease (IBD) have a higher risk of developing colitis-associated colorectal cancer (CAC) with poor prognosis. IBD etiology remains undefined but involves environmental factors, genetic predisposition, microbiota imbalance (dysbiosis) and mucosal immune defects. Mesenchymal stromal cells (MSCs) injections have shown good efficacy in reducing intestinal inflammation in animal and human studies. However, their effect on tumor growth in CAC and their capacity to restore gut dysbiosis is not clear.The outcome of systemic administrations of in vitro expanded human intestinal MSCs (iMSCs) on tumor growth in vivo was evaluated using the AOM/DSS model of CAC in C57BL/6J mice. Innate and adaptive immune responses in blood, mesenteric lymph nodes (MLNs) and colonic tissue were analyzed by flow cytometry. Intestinal microbiota composition was evaluated by 16S rRNA Amplicon Sequencing.iMSCs significantly inhibited colitis and intestinal tumor development, reducing IL-6 and COX-2 expression, and IL-6/STAT3 and PI3K/Akt signaling. iMSCs decreased colonic immune cell infiltration, and partly restored intestinal monocyte homing and differentiation. iMSC administration increased the numbers of Tregs and IFN-γ+CD8+ T cells in the MLNs while decreasing the IL-4+Th2 response. It also ameliorated intestinal dysbiosis in CAC mice, increasing diversity and Bacillota/Bacteroidota ratio, as well as Akkermansia abundance, while reducing Alistipes and Turicibacter, genera associated with inflammation.Administration of iMSCs protects against CAC, ameliorating colitis and partially reverting intestinal dysbiosis, supporting the use of MSCs for the treatment of IBD.Copyright © 2023. Published by Elsevier Ltd.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2681]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Administration of Intestinal Mesenchymal Stromal Cells Reduces Colitis-Associated Cancer in C57BL/6J mice modulating the immune response and gut dysbiosis.\\nKeywords: DSS colitis; Mesenchymal stromal cells; azoxymethane; cell therapy; colorectal cancer; dysbiosis; inflammation; intestinal microbiota\\nPMID: 37586618\\nAbstract: Patients with Inflammatory bowel disease (IBD) have a higher risk of developing colitis-associated colorectal cancer (CAC) with poor prognosis. IBD etiology remains undefined but involves environmental factors, genetic predisposition, microbiota imbalance (dysbiosis) and mucosal immune defects. Mesenchymal stromal cells (MSCs) injections have shown good efficacy in reducing intestinal inflammation in animal and human studies. However, their effect on tumor growth in CAC and their capacity to restore gut dysbiosis is not clear.The outcome of systemic administrations of in vitro expanded human intestinal MSCs (iMSCs) on tumor growth in vivo was evaluated using the AOM/DSS model of CAC in C57BL/6J mice. Innate and adaptive immune responses in blood, mesenteric lymph nodes (MLNs) and colonic tissue were analyzed by flow cytometry. Intestinal microbiota composition was evaluated by 16S rRNA Amplicon Sequencing.iMSCs significantly inhibited colitis and intestinal tumor development, reducing IL-6 and COX-2 expression, and IL-6/STAT3 and PI3K/Akt signaling. iMSCs decreased colonic immune cell infiltration, and partly restored intestinal monocyte homing and differentiation. iMSC administration increased the numbers of Tregs and IFN-\\u03b3+CD8+ T cells in the MLNs while decreasing the IL-4+Th2 response. It also ameliorated intestinal dysbiosis in CAC mice, increasing diversity and Bacillota/Bacteroidota ratio, as well as Akkermansia abundance, while reducing Alistipes and Turicibacter, genera associated with inflammation.Administration of iMSCs protects against CAC, ameliorating colitis and partially reverting intestinal dysbiosis, supporting the use of MSCs for the treatment of IBD.Copyright \\u00a9 2023. Published by Elsevier Ltd.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8445 request_id=9676a77d6f4335cb555ec62a282970d5 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1277
INFO:root:RAW TEXT: subject: colitis-associated colorectal cancer
predicate: reduces
object: tumor growth

subject_qualifier: -
object_qualifier: -

subject: Mesenchymal stromal cells (MSCs)
predicate: injections
object: reducing intestinal inflammation

subject_qualifier: -
object_qualifier: -

subject: Mesenchymal stromal cells (MSCs)
predicate: decreases
object: colonic immune cell infiltration

subject_qualifier: -
object_qualifier: -

subject: Mesenchymal stromal cells (MSCs)
predicate: partly restores
object: intestinal monocyte homing and differentiation

subject_qualifier: -
object_qualifier: -

subject: Mesenchymal stromal cells (MSCs)
predicate: increases
object: numbers of Tregs and IFN-γ+CD8+ T cells in the MLNs

subject_qualifier: -
object_qualifier: -

subject: iMSCs
predicate: ameliorated
object: intestinal dysbiosis in CAC mice

subject_qualifier: -
object_qualifier: -

subject: iMSCs
predicate: protects against
object: CAC

subject_qualifier: -
object_qualifier: -

subject: iMSCs
predicate: ameliorating
object: colitis

subject_qualifier: -
object_qualifier: -

subject: iMSCs
predicate: partially reverting
object: intestinal dysbiosis

subject_qualifier: -
object_qualifier: -

subject: iMSCs
predicate: supports
object: the use of MSCs for the treatment of IBD.
INFO:root:PARSING LINE: subject: colitis-associated colorectal cancer
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['colitis-associated colorectal cancer']
INFO:root:PARSING LINE: predicate: reduces
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['reduces']
INFO:root:PARSING LINE: object: tumor growth
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['tumor growth']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: Mesenchymal stromal cells (MSCs)
DEBUG:root:SLOT: subject INL: False VALS: ['Mesenchymal stromal cells (MSCs)']
INFO:root:PARSING LINE: predicate: injections
DEBUG:root:SLOT: predicate INL: False VALS: ['injections']
INFO:root:PARSING LINE: object: reducing intestinal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['reducing intestinal inflammation']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: Mesenchymal stromal cells (MSCs)
DEBUG:root:SLOT: subject INL: False VALS: ['Mesenchymal stromal cells (MSCs)']
INFO:root:PARSING LINE: predicate: decreases
DEBUG:root:SLOT: predicate INL: False VALS: ['decreases']
INFO:root:PARSING LINE: object: colonic immune cell infiltration
DEBUG:root:SLOT: object INL: False VALS: ['colonic immune cell infiltration']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: Mesenchymal stromal cells (MSCs)
DEBUG:root:SLOT: subject INL: False VALS: ['Mesenchymal stromal cells (MSCs)']
INFO:root:PARSING LINE: predicate: partly restores
DEBUG:root:SLOT: predicate INL: False VALS: ['partly restores']
INFO:root:PARSING LINE: object: intestinal monocyte homing and differentiation
DEBUG:root:SLOT: object INL: False VALS: ['intestinal monocyte homing and differentiation']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: Mesenchymal stromal cells (MSCs)
DEBUG:root:SLOT: subject INL: False VALS: ['Mesenchymal stromal cells (MSCs)']
INFO:root:PARSING LINE: predicate: increases
DEBUG:root:SLOT: predicate INL: False VALS: ['increases']
INFO:root:PARSING LINE: object: numbers of Tregs and IFN-γ+CD8+ T cells in the MLNs
DEBUG:root:SLOT: object INL: False VALS: ['numbers of Tregs and IFN-γ+CD8+ T cells in the MLNs']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: iMSCs
DEBUG:root:SLOT: subject INL: False VALS: ['iMSCs']
INFO:root:PARSING LINE: predicate: ameliorated
DEBUG:root:SLOT: predicate INL: False VALS: ['ameliorated']
INFO:root:PARSING LINE: object: intestinal dysbiosis in CAC mice
DEBUG:root:SLOT: object INL: False VALS: ['intestinal dysbiosis in CAC mice']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: iMSCs
DEBUG:root:SLOT: subject INL: False VALS: ['iMSCs']
INFO:root:PARSING LINE: predicate: protects against
DEBUG:root:SLOT: predicate INL: False VALS: ['protects against']
INFO:root:PARSING LINE: object: CAC
DEBUG:root:SLOT: object INL: False VALS: ['CAC']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: iMSCs
DEBUG:root:SLOT: subject INL: False VALS: ['iMSCs']
INFO:root:PARSING LINE: predicate: ameliorating
DEBUG:root:SLOT: predicate INL: False VALS: ['ameliorating']
INFO:root:PARSING LINE: object: colitis
DEBUG:root:SLOT: object INL: False VALS: ['colitis']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: iMSCs
DEBUG:root:SLOT: subject INL: False VALS: ['iMSCs']
INFO:root:PARSING LINE: predicate: partially reverting
DEBUG:root:SLOT: predicate INL: False VALS: ['partially reverting']
INFO:root:PARSING LINE: object: intestinal dysbiosis
DEBUG:root:SLOT: object INL: False VALS: ['intestinal dysbiosis']
INFO:root:PARSING LINE: subject_qualifier: -
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: object_qualifier: -
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['-']
INFO:root:PARSING LINE: subject: iMSCs
DEBUG:root:SLOT: subject INL: False VALS: ['iMSCs']
INFO:root:PARSING LINE: predicate: supports
DEBUG:root:SLOT: predicate INL: False VALS: ['supports']
INFO:root:PARSING LINE: object: the use of MSCs for the treatment of IBD.
DEBUG:root:SLOT: object INL: False VALS: ['the use of MSCs for the treatment of IBD.']
DEBUG:root:RAW: {'subject': 'iMSCs', 'predicate': 'supports', 'object': 'the use of MSCs for the treatment of IBD.', 'subject_qualifier': '-', 'object_qualifier': '-'}
DEBUG:root:Grounding annotation object {'subject': 'iMSCs', 'predicate': 'supports', 'object': 'the use of MSCs for the treatment of IBD.', 'subject_qualifier': '-', 'object_qualifier': '-'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING iMSCs using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized iMSCs to imsc
INFO:ontogpt.engines.knowledge_engine:GROUNDING imsc using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize iMSCs to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING supports using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized supports to support
INFO:ontogpt.engines.knowledge_engine:GROUNDING support using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize supports to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING the use of MSCs for the treatment of IBD. using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize the use of MSCs for the treatment of IBD. to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING - using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize - to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING - using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize - to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'iMSCs', 'predicate': 'supports', 'object': 'the use of MSCs for the treatment of IBD.', 'subject_qualifier': '-', 'object_qualifier': '-'}
INFO:root:{'subject': 'iMSCs', 'predicate': 'supports', 'object': 'the use of MSCs for the treatment of IBD.', 'subject_qualifier': '-', 'object_qualifier': '-'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: A Digital Health Intervention to Improve the Clinical Care of Inflammatory Bowel Disease Patients.
Keywords: 
PMID: 37586416
Abstract: Inflammatory bowel disease (IBD) is a chronic condition that requires close monitoring. Digital health virtual care platforms can enable self-monitoring and allow providers to remotely surveil patients and efficiently identify those with active disease.The primary aim was to design and implement an IBD remote monitoring program, identify predictors of patient engagement, and determine who found the chat to be a valuable tool.We developed the IBD Virtual Care Chat, an electronic health record (EHR)-integrated chat to monitor electronic patient reported outcomes (ePROs), medication changes, and disease activity, and subsequently report concerning findings to providers via the EHR. All patients in the IBD practice over age 18 with a clinical encounter in the preceding 12 months were eligible to be enrolled. The primary aim was to identify predictors of patient engagement and determine who found the chat to be a valuable tool.Between May 2021 and March 2022, 2,934 patients were enrolled. 1,160 engaged at least once and 687 (23.4%) continually engaged, submitting at least 3 ePROs. Disease severity (based on Harvey Bradshaw Index or Simple Clinical Colitis Activity Index) did not impact ePRO submissions. Patients were significantly more likely to be continually engaged if they self-reported the presence of extraintestinal manifestations (7%, 95%CI 0.01-0.14; p = 0.04). Patient satisfaction remained moderately high with a median score of 8 (IQR 5-10) on a scale of 1 (poor) to 10 (good).Our program demonstrates the potential for EHR integrated digital health as part of routine IBD care to achieve sustained engagement with high patient satisfaction.Thieme. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2446]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: A Digital Health Intervention to Improve the Clinical Care of Inflammatory Bowel Disease Patients.\\nKeywords: \\nPMID: 37586416\\nAbstract: Inflammatory bowel disease (IBD) is a chronic condition that requires close monitoring. Digital health virtual care platforms can enable self-monitoring and allow providers to remotely surveil patients and efficiently identify those with active disease.The primary aim was to design and implement an IBD remote monitoring program, identify predictors of patient engagement, and determine who found the chat to be a valuable tool.We developed the IBD Virtual Care Chat, an electronic health record (EHR)-integrated chat to monitor electronic patient reported outcomes (ePROs), medication changes, and disease activity, and subsequently report concerning findings to providers via the EHR. All patients in the IBD practice over age 18 with a clinical encounter in the preceding 12 months were eligible to be enrolled. The primary aim was to identify predictors of patient engagement and determine who found the chat to be a valuable tool.Between May 2021 and March 2022, 2,934 patients were enrolled. 1,160 engaged at least once and 687 (23.4%) continually engaged, submitting at least 3 ePROs. Disease severity (based on Harvey Bradshaw Index or Simple Clinical Colitis Activity Index) did not impact ePRO submissions. Patients were significantly more likely to be continually engaged if they self-reported the presence of extraintestinal manifestations (7%, 95%CI 0.01-0.14; p = 0.04). Patient satisfaction remained moderately high with a median score of 8 (IQR 5-10) on a scale of 1 (poor) to 10 (good).Our program demonstrates the potential for EHR integrated digital health as part of routine IBD care to achieve sustained engagement with high patient satisfaction.Thieme. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=470 request_id=c309164a9605c3a6eb79c5da271d3696 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 93
INFO:root:RAW TEXT: No relevant information about diseases and cellular processes is mentioned in the given text.
ERROR:root:Line 'No relevant information about diseases and cellular processes is mentioned in the given text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Commensal bacteria promote azathioprine therapy failure in inflammatory bowel disease via decreasing 6-mercaptopurine bioavailability.
Keywords: 6-mercaptopurine; azathioprine therapy failure; biotransformation; inflammatory bowel disease; microbiome
PMID: 37586320
Abstract: Azathioprine (AZA) therapy failure, though not the primary cause, contributes to disease relapse and progression in inflammatory bowel disease (IBD). However, the role of gut microbiota in AZA therapy failure remains poorly understood. We found a high prevalence of Blautia wexlerae in patients with IBD with AZA therapy failure, associated with shorter disease flare survival time. Colonization of B. wexlerae increased inflammatory macrophages and compromised AZA's therapeutic efficacy in mice with intestinal colitis. B. wexlerae colonization reduced 6-mercaptopurine (6-MP) bioavailability by enhancing selenium-dependent xanthine dehydrogenase (sd-XDH) activity. The enzyme sd-XDH converts 6-MP into its inactive metabolite, 6-thioxanthine (6-TX), thereby impairing its ability to inhibit inflammation in mice. Supplementation with Bacillus (B.) subtilis enriched in hypoxanthine phosphoribosyltransferase (HPRT) effectively mitigated B. wexlerae-induced AZA treatment failure in mice with intestinal colitis. These findings emphasize the need for tailored management strategies based on B. wexlerae levels in patients with IBD.Copyright © 2023 The Author(s). Published by Elsevier Inc. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2104]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Commensal bacteria promote azathioprine therapy failure in inflammatory bowel disease via decreasing 6-mercaptopurine bioavailability.\\nKeywords: 6-mercaptopurine; azathioprine therapy failure; biotransformation; inflammatory bowel disease; microbiome\\nPMID: 37586320\\nAbstract: Azathioprine (AZA) therapy failure, though not the primary cause, contributes to disease relapse and progression in inflammatory bowel disease (IBD). However, the role of gut microbiota in AZA therapy failure remains poorly understood. We found a high prevalence of Blautia wexlerae in patients with IBD with AZA therapy failure, associated with shorter disease flare survival time. Colonization of B.\\u00a0wexlerae increased inflammatory macrophages and compromised AZA\'s therapeutic efficacy in mice with intestinal colitis. B.\\u00a0wexlerae colonization reduced 6-mercaptopurine (6-MP) bioavailability by enhancing selenium-dependent xanthine dehydrogenase (sd-XDH) activity. The enzyme sd-XDH converts 6-MP into its inactive metabolite, 6-thioxanthine (6-TX), thereby impairing its ability to inhibit inflammation in mice. Supplementation with Bacillus (B.) subtilis enriched in hypoxanthine phosphoribosyltransferase (HPRT) effectively mitigated B.\\u00a0wexlerae-induced AZA treatment failure in mice with intestinal colitis. These findings emphasize the need for tailored management strategies based on B.\\u00a0wexlerae levels in patients with IBD.Copyright \\u00a9 2023 The Author(s). Published by Elsevier Inc. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=14258 request_id=992655a8dac8dc582e83048435a059d4 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1858
INFO:root:RAW TEXT: subject: azathioprine therapy failure
predicate: promote
object: inflammatory bowel disease
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: gut microbiota
predicate: contribute to
object: AZA therapy failure
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: Blautia wexlerae
predicate: have
object: high prevalence in patients with IBD with AZA therapy failure
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: B. wexlerae colonization
predicate: increase
object: inflammatory macrophages
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: B. wexlerae colonization
predicate: compromise
object: AZA's therapeutic efficacy in mice with intestinal colitis
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: B. wexlerae colonization
predicate: reduce
object: 6-mercaptopurine (6-MP) bioavailability
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: enzyme sd-XDH
predicate: enhance
object: selenium-dependent xanthine dehydrogenase activity
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: enzyme sd-XDH
predicate: convert
object: 6-MP into its inactive metabolite, 6-thioxanthine (6-TX)
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: enzyme sd-XDH
predicate: impair
object: 6-MP's ability to inhibit inflammation in mice
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: Bacillus (B.) subtilis supplementation
predicate: mitigate
object: B. wexlerae-induced AZA treatment failure in mice with intestinal colitis
qualifier: NOT
subject_qualifier: None
object_qualifier: None

subject: B. wexlerae levels in patients with IBD
predicate: emphasize the need for
object: tailored management strategies
qualifier: NOT
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: azathioprine therapy failure
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['azathioprine therapy failure']
INFO:root:PARSING LINE: predicate: promote
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['promote']
INFO:root:PARSING LINE: object: inflammatory bowel disease
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel disease']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: gut microbiota
DEBUG:root:SLOT: subject INL: False VALS: ['gut microbiota']
INFO:root:PARSING LINE: predicate: contribute to
DEBUG:root:SLOT: predicate INL: False VALS: ['contribute to']
INFO:root:PARSING LINE: object: AZA therapy failure
DEBUG:root:SLOT: object INL: False VALS: ['AZA therapy failure']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Blautia wexlerae
DEBUG:root:SLOT: subject INL: False VALS: ['Blautia wexlerae']
INFO:root:PARSING LINE: predicate: have
DEBUG:root:SLOT: predicate INL: False VALS: ['have']
INFO:root:PARSING LINE: object: high prevalence in patients with IBD with AZA therapy failure
DEBUG:root:SLOT: object INL: False VALS: ['high prevalence in patients with IBD with AZA therapy failure']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: B. wexlerae colonization
DEBUG:root:SLOT: subject INL: False VALS: ['B. wexlerae colonization']
INFO:root:PARSING LINE: predicate: increase
DEBUG:root:SLOT: predicate INL: False VALS: ['increase']
INFO:root:PARSING LINE: object: inflammatory macrophages
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory macrophages']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: B. wexlerae colonization
DEBUG:root:SLOT: subject INL: False VALS: ['B. wexlerae colonization']
INFO:root:PARSING LINE: predicate: compromise
DEBUG:root:SLOT: predicate INL: False VALS: ['compromise']
INFO:root:PARSING LINE: object: AZA's therapeutic efficacy in mice with intestinal colitis
DEBUG:root:SLOT: object INL: False VALS: ["AZA's therapeutic efficacy in mice with intestinal colitis"]
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: B. wexlerae colonization
DEBUG:root:SLOT: subject INL: False VALS: ['B. wexlerae colonization']
INFO:root:PARSING LINE: predicate: reduce
DEBUG:root:SLOT: predicate INL: False VALS: ['reduce']
INFO:root:PARSING LINE: object: 6-mercaptopurine (6-MP) bioavailability
DEBUG:root:SLOT: object INL: False VALS: ['6-mercaptopurine (6-MP) bioavailability']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: enzyme sd-XDH
DEBUG:root:SLOT: subject INL: False VALS: ['enzyme sd-XDH']
INFO:root:PARSING LINE: predicate: enhance
DEBUG:root:SLOT: predicate INL: False VALS: ['enhance']
INFO:root:PARSING LINE: object: selenium-dependent xanthine dehydrogenase activity
DEBUG:root:SLOT: object INL: False VALS: ['selenium-dependent xanthine dehydrogenase activity']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: enzyme sd-XDH
DEBUG:root:SLOT: subject INL: False VALS: ['enzyme sd-XDH']
INFO:root:PARSING LINE: predicate: convert
DEBUG:root:SLOT: predicate INL: False VALS: ['convert']
INFO:root:PARSING LINE: object: 6-MP into its inactive metabolite, 6-thioxanthine (6-TX)
DEBUG:root:SLOT: object INL: False VALS: ['6-MP into its inactive metabolite, 6-thioxanthine (6-TX)']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: enzyme sd-XDH
DEBUG:root:SLOT: subject INL: False VALS: ['enzyme sd-XDH']
INFO:root:PARSING LINE: predicate: impair
DEBUG:root:SLOT: predicate INL: False VALS: ['impair']
INFO:root:PARSING LINE: object: 6-MP's ability to inhibit inflammation in mice
DEBUG:root:SLOT: object INL: False VALS: ["6-MP's ability to inhibit inflammation in mice"]
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Bacillus (B.) subtilis supplementation
DEBUG:root:SLOT: subject INL: False VALS: ['Bacillus (B.) subtilis supplementation']
INFO:root:PARSING LINE: predicate: mitigate
DEBUG:root:SLOT: predicate INL: False VALS: ['mitigate']
INFO:root:PARSING LINE: object: B. wexlerae-induced AZA treatment failure in mice with intestinal colitis
DEBUG:root:SLOT: object INL: False VALS: ['B. wexlerae-induced AZA treatment failure in mice with intestinal colitis']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: B. wexlerae levels in patients with IBD
DEBUG:root:SLOT: subject INL: False VALS: ['B. wexlerae levels in patients with IBD']
INFO:root:PARSING LINE: predicate: emphasize the need for
DEBUG:root:SLOT: predicate INL: False VALS: ['emphasize the need for']
INFO:root:PARSING LINE: object: tailored management strategies
DEBUG:root:SLOT: object INL: False VALS: ['tailored management strategies']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'B. wexlerae levels in patients with IBD', 'predicate': 'emphasize the need for', 'object': 'tailored management strategies', 'qualifier': 'NOT', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'B. wexlerae levels in patients with IBD', 'predicate': 'emphasize the need for', 'object': 'tailored management strategies', 'qualifier': 'NOT', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING B. wexlerae levels in patients with IBD using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize B. wexlerae levels in patients with IBD to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING emphasize the need for using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize emphasize the need for to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING tailored management strategies using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized tailored management strategies to tailored management strategy
INFO:ontogpt.engines.knowledge_engine:GROUNDING tailored management strategy using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize tailored management strategies to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'B. wexlerae levels in patients with IBD', 'predicate': 'emphasize the need for', 'object': 'tailored management strategies', 'qualifier': 'NOT', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'B. wexlerae levels in patients with IBD', 'predicate': 'emphasize the need for', 'object': 'tailored management strategies', 'qualifier': 'NOT', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Stimulation-responsive mucoadhesive probiotics for inflammatory bowel disease treatment by scavenging reactive oxygen species and regulating gut microbiota.
Keywords: Inflammatory bowel disease; Microflora regulation; Reactive oxygen species; Specific adhesion; Stimulation-responsive
PMID: 37586233
Abstract: Inflammatory bowel disease (IBD) is characterized by the high level of reactive oxygen species (ROS) and highly dysfunctional intestinal flora. Here, a stimulation-responsive mucoadhesive probiotic Lac@HDP was rationally constructed for achieving specific adhesion of colitis site and depleting high level of ROS in inflammatory site. Briefly, Lac is Lactobacillus acidophilus, HDP is obtained by hyaluronic acid grafted with dopamine protected by phenylboric acid. Specifically, by consuming a large amount of ROS, phenyl borate group of Lac@HDP is oxidized and fractured, thus exposing the catechol hydroxyl group and obtaining strong mucosal adhesion ability, thereby significantly prolong the retention time of Lac in the inflammatory site. In the murine model of acute and chronic colitis, the stimulation-responsive mucoadhesive probiotics were significantly more effective in alleviating colitis symptoms than antioxidants and probiotics alone. In addition, the abundance and diversity of intestinal flora were increased after treatment with Lac@HDP, which was helpful to alleviate IBD. Importantly, the stimulation-responsive mucoadhesive probiotics have good biological safety in vivo, which provides the prospect of clinical application in the future.Copyright © 2023 Elsevier Ltd. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2237]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Stimulation-responsive mucoadhesive probiotics for inflammatory bowel disease treatment by scavenging reactive oxygen species and regulating gut microbiota.\\nKeywords: Inflammatory bowel disease; Microflora regulation; Reactive oxygen species; Specific adhesion; Stimulation-responsive\\nPMID: 37586233\\nAbstract: Inflammatory bowel disease (IBD) is characterized by the high level of reactive oxygen species (ROS) and highly dysfunctional intestinal flora. Here, a stimulation-responsive mucoadhesive probiotic Lac@HDP was rationally constructed for achieving specific adhesion of colitis site and depleting high level of ROS in inflammatory site. Briefly, Lac is Lactobacillus acidophilus, HDP is obtained by hyaluronic acid grafted with dopamine protected by phenylboric acid. Specifically, by consuming a large amount of ROS, phenyl borate group of Lac@HDP is oxidized and fractured, thus exposing the catechol hydroxyl group and obtaining strong mucosal adhesion ability, thereby significantly prolong the retention time of Lac in the inflammatory site. In the murine model of acute and chronic colitis, the stimulation-responsive mucoadhesive probiotics were significantly more effective in alleviating colitis symptoms than antioxidants and probiotics alone. In addition, the abundance and diversity of intestinal flora were increased after treatment with Lac@HDP, which was helpful to alleviate IBD. Importantly, the stimulation-responsive mucoadhesive probiotics have good biological safety in vivo, which provides the prospect of clinical application in the future.Copyright \\u00a9 2023 Elsevier Ltd. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=756 request_id=fe70e80b35ae205f7165ad3752ce2574 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 79
INFO:root:RAW TEXT: There are no explicit statements in the text that fulfill the requested format.
ERROR:root:Line 'There are no explicit statements in the text that fulfill the requested format.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Defining Comprehensive Disease Control for use as a Treatment Target for Ulcerative Colitis in Clinical Practice: International Delphi Consensus Recommendations.
Keywords: Delphi consensus; Ulcerative colitis; patient-reported symptoms; remission
PMID: 37586038
Abstract: Treatment of ulcerative colitis (UC) requires a patient-centric, definition of comprehensive disease control that considers improvements in aspects not typically captured by classical landmark trial endpoints. In an international initiative we reviewed aspects of UC that affect patients and/or indicate mucosal inflammation, to achieve consensus on which aspects to combine in a definition of comprehensive disease control, using a modified Delphi process.The Delphi panel comprised 12 gastroenterologists and one patient advocate. Two gastroenterologists were elected as chairs and did not vote. To inform statements, we asked 18 patients and the panel members about their experiences of remission and reviewed published literature. Panel members voted on statements anonymously in three rounds, with a live discussion before round 3. Consensus was met if ≥ 67% of the panel agreed. Statements without consensus in rounds 1 and 2 were revised or discarded after round 3.The panel agreed to measure individual patient benefit using a definition of comprehensive disease control that combines aspects currently measured in trials (rectal bleeding, stool frequency, disease-related quality of life, endoscopy, histological inflammatory activity, inflammatory biomarkers, and corticosteroid use), with additional patient-reported symptoms (bowel urgency, abdominal pain, extraintestinal manifestations, fatigue, and sleep disturbance). The panel agreed on scoring systems and thresholds for many aspects.Using a robust methodology, we defined comprehensive disease control in UC. Next, we will combine the measurement and scoring of these aspects into a multi-component tool and adopt comprehensive disease control as a treatment target in clinical practice and trials.© The Author(s) 2023. Published by Oxford University Press on behalf of European Crohn’s and Colitis Organisation.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2768]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Defining Comprehensive Disease Control for use as a Treatment Target for Ulcerative Colitis in Clinical Practice: International Delphi Consensus Recommendations.\\nKeywords: Delphi consensus; Ulcerative colitis; patient-reported symptoms; remission\\nPMID: 37586038\\nAbstract: Treatment of ulcerative colitis (UC) requires a patient-centric, definition of comprehensive disease control that considers improvements in aspects not typically captured by classical landmark trial endpoints. In an international initiative we reviewed aspects of UC that affect patients and/or indicate mucosal inflammation, to achieve consensus on which aspects to combine in a definition of comprehensive disease control, using a modified Delphi process.The Delphi panel comprised 12 gastroenterologists and one patient advocate. Two gastroenterologists were elected as chairs and did not vote. To inform statements, we asked 18 patients and the panel members about their experiences of remission and reviewed published literature. Panel members voted on statements anonymously in three rounds, with a live discussion before round 3. Consensus was met if \\u2265 67% of the panel agreed. Statements without consensus in rounds 1 and 2 were revised or discarded after round 3.The panel agreed to measure individual patient benefit using a definition of comprehensive disease control that combines aspects currently measured in trials (rectal bleeding, stool frequency, disease-related quality of life, endoscopy, histological inflammatory activity, inflammatory biomarkers, and corticosteroid use), with additional patient-reported symptoms (bowel urgency, abdominal pain, extraintestinal manifestations, fatigue, and sleep disturbance). The panel agreed on scoring systems and thresholds for many aspects.Using a robust methodology, we defined comprehensive disease control in UC. Next, we will combine the measurement and scoring of these aspects into a multi-component tool and adopt comprehensive disease control as a treatment target in clinical practice and trials.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of European Crohn\\u2019s and Colitis Organisation.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3899 request_id=1cedbb88aa8cc3084317e4c28aed44dd response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 617
INFO:root:RAW TEXT: subject: comprehensive disease control
predicate: combines
object: rectal bleeding, stool frequency, disease-related quality of life, endoscopy, histological inflammatory activity, inflammatory biomarkers, and corticosteroid use
subject_qualifier: 
object_qualifier: 

subject: comprehensive disease control
predicate: includes
object: bowel urgency, abdominal pain, extraintestinal manifestations, fatigue, and sleep disturbance
subject_qualifier: 
object_qualifier: 

subject: treatment target
predicate: adopt
object: comprehensive disease control
subject_qualifier: 
object_qualifier: clinical practice and trials
INFO:root:PARSING LINE: subject: comprehensive disease control
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['comprehensive disease control']
INFO:root:PARSING LINE: predicate: combines
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['combines']
INFO:root:PARSING LINE: object: rectal bleeding, stool frequency, disease-related quality of life, endoscopy, histological inflammatory activity, inflammatory biomarkers, and corticosteroid use
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['rectal bleeding, stool frequency, disease-related quality of life, endoscopy, histological inflammatory activity, inflammatory biomarkers, and corticosteroid use']
INFO:root:PARSING LINE: subject_qualifier:
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:root:PARSING LINE: subject: comprehensive disease control
DEBUG:root:SLOT: subject INL: False VALS: ['comprehensive disease control']
INFO:root:PARSING LINE: predicate: includes
DEBUG:root:SLOT: predicate INL: False VALS: ['includes']
INFO:root:PARSING LINE: object: bowel urgency, abdominal pain, extraintestinal manifestations, fatigue, and sleep disturbance
DEBUG:root:SLOT: object INL: False VALS: ['bowel urgency, abdominal pain, extraintestinal manifestations, fatigue, and sleep disturbance']
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: treatment target
DEBUG:root:SLOT: subject INL: False VALS: ['treatment target']
INFO:root:PARSING LINE: predicate: adopt
DEBUG:root:SLOT: predicate INL: False VALS: ['adopt']
INFO:root:PARSING LINE: object: comprehensive disease control
DEBUG:root:SLOT: object INL: False VALS: ['comprehensive disease control']
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier: clinical practice and trials
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['clinical practice and trials']
DEBUG:root:RAW: {'subject': 'treatment target', 'predicate': 'adopt', 'object': 'comprehensive disease control', 'object_qualifier': 'clinical practice and trials'}
DEBUG:root:Grounding annotation object {'subject': 'treatment target', 'predicate': 'adopt', 'object': 'comprehensive disease control', 'object_qualifier': 'clinical practice and trials'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING treatment target using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize treatment target to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING adopt using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize adopt to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING comprehensive disease control using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize comprehensive disease control to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING clinical practice and trials using NamedEntity
INFO:ontogpt.engines.knowledge_engine:Singularized clinical practice and trials to clinical practice and trial
INFO:ontogpt.engines.knowledge_engine:GROUNDING clinical practice and trial using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize clinical practice and trials to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'treatment target', 'predicate': 'adopt', 'object': 'comprehensive disease control', 'object_qualifier': 'clinical practice and trials'}
INFO:root:{'subject': 'treatment target', 'predicate': 'adopt', 'object': 'comprehensive disease control', 'object_qualifier': 'clinical practice and trials'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Prevalence of skin lesions in a sample of Brazilian patients with inflammatory bowel disease.
Keywords: 
PMID: 37585986
Abstract: Inflammatory bowel diseases may have extra intestinal manifestations such as those affecting the skin. This study aimed to study skin manifestations in a cohort of Brazilian patients with inflammatory bowel diseases.Epidemiological and clinical data were obtained through a cross-sectional study of 70 inflammatory bowel diseases patients and a control group comprising 50 healthy individuals. All patients were subjected to dermatological examination and photography of skin lesions.Out of the 70 inflammatory bowel diseases patients, 50 had ulcerative colitis and 20 had Crohn's disease. Skin lesions occurred in 95.7% of the inflammatory bowel diseases patients and in 88% of individuals in the control group (p=0.001). Alopecia (p<0.0001), xerosis (p=0.03), striae (p=0.02), and acne (p=0.04) were more common in inflammatory bowel diseases patients than in the control group. Alopecia was more frequent in females (p=0.01) than in males. Two male patients, one with ulcerative colitis and the other with Crohn's disease, had pyoderma gangrenosum. Erythema nodosum was not observed in both groups.There was a high prevalence of skin lesions in the Brazilian inflammatory bowel diseases patients. Additionally, alopecia, xerosis, striae, and acne were more common in patients with inflammatory bowel diseases than in those in the control group.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2092]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Prevalence of skin lesions in a sample of Brazilian patients with inflammatory bowel disease.\\nKeywords: \\nPMID: 37585986\\nAbstract: Inflammatory bowel diseases may have extra intestinal manifestations such as those affecting the skin. This study aimed to study skin manifestations in a cohort of Brazilian patients with inflammatory bowel diseases.Epidemiological and clinical data were obtained through a cross-sectional study of 70 inflammatory bowel diseases patients and a control group comprising 50 healthy individuals. All patients were subjected to dermatological examination and photography of skin lesions.Out of the 70 inflammatory bowel diseases patients, 50 had ulcerative colitis and 20 had Crohn\'s disease. Skin lesions occurred in 95.7% of the inflammatory bowel diseases patients and in 88% of individuals in the control group (p=0.001). Alopecia (p<0.0001), xerosis (p=0.03), striae (p=0.02), and acne (p=0.04) were more common in inflammatory bowel diseases patients than in the control group. Alopecia was more frequent in females (p=0.01) than in males. Two male patients, one with ulcerative colitis and the other with Crohn\'s disease, had pyoderma gangrenosum. Erythema nodosum was not observed in both groups.There was a high prevalence of skin lesions in the Brazilian inflammatory bowel diseases patients. Additionally, alopecia, xerosis, striae, and acne were more common in patients with inflammatory bowel diseases than in those in the control group.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6213 request_id=737d929a02b518028e83b7934ef2c630 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 954
INFO:root:RAW TEXT: subject: inflammatory bowel diseases
predicate: have extra intestinal manifestations such as those affecting the skin
object: skin lesions

subject: inflammatory bowel diseases patients
predicate: occur in
object: 95.7% of

subject: individuals in the control group
predicate: occur in
object: 88% of

subject: alopecia
predicate: is more common in
object: inflammatory bowel diseases patients

subject: xerosis
predicate: is more common in
object: inflammatory bowel diseases patients

subject: striae
predicate: is more common in
object: inflammatory bowel diseases patients

subject: acne
predicate: is more common in
object: inflammatory bowel diseases patients

subject: alopecia
predicate: is more frequent in
object: females

subject: pyoderma gangrenosum
predicate: is present in
object: two male patients, one with ulcerative colitis and the other with Crohn's disease

subject: erythema nodosum
predicate: is not observed in
object: both groups
INFO:root:PARSING LINE: subject: inflammatory bowel diseases
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel diseases']
INFO:root:PARSING LINE: predicate: have extra intestinal manifestations such as those affecting the skin
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['have extra intestinal manifestations such as those affecting the skin']
INFO:root:PARSING LINE: object: skin lesions
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['skin lesions']
INFO:root:PARSING LINE: subject: inflammatory bowel diseases patients
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel diseases patients']
INFO:root:PARSING LINE: predicate: occur in
DEBUG:root:SLOT: predicate INL: False VALS: ['occur in']
INFO:root:PARSING LINE: object: 95.7% of
DEBUG:root:SLOT: object INL: False VALS: ['95.7% of']
INFO:root:PARSING LINE: subject: individuals in the control group
DEBUG:root:SLOT: subject INL: False VALS: ['individuals in the control group']
INFO:root:PARSING LINE: predicate: occur in
DEBUG:root:SLOT: predicate INL: False VALS: ['occur in']
INFO:root:PARSING LINE: object: 88% of
DEBUG:root:SLOT: object INL: False VALS: ['88% of']
INFO:root:PARSING LINE: subject: alopecia
DEBUG:root:SLOT: subject INL: False VALS: ['alopecia']
INFO:root:PARSING LINE: predicate: is more common in
DEBUG:root:SLOT: predicate INL: False VALS: ['is more common in']
INFO:root:PARSING LINE: object: inflammatory bowel diseases patients
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel diseases patients']
INFO:root:PARSING LINE: subject: xerosis
DEBUG:root:SLOT: subject INL: False VALS: ['xerosis']
INFO:root:PARSING LINE: predicate: is more common in
DEBUG:root:SLOT: predicate INL: False VALS: ['is more common in']
INFO:root:PARSING LINE: object: inflammatory bowel diseases patients
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel diseases patients']
INFO:root:PARSING LINE: subject: striae
DEBUG:root:SLOT: subject INL: False VALS: ['striae']
INFO:root:PARSING LINE: predicate: is more common in
DEBUG:root:SLOT: predicate INL: False VALS: ['is more common in']
INFO:root:PARSING LINE: object: inflammatory bowel diseases patients
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel diseases patients']
INFO:root:PARSING LINE: subject: acne
DEBUG:root:SLOT: subject INL: False VALS: ['acne']
INFO:root:PARSING LINE: predicate: is more common in
DEBUG:root:SLOT: predicate INL: False VALS: ['is more common in']
INFO:root:PARSING LINE: object: inflammatory bowel diseases patients
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel diseases patients']
INFO:root:PARSING LINE: subject: alopecia
DEBUG:root:SLOT: subject INL: False VALS: ['alopecia']
INFO:root:PARSING LINE: predicate: is more frequent in
DEBUG:root:SLOT: predicate INL: False VALS: ['is more frequent in']
INFO:root:PARSING LINE: object: females
DEBUG:root:SLOT: object INL: False VALS: ['females']
INFO:root:PARSING LINE: subject: pyoderma gangrenosum
DEBUG:root:SLOT: subject INL: False VALS: ['pyoderma gangrenosum']
INFO:root:PARSING LINE: predicate: is present in
DEBUG:root:SLOT: predicate INL: False VALS: ['is present in']
INFO:root:PARSING LINE: object: two male patients, one with ulcerative colitis and the other with Crohn's disease
DEBUG:root:SLOT: object INL: False VALS: ["two male patients, one with ulcerative colitis and the other with Crohn's disease"]
INFO:root:PARSING LINE: subject: erythema nodosum
DEBUG:root:SLOT: subject INL: False VALS: ['erythema nodosum']
INFO:root:PARSING LINE: predicate: is not observed in
DEBUG:root:SLOT: predicate INL: False VALS: ['is not observed in']
INFO:root:PARSING LINE: object: both groups
DEBUG:root:SLOT: object INL: False VALS: ['both groups']
DEBUG:root:RAW: {'subject': 'erythema nodosum', 'predicate': 'is not observed in', 'object': 'both groups'}
DEBUG:root:Grounding annotation object {'subject': 'erythema nodosum', 'predicate': 'is not observed in', 'object': 'both groups'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING erythema nodosum using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding erythema nodosum to HP:0012219; next step is to normalize
DEBUG:ontogpt.engines.knowledge_engine:ID HP:0012219 not in prefixes ['MONDO']
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): nodenormalization-sri.renci.org:443
DEBUG:urllib3.connectionpool:https://nodenormalization-sri.renci.org:443 "GET /1.3/get_normalized_nodes?curie=HP%3A0012219&conflate=false HTTP/1.1" 200 505
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): nodenormalization-sri.renci.org:443
DEBUG:urllib3.connectionpool:https://nodenormalization-sri.renci.org:443 "GET /1.3/get_normalized_nodes?curie=HP%3A0012219&conflate=true HTTP/1.1" 200 505
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0014743 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10015226 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:32861005 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MESH:D004893 not in prefixes ['MONDO']
INFO:ontogpt.engines.knowledge_engine:Grounding erythema nodosum to MONDO:0850231; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized erythema nodosum with MONDO:0850231 to MONDO:0850231
INFO:ontogpt.engines.knowledge_engine:GROUNDING is not observed in using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is not observed in to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING both groups using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized both groups to both group
INFO:ontogpt.engines.knowledge_engine:GROUNDING both group using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize both groups to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'MONDO:0850231', 'predicate': 'is not observed in', 'object': 'both groups'}
INFO:root:{'subject': 'MONDO:0850231', 'predicate': 'is not observed in', 'object': 'both groups'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Maximizing Training and Mentorship in Sex as a Biological Variable Research Across Different Brain-Body Disorders.
Keywords: brain-gut; irritable bowel syndrome; mentorship; microbiome; sex differences
PMID: 37585513
Abstract: The Specialized Center of Research Excellence (SCORE) on sex differences at University of California, Los Angeles (UCLA) has a long track record studying bidirectional interactions between different organs and the brain in health and disease with a strong focus on sex as a biological variable (SABV). While the initial focus was on brain-gut interactions in irritable bowel syndrome (IBS), one of the most common disorders of gut-brain interaction, the scope of our Center's research has expanded to a range of different diseases, including inflammatory bowel disease, alcohol use disorder, obesity, urological chronic pelvic pain syndrome, and vulvodynia. This expansion of research focused on the role of brain-body and brain-gut microbiome interactions in these various disorders, aligning well with the increasing importance of multidisciplinary and interdisciplinary team science. The SCORE's Career Enhancement Core (CEC) has modeled team science as applied to SABV research, with educational and training opportunities, a mentoring program, seed grant funding, and other career development experiences that enable mentees to work across the disciplines involved in brain body research. The CEC goals are: (1) To provide seed grant funds for innovative research relevant to the overall SCORE mission and research program; (2) to recruit and foster the career development of students, trainees, and junior investigators who conduct research focused on sex differences or women's health in IBS and chronic constipation and other brain-gut disorders; (3) to facilitate and promote collaboration between the UCLA SCORE and other academic programs involved in women's health education and research; and (4) to promote the importance of SABV through community outreach using collaborative and innovative approaches. These goals focus on establishing the leading research center in sex differences in basic, translational, and clinical aspects of brain-body interactions and on providing women and underrepresented individuals with research opportunities needed to become independent investigators.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2940]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Maximizing Training and Mentorship in Sex as a Biological Variable Research Across Different Brain-Body Disorders.\\nKeywords: brain-gut; irritable bowel syndrome; mentorship; microbiome; sex differences\\nPMID: 37585513\\nAbstract: The Specialized Center of Research Excellence (SCORE) on sex differences at University of California, Los Angeles (UCLA) has a long track record studying bidirectional interactions between different organs and the brain in health and disease with a strong focus on sex as a biological variable (SABV). While the initial focus was on brain-gut interactions in irritable bowel syndrome (IBS), one of the most common disorders of gut-brain interaction, the scope of our Center\'s research has expanded to a range of different diseases, including inflammatory bowel disease, alcohol use disorder, obesity, urological chronic pelvic pain syndrome, and vulvodynia. This expansion of research focused on the role of brain-body and brain-gut microbiome interactions in these various disorders, aligning well with the increasing importance of multidisciplinary and interdisciplinary team science. The SCORE\'s Career Enhancement Core (CEC) has modeled team science as applied to SABV research, with educational and training opportunities, a mentoring program, seed grant funding, and other career development experiences that enable mentees to work across the disciplines involved in brain body research. The CEC goals are: (1) To provide seed grant funds for innovative research relevant to the overall SCORE mission and research program; (2) to recruit and foster the career development of students, trainees, and junior investigators who conduct research focused on sex differences or women\'s health in IBS and chronic constipation and other brain-gut disorders; (3) to facilitate and promote collaboration between the UCLA SCORE and other academic programs involved in women\'s health education and research; and (4) to promote the importance of SABV through community outreach using collaborative and innovative approaches. These goals focus on establishing the leading research center in sex differences in basic, translational, and clinical aspects of brain-body interactions and on providing women and underrepresented individuals with research opportunities needed to become independent investigators.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1270 request_id=40bee99039e83c3a9a2592b52a1e9587 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 189
INFO:root:RAW TEXT: subject: irritable bowel syndrome
predicate: brain-gut interactions in irritable bowel syndrome
object: brain-gut interactions
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: irritable bowel syndrome
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['irritable bowel syndrome']
INFO:root:PARSING LINE: predicate: brain-gut interactions in irritable bowel syndrome
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['brain-gut interactions in irritable bowel syndrome']
INFO:root:PARSING LINE: object: brain-gut interactions
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['brain-gut interactions']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'irritable bowel syndrome', 'predicate': 'brain-gut interactions in irritable bowel syndrome', 'object': 'brain-gut interactions', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'irritable bowel syndrome', 'predicate': 'brain-gut interactions in irritable bowel syndrome', 'object': 'brain-gut interactions', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING irritable bowel syndrome using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding irritable bowel syndrome to MONDO:0005052; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized irritable bowel syndrome with MONDO:0005052 to MONDO:0005052
INFO:ontogpt.engines.knowledge_engine:GROUNDING brain-gut interactions in irritable bowel syndrome using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize brain-gut interactions in irritable bowel syndrome to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING brain-gut interactions using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized brain-gut interactions to brain-gut interaction
INFO:ontogpt.engines.knowledge_engine:GROUNDING brain-gut interaction using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize brain-gut interactions to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005052', 'predicate': 'brain-gut interactions in irritable bowel syndrome', 'object': 'brain-gut interactions', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'MONDO:0005052', 'predicate': 'brain-gut interactions in irritable bowel syndrome', 'object': 'brain-gut interactions', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Identification of Novel Quinolin-2(1H)-ones as Phosphodiesterase 1 Inhibitors for the Treatment of Inflammatory Bowel Disease.
Keywords: 
PMID: 37584424
Abstract: Phosphodiesterase 1 (PDE1) is a subfamily of PDE super enzyme families that can hydrolyze cyclic adenosine monophosphate and cyclic guanosine monophosphate simultaneously. Currently, the number of PDE1 inhibitors is relatively few, significantly limiting their application. Herein, a novel series of quinolin-2(1H)-ones were designed rationally, leading to compound 10c with an IC50 of 15 nM against PDE1C, high selectivity across other PDEs, and remarkable safety properties. Furthermore, we used the lead compound 10c as a chemical tool to explore whether PDE1 could work as a novel potential target for the treatment of inflammatory bowel disease (IBD), a disease which is a chronic, relapsing disorder of the gastrointestinal tract inflammation lacking effective treatment. Our results showed that administration of 10c exerted significant anti-IBD effects in the dextran sodium sulfate-induced mice model and alleviated the inflammatory response, indicating that PDE1 could work as a potent target for IBD.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1789]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Identification of Novel Quinolin-2(1H)-ones as Phosphodiesterase 1 Inhibitors for the Treatment of Inflammatory Bowel Disease.\\nKeywords: \\nPMID: 37584424\\nAbstract: Phosphodiesterase 1 (PDE1) is a subfamily of PDE super enzyme families that can hydrolyze cyclic adenosine monophosphate and cyclic guanosine monophosphate simultaneously. Currently, the number of PDE1 inhibitors is relatively few, significantly limiting their application. Herein, a novel series of quinolin-2(1H)-ones were designed rationally, leading to compound 10c with an IC50 of 15 nM against PDE1C, high selectivity across other PDEs, and remarkable safety properties. Furthermore, we used the lead compound 10c as a chemical tool to explore whether PDE1 could work as a novel potential target for the treatment of inflammatory bowel disease (IBD), a disease which is a chronic, relapsing disorder of the gastrointestinal tract inflammation lacking effective treatment. Our results showed that administration of 10c exerted significant anti-IBD effects in the dextran sodium sulfate-induced mice model and alleviated the inflammatory response, indicating that PDE1 could work as a potent target for IBD.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=11420 request_id=23b71d74184a76a4a227b5a6c9378478 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1683
INFO:root:RAW TEXT: subject: PDE1
predicate: can hydrolyze
object: cyclic adenosine monophosphate and cyclic guanosine monophosphate
subject_qualifier: None
object_qualifier: None

subject: PDE1 inhibitors
predicate: are few
object: None
subject_qualifier: None
object_qualifier: None

subject: quinolin-2(1H)-ones
predicate: were designed
object: None
subject_qualifier: None
object_qualifier: None

subject: compound 10c
predicate: has an IC50
object: 15 nM against PDE1C
subject_qualifier: None
object_qualifier: None

subject: compound 10c
predicate: has high selectivity
object: across other PDEs
subject_qualifier: None
object_qualifier: None

subject: compound 10c
predicate: has remarkable safety properties
object: None
subject_qualifier: None
object_qualifier: None

subject: compound 10c
predicate: can work as a chemical tool
object: to explore PDE1 as a novel potential target
subject_qualifier: None
object_qualifier: None

subject: inflammatory bowel disease (IBD)
predicate: is a chronic, relapsing disorder 
object: of the gastrointestinal tract inflammation
subject_qualifier: None
object_qualifier: None

subject: inflammatory bowel disease (IBD)
predicate: lacks effective treatment
object: None
subject_qualifier: None
object_qualifier: None

subject: administration of 10c
predicate: exerted significant anti-IBD effects
object: in the dextran sodium sulfate-induced mice model
subject_qualifier: None
object_qualifier: None

subject: administration of 10c
predicate: alleviated the inflammatory response
object: None
subject_qualifier: None
object_qualifier: None

subject: PDE1
predicate: can work as a potent target
object: for IBD
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: PDE1
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['PDE1']
INFO:root:PARSING LINE: predicate: can hydrolyze
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['can hydrolyze']
INFO:root:PARSING LINE: object: cyclic adenosine monophosphate and cyclic guanosine monophosphate
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['cyclic adenosine monophosphate and cyclic guanosine monophosphate']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: PDE1 inhibitors
DEBUG:root:SLOT: subject INL: False VALS: ['PDE1 inhibitors']
INFO:root:PARSING LINE: predicate: are few
DEBUG:root:SLOT: predicate INL: False VALS: ['are few']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: quinolin-2(1H)-ones
DEBUG:root:SLOT: subject INL: False VALS: ['quinolin-2(1H)-ones']
INFO:root:PARSING LINE: predicate: were designed
DEBUG:root:SLOT: predicate INL: False VALS: ['were designed']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: compound 10c
DEBUG:root:SLOT: subject INL: False VALS: ['compound 10c']
INFO:root:PARSING LINE: predicate: has an IC50
DEBUG:root:SLOT: predicate INL: False VALS: ['has an IC50']
INFO:root:PARSING LINE: object: 15 nM against PDE1C
DEBUG:root:SLOT: object INL: False VALS: ['15 nM against PDE1C']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: compound 10c
DEBUG:root:SLOT: subject INL: False VALS: ['compound 10c']
INFO:root:PARSING LINE: predicate: has high selectivity
DEBUG:root:SLOT: predicate INL: False VALS: ['has high selectivity']
INFO:root:PARSING LINE: object: across other PDEs
DEBUG:root:SLOT: object INL: False VALS: ['across other PDEs']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: compound 10c
DEBUG:root:SLOT: subject INL: False VALS: ['compound 10c']
INFO:root:PARSING LINE: predicate: has remarkable safety properties
DEBUG:root:SLOT: predicate INL: False VALS: ['has remarkable safety properties']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: compound 10c
DEBUG:root:SLOT: subject INL: False VALS: ['compound 10c']
INFO:root:PARSING LINE: predicate: can work as a chemical tool
DEBUG:root:SLOT: predicate INL: False VALS: ['can work as a chemical tool']
INFO:root:PARSING LINE: object: to explore PDE1 as a novel potential target
DEBUG:root:SLOT: object INL: False VALS: ['to explore PDE1 as a novel potential target']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: inflammatory bowel disease (IBD)
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: is a chronic, relapsing disorder
DEBUG:root:SLOT: predicate INL: False VALS: ['is a chronic, relapsing disorder']
INFO:root:PARSING LINE: object: of the gastrointestinal tract inflammation
DEBUG:root:SLOT: object INL: False VALS: ['of the gastrointestinal tract inflammation']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: inflammatory bowel disease (IBD)
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: lacks effective treatment
DEBUG:root:SLOT: predicate INL: False VALS: ['lacks effective treatment']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: administration of 10c
DEBUG:root:SLOT: subject INL: False VALS: ['administration of 10c']
INFO:root:PARSING LINE: predicate: exerted significant anti-IBD effects
DEBUG:root:SLOT: predicate INL: False VALS: ['exerted significant anti-IBD effects']
INFO:root:PARSING LINE: object: in the dextran sodium sulfate-induced mice model
DEBUG:root:SLOT: object INL: False VALS: ['in the dextran sodium sulfate-induced mice model']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: administration of 10c
DEBUG:root:SLOT: subject INL: False VALS: ['administration of 10c']
INFO:root:PARSING LINE: predicate: alleviated the inflammatory response
DEBUG:root:SLOT: predicate INL: False VALS: ['alleviated the inflammatory response']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: PDE1
DEBUG:root:SLOT: subject INL: False VALS: ['PDE1']
INFO:root:PARSING LINE: predicate: can work as a potent target
DEBUG:root:SLOT: predicate INL: False VALS: ['can work as a potent target']
INFO:root:PARSING LINE: object: for IBD
DEBUG:root:SLOT: object INL: False VALS: ['for IBD']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'PDE1', 'predicate': 'can work as a potent target', 'object': 'for IBD', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'PDE1', 'predicate': 'can work as a potent target', 'object': 'for IBD', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING PDE1 using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize PDE1 to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING can work as a potent target using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize can work as a potent target to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING for IBD using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize for IBD to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'PDE1', 'predicate': 'can work as a potent target', 'object': 'for IBD', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'PDE1', 'predicate': 'can work as a potent target', 'object': 'for IBD', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Thiopurines have sustained long-term effectiveness in patients with inflammatory bowel disease which is independent of disease duration at initiation: A propensity score matched analysis.
Keywords: Crohn’s disease; Disease course; Early Thiopurines; Effectiveness; Inflammatory Bowel Disease; Ulcerative colitis
PMID: 37584328
Abstract: Thiopurines are viable option for the treatment of inflammatory bowel disease (IBD) in resource limited countries. However, data on the effect of disease duration at thiopurines initiation on long-term effectiveness is limited.We performed a propensity matched analysis of a retrospective cohort of patients with ulcerative colitis (UC) and Crohn's disease (CD). Patients initiated on thiopurines early in the disease course (≤2 years) were compared to those started late (>2 years). Effectiveness defined as no requirement for hospitalization, anti-TNF agents, surgery, and minimum steroid requirement (≤ 1 steroid course in 2years) during follow-up.Nine-hundred eighty-eight (UC:720, CD:268) patients were included [(male: 665 (60.8%), median age: 40(32-51) years, median follow up: 40 (19-81) months]. Overall effectiveness at 5 and 10 years was 79% and 72% in UC, and 69% and 63% in CD respectively. After propensity score matching, there was no difference in 5- and 10-year effectiveness between early and late thiopurine initiation groups either for UC (81% and 80% vs. 82% and 74%; p=0.92) or CD (76% and 66% vs. 72% and 51%, p=0.32). Male sex for UC (negative: HR:0.67, 95% CI:0.45-0.97; p=0.03), and ileal involvement (positive: HR: 3.03, 95% CI:1.32-6.71; p= 0.008), steroid dependent disease (positive: HR: 2.70, 95% CI:1.26-5.68; p= 0.01) and adverse events (negative: HR: 0.47, 95%CI:0.27-0.80; p=0.005) for CD were predictors of thiopurine effectiveness.Thiopurines have sustained long-term effectiveness in both UC and CD. However, early thiopurine initiation had no better effect on long-term disease outcome compared to late initiation.© The Author(s) 2023. Published by Oxford University Press on behalf of European Crohn’s and Colitis Organisation. All rights reserved. For permissions, please email: journals.permissions@oup.com.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2801]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Thiopurines have sustained long-term effectiveness in patients with inflammatory bowel disease which is independent of disease duration at initiation: A propensity score matched analysis.\\nKeywords: Crohn\\u2019s disease; Disease course; Early Thiopurines; Effectiveness; Inflammatory Bowel Disease; Ulcerative colitis\\nPMID: 37584328\\nAbstract: Thiopurines are viable option for the treatment of inflammatory bowel disease (IBD) in resource limited countries. However, data on the effect of disease duration at thiopurines initiation on long-term effectiveness is limited.We performed a propensity matched analysis of a retrospective cohort of patients with ulcerative colitis (UC) and Crohn\'s disease (CD). Patients initiated on thiopurines early in the disease course (\\u22642 years) were compared to those started late (>2 years). Effectiveness defined as no requirement for hospitalization, anti-TNF agents, surgery, and minimum steroid requirement (\\u2264 1 steroid course in 2years) during follow-up.Nine-hundred eighty-eight (UC:720, CD:268) patients were included [(male: 665 (60.8%), median age: 40(32-51) years, median follow up: 40 (19-81) months]. Overall effectiveness at 5 and 10 years was 79% and 72% in UC, and 69% and 63% in CD respectively. After propensity score matching, there was no difference in 5- and 10-year effectiveness between early and late thiopurine initiation groups either for UC (81% and 80% vs. 82% and 74%; p=0.92) or CD (76% and 66% vs. 72% and 51%, p=0.32). Male sex for UC (negative: HR:0.67, 95% CI:0.45-0.97; p=0.03), and ileal involvement (positive: HR: 3.03, 95% CI:1.32-6.71; p= 0.008), steroid dependent disease (positive: HR: 2.70, 95% CI:1.26-5.68; p= 0.01) and adverse events (negative: HR: 0.47, 95%CI:0.27-0.80; p=0.005) for CD were predictors of thiopurine effectiveness.Thiopurines have sustained long-term effectiveness in both UC and CD. However, early thiopurine initiation had no better effect on long-term disease outcome compared to late initiation.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of European Crohn\\u2019s and Colitis Organisation. All rights reserved. For permissions, please email: journals.permissions@oup.com.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9724 request_id=a70f66c9bc560da48e0f653887905703 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1354
INFO:root:RAW TEXT: subject: Thiopurines
predicate: have sustained long-term effectiveness in
object: patients with inflammatory bowel disease (IBD)
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: disease duration at thiopurines initiation
predicate: is independent of
object: long-term effectiveness
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: patients
predicate: initiated on thiopurines early in the disease course
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: patients
predicate: initiated on thiopurines late in the disease course
object: 
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: effectiveness
predicate: defined as
object: no requirement for hospitalization, anti-TNF agents, surgery, and minimum steroid requirement (≤ 1 steroid course in 2 years) during follow-up
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: overall effectiveness
predicate: was
object: 79% and 72% in UC, and 69% and 63% in CD respectively
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: thiopurine initiation groups
predicate: had no difference in
object: 5- and 10-year effectiveness
qualifier: 
subject_qualifier: 
object_qualifier: 

subject: thiopurine initiation groups
predicate: had no better effect on
object: long-term disease outcome
qualifier: 
subject_qualifier: 
object_qualifier:
INFO:root:PARSING LINE: subject: Thiopurines
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Thiopurines']
INFO:root:PARSING LINE: predicate: have sustained long-term effectiveness in
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['have sustained long-term effectiveness in']
INFO:root:PARSING LINE: object: patients with inflammatory bowel disease (IBD)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['patients with inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:root:PARSING LINE: subject: disease duration at thiopurines initiation
DEBUG:root:SLOT: subject INL: False VALS: ['disease duration at thiopurines initiation']
INFO:root:PARSING LINE: predicate: is independent of
DEBUG:root:SLOT: predicate INL: False VALS: ['is independent of']
INFO:root:PARSING LINE: object: long-term effectiveness
DEBUG:root:SLOT: object INL: False VALS: ['long-term effectiveness']
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: initiated on thiopurines early in the disease course
DEBUG:root:SLOT: predicate INL: False VALS: ['initiated on thiopurines early in the disease course']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: initiated on thiopurines late in the disease course
DEBUG:root:SLOT: predicate INL: False VALS: ['initiated on thiopurines late in the disease course']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: effectiveness
DEBUG:root:SLOT: subject INL: False VALS: ['effectiveness']
INFO:root:PARSING LINE: predicate: defined as
DEBUG:root:SLOT: predicate INL: False VALS: ['defined as']
INFO:root:PARSING LINE: object: no requirement for hospitalization, anti-TNF agents, surgery, and minimum steroid requirement (≤ 1 steroid course in 2 years) during follow-up
DEBUG:root:SLOT: object INL: False VALS: ['no requirement for hospitalization, anti-TNF agents, surgery, and minimum steroid requirement (≤ 1 steroid course in 2 years) during follow-up']
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: overall effectiveness
DEBUG:root:SLOT: subject INL: False VALS: ['overall effectiveness']
INFO:root:PARSING LINE: predicate: was
DEBUG:root:SLOT: predicate INL: False VALS: ['was']
INFO:root:PARSING LINE: object: 79% and 72% in UC, and 69% and 63% in CD respectively
DEBUG:root:SLOT: object INL: False VALS: ['79% and 72% in UC, and 69% and 63% in CD respectively']
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: thiopurine initiation groups
DEBUG:root:SLOT: subject INL: False VALS: ['thiopurine initiation groups']
INFO:root:PARSING LINE: predicate: had no difference in
DEBUG:root:SLOT: predicate INL: False VALS: ['had no difference in']
INFO:root:PARSING LINE: object: 5- and 10-year effectiveness
DEBUG:root:SLOT: object INL: False VALS: ['5- and 10-year effectiveness']
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: thiopurine initiation groups
DEBUG:root:SLOT: subject INL: False VALS: ['thiopurine initiation groups']
INFO:root:PARSING LINE: predicate: had no better effect on
DEBUG:root:SLOT: predicate INL: False VALS: ['had no better effect on']
INFO:root:PARSING LINE: object: long-term disease outcome
DEBUG:root:SLOT: object INL: False VALS: ['long-term disease outcome']
INFO:root:PARSING LINE: qualifier:
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:RAW: {'subject': 'thiopurine initiation groups', 'predicate': 'had no better effect on', 'object': 'long-term disease outcome'}
DEBUG:root:Grounding annotation object {'subject': 'thiopurine initiation groups', 'predicate': 'had no better effect on', 'object': 'long-term disease outcome'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING thiopurine initiation groups using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized thiopurine initiation groups to thiopurine initiation group
INFO:ontogpt.engines.knowledge_engine:GROUNDING thiopurine initiation group using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize thiopurine initiation groups to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING had no better effect on using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize had no better effect on to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING long-term disease outcome using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize long-term disease outcome to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'thiopurine initiation groups', 'predicate': 'had no better effect on', 'object': 'long-term disease outcome'}
INFO:root:{'subject': 'thiopurine initiation groups', 'predicate': 'had no better effect on', 'object': 'long-term disease outcome'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Manipulation of the intestinal microbiome-a slow journey to primetime.
Keywords: Clostridoides difficile; Fecal microbiota transplantation; Gut microbiota; Inflammatory bowel disease; Irritable bowel syndrome; Metabolic associated fatty liver disease
PMID: 37583860
Abstract: The gut microbiota has important functions in the regulation of normal body functions. Alterations of the microbiota are being increasingly linked to various disease states. The microbiome has been manipulated via the administration of stool from animals or humans, for more than 1000 years. Currently, fecal microbiota transplantation can be performed via endoscopic administration of fecal matter to the duodenum or colon or via capsules of lyophilized stools. More recently fecal microbial transplantation has been shown to be very effective for recurrent Clostridoides difficile infection (CDI). In addition there is some evidence of efficacy in the metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD). We review the current literature regarding the microbiome and the pathogenesis and treatment of CDI, MAFLD, IBS and IBD.©The Author(s) 2023. Published by Baishideng Publishing Group Inc. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1921]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
INFO:ontogpt.clients.openai_client:Using cached payload for prompt: From the text below, extract the following entities in the following format:\n\nsu...
INFO:root:RAW TEXT: subject: Clostridoides difficile
predicate: linked to 
object: alterations of the microbiota

subject: microbiota
predicate: has important functions in
object: regulation of normal body functions

subject: microbiome
predicate: manipulated via
object: the administration of stool from animals or humans

subject: fecal microbiota transplantation
predicate: can be performed via
object: endoscopic administration of fecal matter to the duodenum or colon or via capsules of lyophilized stools

subject: fecal microbial transplantation
predicate: shown to be very effective for
object: recurrent Clostridoides difficile infection (CDI)

subject: fecal microbial transplantation
predicate: some evidence of efficacy in
object: metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)
INFO:root:PARSING LINE: subject: Clostridoides difficile
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Clostridoides difficile']
INFO:root:PARSING LINE: predicate: linked to
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['linked to']
INFO:root:PARSING LINE: object: alterations of the microbiota
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['alterations of the microbiota']
INFO:root:PARSING LINE: subject: microbiota
DEBUG:root:SLOT: subject INL: False VALS: ['microbiota']
INFO:root:PARSING LINE: predicate: has important functions in
DEBUG:root:SLOT: predicate INL: False VALS: ['has important functions in']
INFO:root:PARSING LINE: object: regulation of normal body functions
DEBUG:root:SLOT: object INL: False VALS: ['regulation of normal body functions']
INFO:root:PARSING LINE: subject: microbiome
DEBUG:root:SLOT: subject INL: False VALS: ['microbiome']
INFO:root:PARSING LINE: predicate: manipulated via
DEBUG:root:SLOT: predicate INL: False VALS: ['manipulated via']
INFO:root:PARSING LINE: object: the administration of stool from animals or humans
DEBUG:root:SLOT: object INL: False VALS: ['the administration of stool from animals or humans']
INFO:root:PARSING LINE: subject: fecal microbiota transplantation
DEBUG:root:SLOT: subject INL: False VALS: ['fecal microbiota transplantation']
INFO:root:PARSING LINE: predicate: can be performed via
DEBUG:root:SLOT: predicate INL: False VALS: ['can be performed via']
INFO:root:PARSING LINE: object: endoscopic administration of fecal matter to the duodenum or colon or via capsules of lyophilized stools
DEBUG:root:SLOT: object INL: False VALS: ['endoscopic administration of fecal matter to the duodenum or colon or via capsules of lyophilized stools']
INFO:root:PARSING LINE: subject: fecal microbial transplantation
DEBUG:root:SLOT: subject INL: False VALS: ['fecal microbial transplantation']
INFO:root:PARSING LINE: predicate: shown to be very effective for
DEBUG:root:SLOT: predicate INL: False VALS: ['shown to be very effective for']
INFO:root:PARSING LINE: object: recurrent Clostridoides difficile infection (CDI)
DEBUG:root:SLOT: object INL: False VALS: ['recurrent Clostridoides difficile infection (CDI)']
INFO:root:PARSING LINE: subject: fecal microbial transplantation
DEBUG:root:SLOT: subject INL: False VALS: ['fecal microbial transplantation']
INFO:root:PARSING LINE: predicate: some evidence of efficacy in
DEBUG:root:SLOT: predicate INL: False VALS: ['some evidence of efficacy in']
INFO:root:PARSING LINE: object: metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)
DEBUG:root:SLOT: object INL: False VALS: ['metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)']
DEBUG:root:RAW: {'subject': 'fecal microbial transplantation', 'predicate': 'some evidence of efficacy in', 'object': 'metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)'}
DEBUG:root:Grounding annotation object {'subject': 'fecal microbial transplantation', 'predicate': 'some evidence of efficacy in', 'object': 'metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING fecal microbial transplantation using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize fecal microbial transplantation to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING some evidence of efficacy in using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize some evidence of efficacy in to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD) using CellularProcess
INFO:ontogpt.engines.knowledge_engine:metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (mafld), irritable bowel syndrome (ibs) and inflammatory bowel disease (ibd) =>paren=> ['mafld', 'ibs', 'ibd']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF mafld from ['mafld', 'ibs', 'ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING mafld using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF ibs from ['mafld', 'ibs', 'ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING ibs using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized ibs to ib
INFO:ontogpt.engines.knowledge_engine:GROUNDING ib using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF ibd from ['mafld', 'ibs', 'ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING ibd using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (mafld), irritable bowel syndrome (ibs) and inflammatory bowel disease (ibd) =>trimmed=> metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease , irritable bowel syndrome and inflammatory bowel disease; in ['mafld', 'ibs', 'ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease , irritable bowel syndrome and inflammatory bowel disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD) to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'fecal microbial transplantation', 'predicate': 'some evidence of efficacy in', 'object': 'metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)'}
INFO:root:{'subject': 'fecal microbial transplantation', 'predicate': 'some evidence of efficacy in', 'object': 'metabolic syndrome and its hepatic manifestation, metabolic associated fatty liver disease (MAFLD), irritable bowel syndrome (IBS) and inflammatory bowel disease (IBD)'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Menstrual cycle abnormalities in women with inflammatory bowel disease and effects of biological therapy on gynecological pathology.
Keywords: Adalimumab; Anti-tumor necrosis factor-α; Inflammatory bowel disease; Infliximab; Menstrual disorders
PMID: 37583859
Abstract: Inflammatory bowel disease (IBD) is a chronic condition that affects young individuals in their reproductive years. It may have long-term implications on their reproductive, sexual, and mental health. IBD has been related to menstrual abnormalities. Furthermore, the administration of biological therapy can also result in gynecological issues in addition to the disease itself. The purpose of this review was to present potential menstrual cycle problems in patients with IBD, as well as the impact of adalimumab and other anti-tumor necrosis factor medications on gynecological pathology.©The Author(s) 2023. Published by Baishideng Publishing Group Inc. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1562]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
INFO:ontogpt.clients.openai_client:Using cached payload for prompt: From the text below, extract the following entities in the following format:\n\nsu...
INFO:root:RAW TEXT: subject: Inflammatory bowel disease
predicate: affects
object: menstrual abnormalities

subject: biological therapy
predicate: can result in
object: gynecological issues
INFO:root:PARSING LINE: subject: Inflammatory bowel disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease']
INFO:root:PARSING LINE: predicate: affects
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['affects']
INFO:root:PARSING LINE: object: menstrual abnormalities
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['menstrual abnormalities']
INFO:root:PARSING LINE: subject: biological therapy
DEBUG:root:SLOT: subject INL: False VALS: ['biological therapy']
INFO:root:PARSING LINE: predicate: can result in
DEBUG:root:SLOT: predicate INL: False VALS: ['can result in']
INFO:root:PARSING LINE: object: gynecological issues
DEBUG:root:SLOT: object INL: False VALS: ['gynecological issues']
DEBUG:root:RAW: {'subject': 'biological therapy', 'predicate': 'can result in', 'object': 'gynecological issues'}
DEBUG:root:Grounding annotation object {'subject': 'biological therapy', 'predicate': 'can result in', 'object': 'gynecological issues'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING biological therapy using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize biological therapy to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING can result in using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize can result in to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING gynecological issues using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized gynecological issues to gynecological issue
INFO:ontogpt.engines.knowledge_engine:GROUNDING gynecological issue using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize gynecological issues to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'biological therapy', 'predicate': 'can result in', 'object': 'gynecological issues'}
INFO:root:{'subject': 'biological therapy', 'predicate': 'can result in', 'object': 'gynecological issues'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: IAPs and RIPK1 mediate LPS-induced cytokine production in healthy subjects and Crohn's disease.
Keywords: Crohn’s disease; Human monocyte activation; Inhibitor of apoptosis proteins (IAP); Lipopolysaccharide (LPS); Receptor-interacting serine/threonine-protein kinase 1 (RIPK1)
PMID: 37583360
Abstract: Innate immune activity fuels intestinal inflammation in Crohn's disease (CD), an inflammatory bowel disease (IBD). Identification and targeting of new molecular regulators of the innate activity are warranted to control the disease. Inhibitor of apoptosis proteins (IAPs) regulate both cell survival and inflammatory signaling. We investigated effects of IAP inhibition by second mitochondria-derived activator of caspases (SMAC) mimetics (SMs) on innate responses and cell death to pathogen-associated molecular patterns in peripheral blood mononuclear cells (PBMCs) and monocytes. IAPs inhibited lipopolysaccharide (LPS)-induced expression of proinflammatory interleukin (IL)-1β, IL-6. Likewise, LPS (but not muramyl dipeptide or E. coli) induced TNF-α was inhibited in CD and control PBMCs. The SM effect was partially reversed by inhibition of receptor-interacting serine/threonine-protein kinase 1 (RIPK1). The effect was mainly cell death independent. Thus, IAP inhibition by SMs leads to reduced production of proinflammatory cytokines and may be considered in the efforts to develop new therapeutic strategies to control CD.© The Author(s) 2023. Published by Oxford University Press on behalf of the British Society for Immunology. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2240]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: IAPs and RIPK1 mediate LPS-induced cytokine production in healthy subjects and Crohn\'s disease.\\nKeywords: Crohn\\u2019s disease; Human monocyte activation; Inhibitor of apoptosis proteins (IAP); Lipopolysaccharide (LPS); Receptor-interacting serine/threonine-protein kinase 1 (RIPK1)\\nPMID: 37583360\\nAbstract: Innate immune activity fuels intestinal inflammation in Crohn\'s disease (CD), an inflammatory bowel disease (IBD). Identification and targeting of new molecular regulators of the innate activity are warranted to control the disease. Inhibitor of apoptosis proteins (IAPs) regulate both cell survival and inflammatory signaling. We investigated effects of IAP inhibition by second mitochondria-derived activator of caspases (SMAC) mimetics (SMs) on innate responses and cell death to pathogen-associated molecular patterns in peripheral blood mononuclear cells (PBMCs) and monocytes. IAPs inhibited lipopolysaccharide (LPS)-induced expression of proinflammatory interleukin (IL)-1\\u03b2, IL-6. Likewise, LPS (but not muramyl dipeptide or E. coli) induced TNF-\\u03b1 was inhibited in CD and control PBMCs. The SM effect was partially reversed by inhibition of receptor-interacting serine/threonine-protein kinase 1 (RIPK1). The effect was mainly cell death independent. Thus, IAP inhibition by SMs leads to reduced production of proinflammatory cytokines and may be considered in the efforts to develop new therapeutic strategies to control CD.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of the British Society for Immunology. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1140 request_id=e0549aff2b172013f78cb350f8196271 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 129
INFO:root:RAW TEXT: subject: Crohn's disease
predicate: mediate
object: LPS-induced cytokine production

subject_qualifier: N/A
object_qualifier: N/A
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: mediate
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['mediate']
INFO:root:PARSING LINE: object: LPS-induced cytokine production
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['LPS-induced cytokine production']
INFO:root:PARSING LINE: subject_qualifier: N/A
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['N/A']
INFO:root:PARSING LINE: object_qualifier: N/A
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['N/A']
DEBUG:root:RAW: {'subject': "Crohn's disease", 'predicate': 'mediate', 'object': 'LPS-induced cytokine production', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
DEBUG:root:Grounding annotation object {'subject': "Crohn's disease", 'predicate': 'mediate', 'object': 'LPS-induced cytokine production', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Crohn's disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Grounding Crohn's disease to MONDO:0005011; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized Crohn's disease with MONDO:0005011 to MONDO:0005011
INFO:ontogpt.engines.knowledge_engine:GROUNDING mediate using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize mediate to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING LPS-induced cytokine production using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize LPS-induced cytokine production to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING N/A using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize N/A to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING N/A using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize N/A to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005011', 'predicate': 'mediate', 'object': 'LPS-induced cytokine production', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
INFO:root:{'subject': 'MONDO:0005011', 'predicate': 'mediate', 'object': 'LPS-induced cytokine production', 'subject_qualifier': 'N/A', 'object_qualifier': 'N/A'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Ten steps for ileoanal pouch anastomosis.
Keywords: IPAA; ileoanal pouch; inflammatory bowel disease; j-pouch; pouchoscopy
PMID: 37583048
Abstract: Appropriate patient selection, surgical technique, and follow-up pathways can provide optimal functional outcomes and good quality of life in many patients undergoing ileoanal pouch surgery. The aim of this study was to demonstrate the standardised approach to ileoanal pouch formation that we have developed in our pouch surgery centre.We developed a structured approach to laparoscopic proctectomy with ileoanal pouch anastomosis formation, divided into 10 different steps. All patients referred to our centre from January 2020 to December 2022 for ulcerative colitis were included in the study.A total of 38 consecutive patients underwent ileal pouch-anal anastomosis (IPAA) surgery. All procedures were completed laparoscopically with one conversion to open (2.6%). A total of 13 patients had postoperative complications within 30 days of surgery (34.2%), with six (15.8%) being Clavien Dindo class 3 or higher. Median follow-up length was 18 months (range 2-30). Median number of bowel movements in 24 h at 12 months post-surgery was 4 (range 1-11).Our modular 10 steps approach could provide a standardised framework to surgeons in the learning curve. IPAA is a complex surgical procedure with significant postoperative morbidity. Our stepwise approach resulted in a high rate of minimally invasive surgery and could facilitate introduction of the technique.© 2023 Association of Coloproctology of Great Britain and Ireland.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2193]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Ten steps for ileoanal pouch anastomosis.\\nKeywords: IPAA; ileoanal pouch; inflammatory bowel disease; j-pouch; pouchoscopy\\nPMID: 37583048\\nAbstract: Appropriate patient selection, surgical technique, and follow-up pathways can provide optimal functional outcomes and good quality of life in many patients undergoing ileoanal pouch surgery. The aim of this study was to demonstrate the standardised approach to ileoanal pouch formation that we have developed in our pouch surgery centre.We developed a structured approach to laparoscopic proctectomy with ileoanal pouch anastomosis formation, divided into 10 different steps. All patients referred to our centre from January 2020 to December 2022 for ulcerative colitis were included in the study.A total of 38 consecutive patients underwent ileal pouch-anal anastomosis (IPAA) surgery. All procedures were completed laparoscopically with one conversion to open (2.6%). A total of 13 patients had postoperative complications within 30\\u2009days of surgery (34.2%), with six (15.8%) being Clavien Dindo class 3 or higher. Median follow-up length was 18\\u2009months (range 2-30). Median number of bowel movements in 24\\u2009h at 12\\u2009months post-surgery was 4 (range 1-11).Our modular 10 steps approach could provide a standardised framework to surgeons in the learning curve. IPAA is a complex surgical procedure with significant postoperative morbidity. Our stepwise approach resulted in a high rate of minimally invasive surgery and could facilitate introduction of the technique.\\u00a9 2023 Association of Coloproctology of Great Britain and Ireland.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=305 request_id=4e1ac72d26ed8c58abc2ab73980868ce response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 85
INFO:root:RAW TEXT: There is no relevant information in the given text to extract the requested entities.
ERROR:root:Line 'There is no relevant information in the given text to extract the requested entities.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Building a trustworthy AI differential diagnosis application for Crohn's disease and intestinal tuberculosis.
Keywords: Crohn’s disease; Integrated gradients; Intestinal tuberculosis; Knowledge distillation; Neural network
PMID: 37582768
Abstract: Differentiating between Crohn's disease (CD) and intestinal tuberculosis (ITB) with endoscopy is challenging. We aim to perform more accurate endoscopic diagnosis between CD and ITB by building a trustworthy AI differential diagnosis application.A total of 1271 electronic health record (EHR) patients who had undergone colonoscopies at Peking Union Medical College Hospital (PUMCH) and were clinically diagnosed with CD (n = 875) or ITB (n = 396) were used in this study. We build a workflow to make diagnoses with EHRs and mine differential diagnosis features; this involves finetuning the pretrained language models, distilling them into a light and efficient TextCNN model, interpreting the neural network and selecting differential attribution features, and then adopting manual feature checking and carrying out debias training.The accuracy of debiased TextCNN on differential diagnosis between CD and ITB is 0.83 (CR F1: 0.87, ITB F1: 0.77), which is the best among the baselines. On the noisy validation set, its accuracy was 0.70 (CR F1: 0.87, ITB: 0.69), which was significantly higher than that of models without debias. We also find that the debiased model more easily mines the diagnostically significant features. The debiased TextCNN unearthed 39 diagnostic features in the form of phrases, 17 of which were key diagnostic features recognized by the guidelines.We build a trustworthy AI differential diagnosis application for differentiating between CD and ITB focusing on accuracy, interpretability and robustness. The classifiers perform well, and the features which had statistical significance were in agreement with clinical guidelines.© 2023. BioMed Central Ltd., part of Springer Nature.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2572]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Building a trustworthy AI differential diagnosis application for Crohn\'s disease and intestinal tuberculosis.\\nKeywords: Crohn\\u2019s disease; Integrated gradients; Intestinal tuberculosis; Knowledge distillation; Neural network\\nPMID: 37582768\\nAbstract: Differentiating between Crohn\'s disease (CD) and intestinal tuberculosis (ITB) with endoscopy is challenging. We aim to perform more accurate endoscopic diagnosis between CD and ITB by building a trustworthy AI differential diagnosis application.A total of 1271 electronic health record (EHR) patients who had undergone colonoscopies at Peking Union Medical College Hospital (PUMCH) and were clinically diagnosed with CD (n\\u2009=\\u2009875) or ITB (n\\u2009=\\u2009396) were used in this study. We build a workflow to make diagnoses with EHRs and mine differential diagnosis features; this involves finetuning the pretrained language models, distilling them into a light and efficient TextCNN model, interpreting the neural network and selecting differential attribution features, and then adopting manual feature checking and carrying out debias training.The accuracy of debiased TextCNN on differential diagnosis between CD and ITB is 0.83 (CR F1: 0.87, ITB F1: 0.77), which is the best among the baselines. On the noisy validation set, its accuracy was 0.70 (CR F1: 0.87, ITB: 0.69), which was significantly higher than that of models without debias. We also find that the debiased model more easily mines the diagnostically significant features. The debiased TextCNN unearthed 39 diagnostic features in the form of phrases, 17 of which were key diagnostic features recognized by the guidelines.We build a trustworthy AI differential diagnosis application for differentiating between CD and ITB focusing on accuracy, interpretability and robustness. The classifiers perform well, and the features which had statistical significance were in agreement with clinical guidelines.\\u00a9 2023. BioMed Central Ltd., part of Springer Nature.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8240 request_id=2013cbcb971fe83c80658266d350463a response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1489
INFO:root:RAW TEXT: subject: Crohn's disease
predicate: challenging to differentiate between
object: intestinal tuberculosis

subject: AI differential diagnosis application
predicate: used for differentiating between
object: Crohn's disease and intestinal tuberculosis

subject: endoscopic diagnosis
predicate: challenging to perform
object: differentiating between Crohn's disease and intestinal tuberculosis

subject: trustworth AI differential diagnosis application
predicate: built for differentiating between
object: Crohn's disease and intestinal tuberculosis

subject: debiased TextCNN
predicate: has an accuracy of
object: 0.83 in differential diagnosis between Crohn's disease and intestinal tuberculosis

subject: models without debias
predicate: have a lower accuracy than
object: debiased TextCNN in differential diagnosis between Crohn's disease and intestinal tuberculosis

subject: debiased TextCNN
predicate: mines the diagnostically significant features more easily

subject: trustworthy AI differential diagnosis application
predicate: built for accuracy, interpretability, and robustness in differentiating between
object: Crohn's disease and intestinal tuberculosis

subject: classifiers
predicate: perform well in differentiating between
object: Crohn's disease and intestinal tuberculosis

subject: key diagnostic features
predicate: recognized by the guidelines
object: 17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: challenging to differentiate between
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['challenging to differentiate between']
INFO:root:PARSING LINE: object: intestinal tuberculosis
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['intestinal tuberculosis']
INFO:root:PARSING LINE: subject: AI differential diagnosis application
DEBUG:root:SLOT: subject INL: False VALS: ['AI differential diagnosis application']
INFO:root:PARSING LINE: predicate: used for differentiating between
DEBUG:root:SLOT: predicate INL: False VALS: ['used for differentiating between']
INFO:root:PARSING LINE: object: Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: endoscopic diagnosis
DEBUG:root:SLOT: subject INL: False VALS: ['endoscopic diagnosis']
INFO:root:PARSING LINE: predicate: challenging to perform
DEBUG:root:SLOT: predicate INL: False VALS: ['challenging to perform']
INFO:root:PARSING LINE: object: differentiating between Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["differentiating between Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: trustworth AI differential diagnosis application
DEBUG:root:SLOT: subject INL: False VALS: ['trustworth AI differential diagnosis application']
INFO:root:PARSING LINE: predicate: built for differentiating between
DEBUG:root:SLOT: predicate INL: False VALS: ['built for differentiating between']
INFO:root:PARSING LINE: object: Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: debiased TextCNN
DEBUG:root:SLOT: subject INL: False VALS: ['debiased TextCNN']
INFO:root:PARSING LINE: predicate: has an accuracy of
DEBUG:root:SLOT: predicate INL: False VALS: ['has an accuracy of']
INFO:root:PARSING LINE: object: 0.83 in differential diagnosis between Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["0.83 in differential diagnosis between Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: models without debias
DEBUG:root:SLOT: subject INL: False VALS: ['models without debias']
INFO:root:PARSING LINE: predicate: have a lower accuracy than
DEBUG:root:SLOT: predicate INL: False VALS: ['have a lower accuracy than']
INFO:root:PARSING LINE: object: debiased TextCNN in differential diagnosis between Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["debiased TextCNN in differential diagnosis between Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: debiased TextCNN
DEBUG:root:SLOT: subject INL: False VALS: ['debiased TextCNN']
INFO:root:PARSING LINE: predicate: mines the diagnostically significant features more easily
DEBUG:root:SLOT: predicate INL: False VALS: ['mines the diagnostically significant features more easily']
INFO:root:PARSING LINE: subject: trustworthy AI differential diagnosis application
DEBUG:root:SLOT: subject INL: False VALS: ['trustworthy AI differential diagnosis application']
INFO:root:PARSING LINE: predicate: built for accuracy, interpretability, and robustness in differentiating between
DEBUG:root:SLOT: predicate INL: False VALS: ['built for accuracy, interpretability, and robustness in differentiating between']
INFO:root:PARSING LINE: object: Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: classifiers
DEBUG:root:SLOT: subject INL: False VALS: ['classifiers']
INFO:root:PARSING LINE: predicate: perform well in differentiating between
DEBUG:root:SLOT: predicate INL: False VALS: ['perform well in differentiating between']
INFO:root:PARSING LINE: object: Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["Crohn's disease and intestinal tuberculosis"]
INFO:root:PARSING LINE: subject: key diagnostic features
DEBUG:root:SLOT: subject INL: False VALS: ['key diagnostic features']
INFO:root:PARSING LINE: predicate: recognized by the guidelines
DEBUG:root:SLOT: predicate INL: False VALS: ['recognized by the guidelines']
INFO:root:PARSING LINE: object: 17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis
DEBUG:root:SLOT: object INL: False VALS: ["17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis"]
DEBUG:root:RAW: {'subject': 'key diagnostic features', 'predicate': 'recognized by the guidelines', 'object': "17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis"}
DEBUG:root:Grounding annotation object {'subject': 'key diagnostic features', 'predicate': 'recognized by the guidelines', 'object': "17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis"}
INFO:ontogpt.engines.knowledge_engine:GROUNDING key diagnostic features using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized key diagnostic features to key diagnostic feature
INFO:ontogpt.engines.knowledge_engine:GROUNDING key diagnostic feature using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize key diagnostic features to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING recognized by the guidelines using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized recognized by the guidelines to recognized by the guideline
INFO:ontogpt.engines.knowledge_engine:GROUNDING recognized by the guideline using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize recognized by the guidelines to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING 17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized 17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis to 17 of which were recognized by the guidelines in differentiating between crohn's disease and intestinal tuberculosi
INFO:ontogpt.engines.knowledge_engine:GROUNDING 17 of which were recognized by the guidelines in differentiating between crohn's disease and intestinal tuberculosi using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize 17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'key diagnostic features', 'predicate': 'recognized by the guidelines', 'object': "17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis"}
INFO:root:{'subject': 'key diagnostic features', 'predicate': 'recognized by the guidelines', 'object': "17 of which were recognized by the guidelines in differentiating between Crohn's disease and intestinal tuberculosis"}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: [Subcutaneous administration of levothyroxine in refractory hypothyroidism].
Keywords: hypothyroidism; levothyroxine; malabsorption syndromes; thyroid neoplasms
PMID: 37582137
Abstract: Hypothyroidism can usually be treated effectively with oral levothyroxine (LT-4) supplementation. However, hypothyroidism refractory to treatment with LT-4 is a common clinical condition. Causes include poor compliance, interactions with food or other medications, and gastrointestinal diseases, such as inflammatory bowel disease and short bowel syndromes. Increasing the oral dose of LT-4 is not always effective in these scenarios. Therefore, other routes of administration may be necessary. In this report, we evaluate alternative treatment modalities for refractory hypothyroidism and present two patients with intestinal malabsorption successfully treated by subcutaneous administration of LT-4.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1502]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: [Subcutaneous administration of levothyroxine in refractory hypothyroidism].\\nKeywords: hypothyroidism; levothyroxine; malabsorption syndromes; thyroid neoplasms\\nPMID: 37582137\\nAbstract: Hypothyroidism can usually be treated effectively with oral levothyroxine (LT-4) supplementation. However, hypothyroidism refractory to treatment with LT-4 is a common clinical condition. Causes include poor compliance, interactions with food or other medications, and gastrointestinal diseases, such as inflammatory bowel disease and short bowel syndromes. Increasing the oral dose of LT-4 is not always effective in these scenarios. Therefore, other routes of administration may be necessary. In this report, we evaluate alternative treatment modalities for refractory hypothyroidism and present two patients with intestinal malabsorption successfully treated by subcutaneous administration of LT-4.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5305 request_id=4185ae9098cdc9105303a4865550c645 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 778
INFO:root:RAW TEXT: subject: hypothyroidism
predicate: treated effectively with
object: oral levothyroxine (LT-4) supplementation

subject: hypothyroidism
predicate: refractory to treatment with
object: LT-4

subject: causes
predicate: include
object: poor compliance, interactions with food or other medications, and gastrointestinal diseases, such as inflammatory bowel disease and short bowel syndromes

subject: increasing the oral dose of LT-4
predicate: not always effective in
object: these scenarios

subject: other routes of administration
predicate: may be necessary

subject: alternative treatment modalities for refractory hypothyroidism
predicate: evaluate

subject: patients with intestinal malabsorption
predicate: successfully treated by 
object: subcutaneous administration of LT-4
INFO:root:PARSING LINE: subject: hypothyroidism
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['hypothyroidism']
INFO:root:PARSING LINE: predicate: treated effectively with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['treated effectively with']
INFO:root:PARSING LINE: object: oral levothyroxine (LT-4) supplementation
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['oral levothyroxine (LT-4) supplementation']
INFO:root:PARSING LINE: subject: hypothyroidism
DEBUG:root:SLOT: subject INL: False VALS: ['hypothyroidism']
INFO:root:PARSING LINE: predicate: refractory to treatment with
DEBUG:root:SLOT: predicate INL: False VALS: ['refractory to treatment with']
INFO:root:PARSING LINE: object: LT-4
DEBUG:root:SLOT: object INL: False VALS: ['LT-4']
INFO:root:PARSING LINE: subject: causes
DEBUG:root:SLOT: subject INL: False VALS: ['causes']
INFO:root:PARSING LINE: predicate: include
DEBUG:root:SLOT: predicate INL: False VALS: ['include']
INFO:root:PARSING LINE: object: poor compliance, interactions with food or other medications, and gastrointestinal diseases, such as inflammatory bowel disease and short bowel syndromes
DEBUG:root:SLOT: object INL: False VALS: ['poor compliance, interactions with food or other medications, and gastrointestinal diseases, such as inflammatory bowel disease and short bowel syndromes']
INFO:root:PARSING LINE: subject: increasing the oral dose of LT-4
DEBUG:root:SLOT: subject INL: False VALS: ['increasing the oral dose of LT-4']
INFO:root:PARSING LINE: predicate: not always effective in
DEBUG:root:SLOT: predicate INL: False VALS: ['not always effective in']
INFO:root:PARSING LINE: object: these scenarios
DEBUG:root:SLOT: object INL: False VALS: ['these scenarios']
INFO:root:PARSING LINE: subject: other routes of administration
DEBUG:root:SLOT: subject INL: False VALS: ['other routes of administration']
INFO:root:PARSING LINE: predicate: may be necessary
DEBUG:root:SLOT: predicate INL: False VALS: ['may be necessary']
INFO:root:PARSING LINE: subject: alternative treatment modalities for refractory hypothyroidism
DEBUG:root:SLOT: subject INL: False VALS: ['alternative treatment modalities for refractory hypothyroidism']
INFO:root:PARSING LINE: predicate: evaluate
DEBUG:root:SLOT: predicate INL: False VALS: ['evaluate']
INFO:root:PARSING LINE: subject: patients with intestinal malabsorption
DEBUG:root:SLOT: subject INL: False VALS: ['patients with intestinal malabsorption']
INFO:root:PARSING LINE: predicate: successfully treated by
DEBUG:root:SLOT: predicate INL: False VALS: ['successfully treated by']
INFO:root:PARSING LINE: object: subcutaneous administration of LT-4
DEBUG:root:SLOT: object INL: False VALS: ['subcutaneous administration of LT-4']
DEBUG:root:RAW: {'subject': 'patients with intestinal malabsorption', 'predicate': 'successfully treated by', 'object': 'subcutaneous administration of LT-4'}
DEBUG:root:Grounding annotation object {'subject': 'patients with intestinal malabsorption', 'predicate': 'successfully treated by', 'object': 'subcutaneous administration of LT-4'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING patients with intestinal malabsorption using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize patients with intestinal malabsorption to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING successfully treated by using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize successfully treated by to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING subcutaneous administration of LT-4 using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize subcutaneous administration of LT-4 to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'patients with intestinal malabsorption', 'predicate': 'successfully treated by', 'object': 'subcutaneous administration of LT-4'}
INFO:root:{'subject': 'patients with intestinal malabsorption', 'predicate': 'successfully treated by', 'object': 'subcutaneous administration of LT-4'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: DNASE1L3 enhances antitumor immunity and suppresses tumor progression in colon cancer.
Keywords: Colorectal cancer; Dendritic cells; Inflammatory bowel disease; Oncology
PMID: 37581941
Abstract: DNASE1L3, an enzyme highly expressed in dendritic cells, is functionally important for regulating autoimmune responses to self-DNA and chromatin. Deficiency of DNASE1L3 leads to development of autoimmune diseases in both humans and mice. However, despite the well-established causal relationship between DNASE1L3 and immunity, little is known about the involvement of DNASE1L3 in regulation of anti-tumor immunity, the foundation of modern anti-tumor immunotherapy. In this study, we identify DNASE1L3 as a new regulator of anti-tumor immunity and a tumor suppressor in colon cancer. In humans, DNASE1L3 is downregulated in tumor-infiltrating dendritic cells, and this downregulation is associated with poor patient prognosis and reduced tumor immune cell infiltration in many cancer types. In mice, Dnase1l3 deficiency in the tumor microenvironment enhances tumor formation and growth in several colon cancer models. Notably, the increased tumor formation and growth in Dnase1l3-deficient mice are associated with impaired anti-tumor immunity, including a substantial reduction of cytotoxic T cells and a unique subset of dendritic cells. Consistently, Dnase1l3-deficient dendritic cells directly modulate cytotoxic T cells in vitro. Collectively, our study unveils a previously unknown link between DNASE1L3 and anti-tumor immunity, and further suggests that restoration of DNASE1L3 activity may represent a potential therapeutic approach for anti-cancer therapy.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2275]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: DNASE1L3 enhances antitumor immunity and suppresses tumor progression in colon cancer.\\nKeywords: Colorectal cancer; Dendritic cells; Inflammatory bowel disease; Oncology\\nPMID: 37581941\\nAbstract: DNASE1L3, an enzyme highly expressed in dendritic cells, is functionally important for regulating autoimmune responses to self-DNA and chromatin. Deficiency of DNASE1L3 leads to development of autoimmune diseases in both humans and mice. However, despite the well-established causal relationship between DNASE1L3 and immunity, little is known about the involvement of DNASE1L3 in regulation of anti-tumor immunity, the foundation of modern anti-tumor immunotherapy. In this study, we identify DNASE1L3 as a new regulator of anti-tumor immunity and a tumor suppressor in colon cancer. In humans, DNASE1L3 is downregulated in tumor-infiltrating dendritic cells, and this downregulation is associated with poor patient prognosis and reduced tumor immune cell infiltration in many cancer types. In mice, Dnase1l3 deficiency in the tumor microenvironment enhances tumor formation and growth in several colon cancer models. Notably, the increased tumor formation and growth in Dnase1l3-deficient mice are associated with impaired anti-tumor immunity, including a substantial reduction of cytotoxic T cells and a unique subset of dendritic cells. Consistently, Dnase1l3-deficient dendritic cells directly modulate cytotoxic T cells in vitro. Collectively, our study unveils a previously unknown link between DNASE1L3 and anti-tumor immunity, and further suggests that restoration of DNASE1L3 activity may represent a potential therapeutic approach for anti-cancer therapy.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4935 request_id=11995edf7bb0008038cf23b5d8fcb055 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 747
INFO:root:RAW TEXT: subject: DNASE1L3
predicate: enhances
object: antitumor immunity

subject: DNASE1L3
predicate: suppresses
object: tumor progression

subject: DNASE1L3
predicate: is downregulated in
object: tumor-infiltrating dendritic cells

subject: downregulation of DNASE1L3
predicate: is associated with
object: poor patient prognosis and reduced tumor immune cell infiltration

subject: DNASE1L3 deficiency
predicate: enhances
object: tumor formation and growth

subject: DNASE1L3 deficiency
predicate: is associated with
object: impaired anti-tumor immunity

subject: DNASE1L3-deficient dendritic cells
predicate: modulate
object: cytotoxic T cells

subject: restoration of DNASE1L3 activity
predicate: may represent
object: a potential therapeutic approach
INFO:root:PARSING LINE: subject: DNASE1L3
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['DNASE1L3']
INFO:root:PARSING LINE: predicate: enhances
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['enhances']
INFO:root:PARSING LINE: object: antitumor immunity
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['antitumor immunity']
INFO:root:PARSING LINE: subject: DNASE1L3
DEBUG:root:SLOT: subject INL: False VALS: ['DNASE1L3']
INFO:root:PARSING LINE: predicate: suppresses
DEBUG:root:SLOT: predicate INL: False VALS: ['suppresses']
INFO:root:PARSING LINE: object: tumor progression
DEBUG:root:SLOT: object INL: False VALS: ['tumor progression']
INFO:root:PARSING LINE: subject: DNASE1L3
DEBUG:root:SLOT: subject INL: False VALS: ['DNASE1L3']
INFO:root:PARSING LINE: predicate: is downregulated in
DEBUG:root:SLOT: predicate INL: False VALS: ['is downregulated in']
INFO:root:PARSING LINE: object: tumor-infiltrating dendritic cells
DEBUG:root:SLOT: object INL: False VALS: ['tumor-infiltrating dendritic cells']
INFO:root:PARSING LINE: subject: downregulation of DNASE1L3
DEBUG:root:SLOT: subject INL: False VALS: ['downregulation of DNASE1L3']
INFO:root:PARSING LINE: predicate: is associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: object: poor patient prognosis and reduced tumor immune cell infiltration
DEBUG:root:SLOT: object INL: False VALS: ['poor patient prognosis and reduced tumor immune cell infiltration']
INFO:root:PARSING LINE: subject: DNASE1L3 deficiency
DEBUG:root:SLOT: subject INL: False VALS: ['DNASE1L3 deficiency']
INFO:root:PARSING LINE: predicate: enhances
DEBUG:root:SLOT: predicate INL: False VALS: ['enhances']
INFO:root:PARSING LINE: object: tumor formation and growth
DEBUG:root:SLOT: object INL: False VALS: ['tumor formation and growth']
INFO:root:PARSING LINE: subject: DNASE1L3 deficiency
DEBUG:root:SLOT: subject INL: False VALS: ['DNASE1L3 deficiency']
INFO:root:PARSING LINE: predicate: is associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: object: impaired anti-tumor immunity
DEBUG:root:SLOT: object INL: False VALS: ['impaired anti-tumor immunity']
INFO:root:PARSING LINE: subject: DNASE1L3-deficient dendritic cells
DEBUG:root:SLOT: subject INL: False VALS: ['DNASE1L3-deficient dendritic cells']
INFO:root:PARSING LINE: predicate: modulate
DEBUG:root:SLOT: predicate INL: False VALS: ['modulate']
INFO:root:PARSING LINE: object: cytotoxic T cells
DEBUG:root:SLOT: object INL: False VALS: ['cytotoxic T cells']
INFO:root:PARSING LINE: subject: restoration of DNASE1L3 activity
DEBUG:root:SLOT: subject INL: False VALS: ['restoration of DNASE1L3 activity']
INFO:root:PARSING LINE: predicate: may represent
DEBUG:root:SLOT: predicate INL: False VALS: ['may represent']
INFO:root:PARSING LINE: object: a potential therapeutic approach
DEBUG:root:SLOT: object INL: False VALS: ['a potential therapeutic approach']
DEBUG:root:RAW: {'subject': 'restoration of DNASE1L3 activity', 'predicate': 'may represent', 'object': 'a potential therapeutic approach'}
DEBUG:root:Grounding annotation object {'subject': 'restoration of DNASE1L3 activity', 'predicate': 'may represent', 'object': 'a potential therapeutic approach'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING restoration of DNASE1L3 activity using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize restoration of DNASE1L3 activity to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING may represent using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize may represent to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING a potential therapeutic approach using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize a potential therapeutic approach to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'restoration of DNASE1L3 activity', 'predicate': 'may represent', 'object': 'a potential therapeutic approach'}
INFO:root:{'subject': 'restoration of DNASE1L3 activity', 'predicate': 'may represent', 'object': 'a potential therapeutic approach'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Zinc-Rutin Particles Ameliorate DSS-Induced Acute and Chronic Colitis via Anti-inflammatory and Antioxidant Protection of the Intestinal Epithelial Barrier.
Keywords: antioxidant, anti-inflammation; flavonoids; inflammatory bowel diseases; zinc ions
PMID: 37581468
Abstract: In patients suffering from inflammatory bowel diseases (IBDs), the immune system is disrupted and the intestinal barrier function is compromised. Here, six zinc-flavonoid particles were produced by one-step reaction via changing flavonoids (myricetin, quercetin, and rutin) and solvent (water and ethanol), and then their cytocompatibility and ability to scavenge H2O2, free radicals, and LPS-induced ROS were compared. Zinc-rutin particles (W-ZnRT) composed of rutin (78.92 wt %), Na12[ZnPO4]12·12H2O (6.76 wt %), and crystal water were screened out because W-ZnRT exhibited 80.8 ± 15% cell viability against RAW264.7, could rapidly scavenge 78.1 ± 1% of H2O2 and 71.6 ± 2% of DPPH within 30 min, and reduced LPS-increased intracellular ROS to normal levels. In addition, the therapeutic effects of rutin and W-ZnRT were also compared in dextran sulfate sodium (DSS)-induced acute and chronic colitis in mice. W-ZnRT was superior to rutin alone in chronic colitis (n = 9), although they were equally effective in acute colitis (n = 7). Compared to rutin, 11 oral doses of W-ZnRT (40 mg kg-1) significantly improved intestinal permeability (p = 0.0299) and colon length (p = 0.0025), reduced intestinal proinflammatory factors (IL-6, IL-1β, and TNF-α), and upregulated tight junction proteins to maintain intestinal barrier function. Taken together, these results identified W-ZnRT as an efficient and safe therapeutic strategy for IBD.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2326]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Zinc-Rutin Particles Ameliorate DSS-Induced Acute and Chronic Colitis via Anti-inflammatory and Antioxidant Protection of the Intestinal Epithelial Barrier.\\nKeywords: antioxidant, anti-inflammation; flavonoids; inflammatory bowel diseases; zinc ions\\nPMID: 37581468\\nAbstract: In patients suffering from inflammatory bowel diseases (IBDs), the immune system is disrupted and the intestinal barrier function is compromised. Here, six zinc-flavonoid particles were produced by one-step reaction via changing flavonoids (myricetin, quercetin, and rutin) and solvent (water and ethanol), and then their cytocompatibility and ability to scavenge H2O2, free radicals, and LPS-induced ROS were compared. Zinc-rutin particles (W-ZnRT) composed of rutin (78.92 wt %), Na12[ZnPO4]12\\u00b712H2O (6.76 wt %), and crystal water were screened out because W-ZnRT exhibited 80.8 \\u00b1 15% cell viability against RAW264.7, could rapidly scavenge 78.1 \\u00b1 1% of H2O2 and 71.6 \\u00b1 2% of DPPH within 30 min, and reduced LPS-increased intracellular ROS to normal levels. In addition, the therapeutic effects of rutin and W-ZnRT were also compared in dextran sulfate sodium (DSS)-induced acute and chronic colitis in mice. W-ZnRT was superior to rutin alone in chronic colitis (n = 9), although they were equally effective in acute colitis (n = 7). Compared to rutin, 11 oral doses of W-ZnRT (40 mg kg-1) significantly improved intestinal permeability (p = 0.0299) and colon length (p = 0.0025), reduced intestinal proinflammatory factors (IL-6, IL-1\\u03b2, and TNF-\\u03b1), and upregulated tight junction proteins to maintain intestinal barrier function. Taken together, these results identified W-ZnRT as an efficient and safe therapeutic strategy for IBD.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9561 request_id=7e724f03efbc6c222e87e6c604a4c4da response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1342
INFO:root:RAW TEXT: subject: inflammatory bowel diseases (IBDs)
predicate: suffering from
object: disrupted immune system and compromised intestinal barrier function

subject: zinc-flavonoid particles
predicate: produced by
object: one-step reaction

subject: zinc-rutin particles (W-ZnRT)
predicate: composed of
object: rutin (78.92 wt %), Na12[ZnPO4]12·12H2O (6.76 wt %), and crystal water

subject: W-ZnRT
predicate: exhibited
object: 80.8 ± 15% cell viability against RAW264.7

subject: W-ZnRT
predicate: could rapidly scavenge
object: 78.1 ± 1% of H2O2 and 71.6 ± 2% of DPPH within 30 min

subject: W-ZnRT
predicate: reduced
object: LPS-increased intracellular ROS to normal levels

subject: rutin and W-ZnRT
predicate: compared in
object: dextran sulfate sodium (DSS)-induced acute and chronic colitis in mice

subject: W-ZnRT
predicate: superior to
object: rutin alone in chronic colitis

subject: oral doses of W-ZnRT (40 mg kg-1)
predicate: significantly improved
object: intestinal permeability (p = 0.0299) and colon length (p = 0.0025)

subject: W-ZnRT
predicate: reduced
object: intestinal proinflammatory factors (IL-6, IL-1β, and TNF-α)

subject: W-ZnRT
predicate: upregulated
object: tight junction proteins to maintain intestinal barrier function

subject: W-ZnRT
predicate: identified as
object: efficient and safe therapeutic strategy for IBD.
INFO:root:PARSING LINE: subject: inflammatory bowel diseases (IBDs)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel diseases (IBDs)']
INFO:root:PARSING LINE: predicate: suffering from
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['suffering from']
INFO:root:PARSING LINE: object: disrupted immune system and compromised intestinal barrier function
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['disrupted immune system and compromised intestinal barrier function']
INFO:root:PARSING LINE: subject: zinc-flavonoid particles
DEBUG:root:SLOT: subject INL: False VALS: ['zinc-flavonoid particles']
INFO:root:PARSING LINE: predicate: produced by
DEBUG:root:SLOT: predicate INL: False VALS: ['produced by']
INFO:root:PARSING LINE: object: one-step reaction
DEBUG:root:SLOT: object INL: False VALS: ['one-step reaction']
INFO:root:PARSING LINE: subject: zinc-rutin particles (W-ZnRT)
DEBUG:root:SLOT: subject INL: False VALS: ['zinc-rutin particles (W-ZnRT)']
INFO:root:PARSING LINE: predicate: composed of
DEBUG:root:SLOT: predicate INL: False VALS: ['composed of']
INFO:root:PARSING LINE: object: rutin (78.92 wt %), Na12[ZnPO4]12·12H2O (6.76 wt %), and crystal water
DEBUG:root:SLOT: object INL: False VALS: ['rutin (78.92 wt %), Na12[ZnPO4]12·12H2O (6.76 wt %), and crystal water']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: exhibited
DEBUG:root:SLOT: predicate INL: False VALS: ['exhibited']
INFO:root:PARSING LINE: object: 80.8 ± 15% cell viability against RAW264.7
DEBUG:root:SLOT: object INL: False VALS: ['80.8 ± 15% cell viability against RAW264.7']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: could rapidly scavenge
DEBUG:root:SLOT: predicate INL: False VALS: ['could rapidly scavenge']
INFO:root:PARSING LINE: object: 78.1 ± 1% of H2O2 and 71.6 ± 2% of DPPH within 30 min
DEBUG:root:SLOT: object INL: False VALS: ['78.1 ± 1% of H2O2 and 71.6 ± 2% of DPPH within 30 min']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: reduced
DEBUG:root:SLOT: predicate INL: False VALS: ['reduced']
INFO:root:PARSING LINE: object: LPS-increased intracellular ROS to normal levels
DEBUG:root:SLOT: object INL: False VALS: ['LPS-increased intracellular ROS to normal levels']
INFO:root:PARSING LINE: subject: rutin and W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['rutin and W-ZnRT']
INFO:root:PARSING LINE: predicate: compared in
DEBUG:root:SLOT: predicate INL: False VALS: ['compared in']
INFO:root:PARSING LINE: object: dextran sulfate sodium (DSS)-induced acute and chronic colitis in mice
DEBUG:root:SLOT: object INL: False VALS: ['dextran sulfate sodium (DSS)-induced acute and chronic colitis in mice']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: superior to
DEBUG:root:SLOT: predicate INL: False VALS: ['superior to']
INFO:root:PARSING LINE: object: rutin alone in chronic colitis
DEBUG:root:SLOT: object INL: False VALS: ['rutin alone in chronic colitis']
INFO:root:PARSING LINE: subject: oral doses of W-ZnRT (40 mg kg-1)
DEBUG:root:SLOT: subject INL: False VALS: ['oral doses of W-ZnRT (40 mg kg-1)']
INFO:root:PARSING LINE: predicate: significantly improved
DEBUG:root:SLOT: predicate INL: False VALS: ['significantly improved']
INFO:root:PARSING LINE: object: intestinal permeability (p = 0.0299) and colon length (p = 0.0025)
DEBUG:root:SLOT: object INL: False VALS: ['intestinal permeability (p = 0.0299) and colon length (p = 0.0025)']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: reduced
DEBUG:root:SLOT: predicate INL: False VALS: ['reduced']
INFO:root:PARSING LINE: object: intestinal proinflammatory factors (IL-6, IL-1β, and TNF-α)
DEBUG:root:SLOT: object INL: False VALS: ['intestinal proinflammatory factors (IL-6, IL-1β, and TNF-α)']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: upregulated
DEBUG:root:SLOT: predicate INL: False VALS: ['upregulated']
INFO:root:PARSING LINE: object: tight junction proteins to maintain intestinal barrier function
DEBUG:root:SLOT: object INL: False VALS: ['tight junction proteins to maintain intestinal barrier function']
INFO:root:PARSING LINE: subject: W-ZnRT
DEBUG:root:SLOT: subject INL: False VALS: ['W-ZnRT']
INFO:root:PARSING LINE: predicate: identified as
DEBUG:root:SLOT: predicate INL: False VALS: ['identified as']
INFO:root:PARSING LINE: object: efficient and safe therapeutic strategy for IBD.
DEBUG:root:SLOT: object INL: False VALS: ['efficient and safe therapeutic strategy for IBD.']
DEBUG:root:RAW: {'subject': 'W-ZnRT', 'predicate': 'identified as', 'object': 'efficient and safe therapeutic strategy for IBD.'}
DEBUG:root:Grounding annotation object {'subject': 'W-ZnRT', 'predicate': 'identified as', 'object': 'efficient and safe therapeutic strategy for IBD.'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING W-ZnRT using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize W-ZnRT to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING identified as using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized identified as to identified a
INFO:ontogpt.engines.knowledge_engine:GROUNDING identified a using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize identified as to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING efficient and safe therapeutic strategy for IBD. using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize efficient and safe therapeutic strategy for IBD. to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'W-ZnRT', 'predicate': 'identified as', 'object': 'efficient and safe therapeutic strategy for IBD.'}
INFO:root:{'subject': 'W-ZnRT', 'predicate': 'identified as', 'object': 'efficient and safe therapeutic strategy for IBD.'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Establishing key performance indicators for inflammatory bowel disease in the UK.
Keywords: Inflammatory bowel disease
PMID: 37581184
Abstract: Healthcare quality improvement (QI) is the systematic process to continuously improve the quality of care and outcomes for patients. The landmark Inflammatory Bowel Disease (IBD) UK National Audits provided a means to measure the variation in care, highlighting the need to define the standards of excellence in IBD care. Through a consensus approach, we aimed to establish key performance indicators (KPIs), providing reliable benchmarks for IBD care delivery in UK.KPIs that measure critical aspects of a patient journey within an IBD service were identified though stakeholder meetings. A two-stage Delphi consensus was then conducted. The first involved a multidisciplinary team of IBD clinicians and patients to refine definitions and methodology. The second stage assessed feasibility and utility of the proposed QI process by surveying gastroenterology services across UK.First, the four proposed KPIs were refined and included time from primary care referral to diagnosis in secondary care, time to treatment recommendation following a diagnosis, appropriate use of steroids and advanced therapies prescreening and assessment. Second, the Delphi consensus reported >85% agreement on the feasibility of local adoption of the QI process and >75% agreement on the utility of benchmarking of the KPIs.Through a structured approach, we propose quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK.© Author(s) (or their employer(s)) 2023. Re-use permitted under CC BY-NC. No commercial re-use. See rights and permissions. Published by BMJ.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2355]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Establishing key performance indicators for inflammatory bowel disease in the UK.\\nKeywords: Inflammatory bowel disease\\nPMID: 37581184\\nAbstract: Healthcare quality improvement (QI) is the systematic process to continuously improve the quality of care and outcomes for patients. The landmark Inflammatory Bowel Disease (IBD) UK National Audits provided a means to measure the variation in care, highlighting the need to define the standards of excellence in IBD care. Through a consensus approach, we aimed to establish key performance indicators (KPIs), providing reliable benchmarks for IBD care delivery in UK.KPIs that measure critical aspects of a patient journey within an IBD service were identified though stakeholder meetings. A two-stage Delphi consensus was then conducted. The first involved a multidisciplinary team of IBD clinicians and patients to refine definitions and methodology. The second stage assessed feasibility and utility of the proposed QI process by surveying gastroenterology services across UK.First, the four proposed KPIs were refined and included time from primary care referral to diagnosis in secondary care, time to treatment recommendation following a diagnosis, appropriate use of steroids and advanced therapies prescreening and assessment. Second, the Delphi consensus reported >85% agreement on the feasibility of local adoption of the QI process and >75% agreement on the utility of benchmarking of the KPIs.Through a structured approach, we propose quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK.\\u00a9 Author(s) (or their employer(s)) 2023. Re-use permitted under CC BY-NC. No commercial re-use. See rights and permissions. Published by BMJ.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6508 request_id=d514f0a832107813d31f01088f630d98 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1917
INFO:root:RAW TEXT: subject: Inflammatory bowel disease
predicate: measure
object: the variation in care
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Inflammatory bowel disease
predicate: define
object: the standards of excellence in IBD care
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: key performance indicators (KPIs)
predicate: establish
object: benchmarks for IBD care delivery in UK
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: KPIs
predicate: measure
object: critical aspects of a patient journey within an IBD service
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: KPIs
predicate: refine
object: time from primary care referral to diagnosis in secondary care
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: KPIs
predicate: refine
object: time to treatment recommendation following a diagnosis
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: KPIs
predicate: refine
object: appropriate use of steroids and advanced therapies prescreening and assessment
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Delphi consensus
predicate: assess
object: feasibility and utility of the proposed QI process
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Delphi consensus
predicate: report
object: >85% agreement on the feasibility of local adoption of the QI process
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Delphi consensus
predicate: report
object: >75% agreement on the utility of benchmarking of the KPIs
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: structured approach
predicate: propose
object: quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Inflammatory bowel disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease']
INFO:root:PARSING LINE: predicate: measure
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['measure']
INFO:root:PARSING LINE: object: the variation in care
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['the variation in care']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Inflammatory bowel disease
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease']
INFO:root:PARSING LINE: predicate: define
DEBUG:root:SLOT: predicate INL: False VALS: ['define']
INFO:root:PARSING LINE: object: the standards of excellence in IBD care
DEBUG:root:SLOT: object INL: False VALS: ['the standards of excellence in IBD care']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: key performance indicators (KPIs)
DEBUG:root:SLOT: subject INL: False VALS: ['key performance indicators (KPIs)']
INFO:root:PARSING LINE: predicate: establish
DEBUG:root:SLOT: predicate INL: False VALS: ['establish']
INFO:root:PARSING LINE: object: benchmarks for IBD care delivery in UK
DEBUG:root:SLOT: object INL: False VALS: ['benchmarks for IBD care delivery in UK']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: KPIs
DEBUG:root:SLOT: subject INL: False VALS: ['KPIs']
INFO:root:PARSING LINE: predicate: measure
DEBUG:root:SLOT: predicate INL: False VALS: ['measure']
INFO:root:PARSING LINE: object: critical aspects of a patient journey within an IBD service
DEBUG:root:SLOT: object INL: False VALS: ['critical aspects of a patient journey within an IBD service']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: KPIs
DEBUG:root:SLOT: subject INL: False VALS: ['KPIs']
INFO:root:PARSING LINE: predicate: refine
DEBUG:root:SLOT: predicate INL: False VALS: ['refine']
INFO:root:PARSING LINE: object: time from primary care referral to diagnosis in secondary care
DEBUG:root:SLOT: object INL: False VALS: ['time from primary care referral to diagnosis in secondary care']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: KPIs
DEBUG:root:SLOT: subject INL: False VALS: ['KPIs']
INFO:root:PARSING LINE: predicate: refine
DEBUG:root:SLOT: predicate INL: False VALS: ['refine']
INFO:root:PARSING LINE: object: time to treatment recommendation following a diagnosis
DEBUG:root:SLOT: object INL: False VALS: ['time to treatment recommendation following a diagnosis']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: KPIs
DEBUG:root:SLOT: subject INL: False VALS: ['KPIs']
INFO:root:PARSING LINE: predicate: refine
DEBUG:root:SLOT: predicate INL: False VALS: ['refine']
INFO:root:PARSING LINE: object: appropriate use of steroids and advanced therapies prescreening and assessment
DEBUG:root:SLOT: object INL: False VALS: ['appropriate use of steroids and advanced therapies prescreening and assessment']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Delphi consensus
DEBUG:root:SLOT: subject INL: False VALS: ['Delphi consensus']
INFO:root:PARSING LINE: predicate: assess
DEBUG:root:SLOT: predicate INL: False VALS: ['assess']
INFO:root:PARSING LINE: object: feasibility and utility of the proposed QI process
DEBUG:root:SLOT: object INL: False VALS: ['feasibility and utility of the proposed QI process']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Delphi consensus
DEBUG:root:SLOT: subject INL: False VALS: ['Delphi consensus']
INFO:root:PARSING LINE: predicate: report
DEBUG:root:SLOT: predicate INL: False VALS: ['report']
INFO:root:PARSING LINE: object: >85% agreement on the feasibility of local adoption of the QI process
DEBUG:root:SLOT: object INL: False VALS: ['>85% agreement on the feasibility of local adoption of the QI process']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Delphi consensus
DEBUG:root:SLOT: subject INL: False VALS: ['Delphi consensus']
INFO:root:PARSING LINE: predicate: report
DEBUG:root:SLOT: predicate INL: False VALS: ['report']
INFO:root:PARSING LINE: object: >75% agreement on the utility of benchmarking of the KPIs
DEBUG:root:SLOT: object INL: False VALS: ['>75% agreement on the utility of benchmarking of the KPIs']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: structured approach
DEBUG:root:SLOT: subject INL: False VALS: ['structured approach']
INFO:root:PARSING LINE: predicate: propose
DEBUG:root:SLOT: predicate INL: False VALS: ['propose']
INFO:root:PARSING LINE: object: quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK
DEBUG:root:SLOT: object INL: False VALS: ['quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'structured approach', 'predicate': 'propose', 'object': 'quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'structured approach', 'predicate': 'propose', 'object': 'quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING structured approach using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize structured approach to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING propose using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize propose to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'structured approach', 'predicate': 'propose', 'object': 'quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'structured approach', 'predicate': 'propose', 'object': 'quantifiable KPIs for benchmarking to improve and reduce the individual variation in IBD care across the UK', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Feasibility of in vivo magnetic resonance elastography of mesenteric adipose tissue in Crohn's disease.
Keywords: Crohn’s disease (CD); Inflammatory bowel disease; magnetic resonance elastography (MRE); magnetic resonance imaging (MRI); mesenteric adipose tissue (MAT)
PMID: 37581033
Abstract: Although there is growing evidence that functional involvement and structural changes of mesenteric adipose tissue (MAT) influence the course of Crohn's disease (CD), its viscoelastic properties remain elusive. Therefore, we aimed to investigate the viscoelastic properties of MAT in CD using magnetic resonance elastography (MRE), providing reference values for CD diagnosis.In this prospective proof-of-concept study, 31 subjects (CD: n=11; healthy controls: n=20) were consecutively enrolled in a specialized care center for inflammatory bowel diseases (tertiary/quaternary care). Inclusion criteria for the CD patients were a clinically and endoscopically established diagnosis of CD based on the clinical record, absence of other concurrent bowel diseases, scheduled surgery for the following day, and age of at least 18 years. Diagnoses were confirmed by histological analysis of the resected bowel the day after MRE. Subjects were investigated using MRE at 1.5-T with frequencies of 40-70 Hz. To retrieve shear wave speed (SWS), volumes of interest (VOIs) in MAT were drawn adjacent to CD lesions (MATCD) and on the opposite side without adjacent bowel lesions in patients (MATCD_Opp) and controls (MATCTRL). The presented study is not registered in the clinical trial platform.A statistically significant decrease in mean SWS of 7% was found for MATCD_Opp vs. MATCTRL (0.76±0.05 vs. 0.82±0.04 m/s, P=0.012), whereas there was a nonsignificant trend with an 8% increase for MATCD vs. MATCD_Opp (0.82±0.07 vs. 0.76±0.05 m/s, P=0.098) and no difference for MATCD vs. MATCTRL. Preliminary area under the receiver operating characteristic curve (AUC) analysis showed diagnostic accuracy in detecting CD to be excellent for SWS of MATCD_Opp [AUC =0.82; 95% confidence interval (CI): 0.64-0.96] but poor for SWS of MATCD (AUC =0.52; 95% CI: 0.34-0.73).This study demonstrates the feasibility of MRE of MAT and presents preliminary reference values for CD patients and healthy controls. Our results motivate further studies for the biophysical characterization of MAT in inflammatory bowel disease.2023 Quantitative Imaging in Medicine and Surgery. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3078]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Feasibility of in vivo magnetic resonance elastography of mesenteric adipose tissue in Crohn\'s disease.\\nKeywords: Crohn\\u2019s disease (CD); Inflammatory bowel disease; magnetic resonance elastography (MRE); magnetic resonance imaging (MRI); mesenteric adipose tissue (MAT)\\nPMID: 37581033\\nAbstract: Although there is growing evidence that functional involvement and structural changes of mesenteric adipose tissue (MAT) influence the course of Crohn\'s disease (CD), its viscoelastic properties remain elusive. Therefore, we aimed to investigate the viscoelastic properties of MAT in CD using magnetic resonance elastography (MRE), providing reference values for CD diagnosis.In this prospective proof-of-concept study, 31 subjects (CD: n=11; healthy controls: n=20) were consecutively enrolled in a specialized care center for inflammatory bowel diseases (tertiary/quaternary care). Inclusion criteria for the CD patients were a clinically and endoscopically established diagnosis of CD based on the clinical record, absence of other concurrent bowel diseases, scheduled surgery for the following day, and age of at least 18 years. Diagnoses were confirmed by histological analysis of the resected bowel the day after MRE. Subjects were investigated using MRE at 1.5-T with frequencies of 40-70 Hz. To retrieve shear wave speed (SWS), volumes of interest (VOIs) in MAT were drawn adjacent to CD lesions (MATCD) and on the opposite side without adjacent bowel lesions in patients (MATCD_Opp) and controls (MATCTRL). The presented study is not registered in the clinical trial platform.A statistically significant decrease in mean SWS of 7% was found for MATCD_Opp vs. MATCTRL (0.76\\u00b10.05 vs. 0.82\\u00b10.04 m/s, P=0.012), whereas there was a nonsignificant trend with an 8% increase for MATCD vs. MATCD_Opp (0.82\\u00b10.07 vs. 0.76\\u00b10.05 m/s, P=0.098) and no difference for MATCD vs. MATCTRL. Preliminary area under the receiver operating characteristic curve (AUC) analysis showed diagnostic accuracy in detecting CD to be excellent for SWS of MATCD_Opp [AUC =0.82; 95% confidence interval (CI): 0.64-0.96] but poor for SWS of MATCD (AUC =0.52; 95% CI: 0.34-0.73).This study demonstrates the feasibility of MRE of MAT and presents preliminary reference values for CD patients and healthy controls. Our results motivate further studies for the biophysical characterization of MAT in inflammatory bowel disease.2023 Quantitative Imaging in Medicine and Surgery. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5945 request_id=4e2608ac429de1a87c54f47f2f2461d3 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 951
INFO:root:RAW TEXT: subject: Crohn's disease
predicate: influence the course of
object: mesenteric adipose tissue

subject: mesenteric adipose tissue
predicate: remain elusive

subject: subjects
predicate: were investigated using
object: MRE

subject: shear wave speed
predicate: decrease
object: MATCD_Opp vs. MATCTRL

subject: shear wave speed
predicate: increase
object: MATCD vs. MATCD_Opp

subject: area under the receiver operating characteristic curve (AUC) analysis
predicate: showed diagnostic accuracy in detecting CD to be
object: excellent for SWS of MATCD_Opp

subject: area under the receiver operating characteristic curve (AUC) analysis
predicate: showed diagnostic accuracy
object: poor for SWS of MATCD

subject: study
predicate: demonstrates the feasibility of
object: MRE of MAT

subject: results
predicate: motivate
object: further studies

subject: mesenteric adipose tissue
predicate: biophysical characterization
object: inflammatory bowel disease
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: influence the course of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['influence the course of']
INFO:root:PARSING LINE: object: mesenteric adipose tissue
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['mesenteric adipose tissue']
INFO:root:PARSING LINE: subject: mesenteric adipose tissue
DEBUG:root:SLOT: subject INL: False VALS: ['mesenteric adipose tissue']
INFO:root:PARSING LINE: predicate: remain elusive
DEBUG:root:SLOT: predicate INL: False VALS: ['remain elusive']
INFO:root:PARSING LINE: subject: subjects
DEBUG:root:SLOT: subject INL: False VALS: ['subjects']
INFO:root:PARSING LINE: predicate: were investigated using
DEBUG:root:SLOT: predicate INL: False VALS: ['were investigated using']
INFO:root:PARSING LINE: object: MRE
DEBUG:root:SLOT: object INL: False VALS: ['MRE']
INFO:root:PARSING LINE: subject: shear wave speed
DEBUG:root:SLOT: subject INL: False VALS: ['shear wave speed']
INFO:root:PARSING LINE: predicate: decrease
DEBUG:root:SLOT: predicate INL: False VALS: ['decrease']
INFO:root:PARSING LINE: object: MATCD_Opp vs. MATCTRL
DEBUG:root:SLOT: object INL: False VALS: ['MATCD_Opp vs. MATCTRL']
INFO:root:PARSING LINE: subject: shear wave speed
DEBUG:root:SLOT: subject INL: False VALS: ['shear wave speed']
INFO:root:PARSING LINE: predicate: increase
DEBUG:root:SLOT: predicate INL: False VALS: ['increase']
INFO:root:PARSING LINE: object: MATCD vs. MATCD_Opp
DEBUG:root:SLOT: object INL: False VALS: ['MATCD vs. MATCD_Opp']
INFO:root:PARSING LINE: subject: area under the receiver operating characteristic curve (AUC) analysis
DEBUG:root:SLOT: subject INL: False VALS: ['area under the receiver operating characteristic curve (AUC) analysis']
INFO:root:PARSING LINE: predicate: showed diagnostic accuracy in detecting CD to be
DEBUG:root:SLOT: predicate INL: False VALS: ['showed diagnostic accuracy in detecting CD to be']
INFO:root:PARSING LINE: object: excellent for SWS of MATCD_Opp
DEBUG:root:SLOT: object INL: False VALS: ['excellent for SWS of MATCD_Opp']
INFO:root:PARSING LINE: subject: area under the receiver operating characteristic curve (AUC) analysis
DEBUG:root:SLOT: subject INL: False VALS: ['area under the receiver operating characteristic curve (AUC) analysis']
INFO:root:PARSING LINE: predicate: showed diagnostic accuracy
DEBUG:root:SLOT: predicate INL: False VALS: ['showed diagnostic accuracy']
INFO:root:PARSING LINE: object: poor for SWS of MATCD
DEBUG:root:SLOT: object INL: False VALS: ['poor for SWS of MATCD']
INFO:root:PARSING LINE: subject: study
DEBUG:root:SLOT: subject INL: False VALS: ['study']
INFO:root:PARSING LINE: predicate: demonstrates the feasibility of
DEBUG:root:SLOT: predicate INL: False VALS: ['demonstrates the feasibility of']
INFO:root:PARSING LINE: object: MRE of MAT
DEBUG:root:SLOT: object INL: False VALS: ['MRE of MAT']
INFO:root:PARSING LINE: subject: results
DEBUG:root:SLOT: subject INL: False VALS: ['results']
INFO:root:PARSING LINE: predicate: motivate
DEBUG:root:SLOT: predicate INL: False VALS: ['motivate']
INFO:root:PARSING LINE: object: further studies
DEBUG:root:SLOT: object INL: False VALS: ['further studies']
INFO:root:PARSING LINE: subject: mesenteric adipose tissue
DEBUG:root:SLOT: subject INL: False VALS: ['mesenteric adipose tissue']
INFO:root:PARSING LINE: predicate: biophysical characterization
DEBUG:root:SLOT: predicate INL: False VALS: ['biophysical characterization']
INFO:root:PARSING LINE: object: inflammatory bowel disease
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel disease']
DEBUG:root:RAW: {'subject': 'mesenteric adipose tissue', 'predicate': 'biophysical characterization', 'object': 'inflammatory bowel disease'}
DEBUG:root:Grounding annotation object {'subject': 'mesenteric adipose tissue', 'predicate': 'biophysical characterization', 'object': 'inflammatory bowel disease'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING mesenteric adipose tissue using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize mesenteric adipose tissue to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING biophysical characterization using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize biophysical characterization to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING inflammatory bowel disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize inflammatory bowel disease to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'mesenteric adipose tissue', 'predicate': 'biophysical characterization', 'object': 'inflammatory bowel disease'}
INFO:root:{'subject': 'mesenteric adipose tissue', 'predicate': 'biophysical characterization', 'object': 'inflammatory bowel disease'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Recalcitrant Pyoderma Gangrenosum: Clinical Burden and Unmet Needs.
Keywords: biologics; pyoderma gangrenosum; recalcitrant; refractory; resistant
PMID: 37581011
Abstract: Pyoderma gangrenosum (PG) is a rare, autoinflammatory disease leading to aseptic ulcers which carries a significant disease burden and is often difficult to treat, with many patients failing first-line treatment and requiring additional therapies. Such cases are typically referred to in the literature as "recalcitrant", "refractory", or "resistant", though little is known about the clinical characteristics of such cases. We performed a narrative literature review to characterize patient demographics and clinical course associated with difficult to treat pyoderma gangrenosum cases in order to identify trends to guide future clinical management and therapeutic innovation. We identified 148 cases with clinical manifestations and associated patient demographics stratified by ulcer and patient features. Consistent with previous work, a greater prevalence of PG was observed among female patients and those with a history of inflammatory bowel disease, however interestingly despite an aggressive course to their PG, few patients had comorbidities complicating their disease course. Additionally, despite the requirement of three or more treatments for most patients' disease to resolve, the majority healed within the typical window observed in previous clinical studies with low rates of recurrence. Biologics were the most common medication patients were on at time of remission. Collectively, our results suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions.© 2023 Becker et al.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2432]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Recalcitrant Pyoderma Gangrenosum: Clinical Burden and Unmet Needs.\\nKeywords: biologics; pyoderma gangrenosum; recalcitrant; refractory; resistant\\nPMID: 37581011\\nAbstract: Pyoderma gangrenosum (PG) is a rare, autoinflammatory disease leading to aseptic ulcers which carries a significant disease burden and is often difficult to treat, with many patients failing first-line treatment and requiring additional therapies. Such cases are typically referred to in the literature as \\"recalcitrant\\", \\"refractory\\", or \\"resistant\\", though little is known about the clinical characteristics of such cases. We performed a narrative literature review to characterize patient demographics and clinical course associated with difficult to treat pyoderma gangrenosum cases in order to identify trends to guide future clinical management and therapeutic innovation. We identified 148 cases with clinical manifestations and associated patient demographics stratified by ulcer and patient features. Consistent with previous work, a greater prevalence of PG was observed among female patients and those with a history of inflammatory bowel disease, however interestingly despite an aggressive course to their PG, few patients had comorbidities complicating their disease course. Additionally, despite the requirement of three or more treatments for most patients\' disease to resolve, the majority healed within the typical window observed in previous clinical studies with low rates of recurrence. Biologics were the most common medication patients were on at time of remission. Collectively, our results suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions.\\u00a9 2023 Becker et al.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=15223 request_id=a473550c139445d00615e7509c8f7cb6 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 2210
INFO:root:RAW TEXT: subject: Pyoderma gangrenosum
predicate: is a rare, autoinflammatory disease leading to aseptic ulcers
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: cases
predicate: are typically referred to in the literature as "recalcitrant", "refractory", or "resistant"
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: patients
predicate: failing first-line treatment and requiring additional therapies
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: cases
predicate: characterize patient demographics and clinical course associated with difficult to treat pyoderma gangrenosum
object: None
qualifier: None
subject_qualifier: None
object_qualifier: difficult to treat

subject: we
predicate: performed a narrative literature review
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: we
predicate: identified 148 cases with clinical manifestations and associated patient demographics stratified by ulcer and patient features
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: prevalence of PG
predicate: was observed among female patients and those with a history of inflammatory bowel disease
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: patients
predicate: had comorbidities complicating their disease course
object: None
qualifier: None
subject_qualifier: None
object_qualifier: comorbidities

subject: majority
predicate: healed within the typical window observed in previous clinical studies with low rates of recurrence
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: Biologics
predicate: were the most common medication patients were on at time of remission
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None

subject: our results
predicate: suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions
object: None
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Pyoderma gangrenosum
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Pyoderma gangrenosum']
INFO:root:PARSING LINE: predicate: is a rare, autoinflammatory disease leading to aseptic ulcers
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is a rare, autoinflammatory disease leading to aseptic ulcers']
INFO:root:PARSING LINE: object: None
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: cases
DEBUG:root:SLOT: subject INL: False VALS: ['cases']
INFO:root:PARSING LINE: predicate: are typically referred to in the literature as "recalcitrant", "refractory", or "resistant"
DEBUG:root:SLOT: predicate INL: False VALS: ['are typically referred to in the literature as "recalcitrant", "refractory", or "resistant"']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: failing first-line treatment and requiring additional therapies
DEBUG:root:SLOT: predicate INL: False VALS: ['failing first-line treatment and requiring additional therapies']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: cases
DEBUG:root:SLOT: subject INL: False VALS: ['cases']
INFO:root:PARSING LINE: predicate: characterize patient demographics and clinical course associated with difficult to treat pyoderma gangrenosum
DEBUG:root:SLOT: predicate INL: False VALS: ['characterize patient demographics and clinical course associated with difficult to treat pyoderma gangrenosum']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: difficult to treat
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['difficult to treat']
INFO:root:PARSING LINE: subject: we
DEBUG:root:SLOT: subject INL: False VALS: ['we']
INFO:root:PARSING LINE: predicate: performed a narrative literature review
DEBUG:root:SLOT: predicate INL: False VALS: ['performed a narrative literature review']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: we
DEBUG:root:SLOT: subject INL: False VALS: ['we']
INFO:root:PARSING LINE: predicate: identified 148 cases with clinical manifestations and associated patient demographics stratified by ulcer and patient features
DEBUG:root:SLOT: predicate INL: False VALS: ['identified 148 cases with clinical manifestations and associated patient demographics stratified by ulcer and patient features']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: prevalence of PG
DEBUG:root:SLOT: subject INL: False VALS: ['prevalence of PG']
INFO:root:PARSING LINE: predicate: was observed among female patients and those with a history of inflammatory bowel disease
DEBUG:root:SLOT: predicate INL: False VALS: ['was observed among female patients and those with a history of inflammatory bowel disease']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: had comorbidities complicating their disease course
DEBUG:root:SLOT: predicate INL: False VALS: ['had comorbidities complicating their disease course']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: comorbidities
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['comorbidities']
INFO:root:PARSING LINE: subject: majority
DEBUG:root:SLOT: subject INL: False VALS: ['majority']
INFO:root:PARSING LINE: predicate: healed within the typical window observed in previous clinical studies with low rates of recurrence
DEBUG:root:SLOT: predicate INL: False VALS: ['healed within the typical window observed in previous clinical studies with low rates of recurrence']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: Biologics
DEBUG:root:SLOT: subject INL: False VALS: ['Biologics']
INFO:root:PARSING LINE: predicate: were the most common medication patients were on at time of remission
DEBUG:root:SLOT: predicate INL: False VALS: ['were the most common medication patients were on at time of remission']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: our results
DEBUG:root:SLOT: subject INL: False VALS: ['our results']
INFO:root:PARSING LINE: predicate: suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions
DEBUG:root:SLOT: predicate INL: False VALS: ['suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions']
INFO:root:PARSING LINE: object: None
DEBUG:root:SLOT: object INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'our results', 'predicate': 'suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions', 'object': 'None', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'our results', 'predicate': 'suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions', 'object': 'None', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING our results using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized our results to our result
INFO:ontogpt.engines.knowledge_engine:GROUNDING our result using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize our results to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions to suggest a potential benefit for a reduced threshold for biologic initiation in pg patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and intervention
INFO:ontogpt.engines.knowledge_engine:GROUNDING suggest a potential benefit for a reduced threshold for biologic initiation in pg patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and intervention using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'our results', 'predicate': 'suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions', 'object': 'None', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'our results', 'predicate': 'suggest a potential benefit for a reduced threshold for biologic initiation in PG patients and a need for standardization of language in the field to facilitate treatment outcomes comparisons and interventions', 'object': 'None', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Cannabis Use in IBD Is Associated With Increased Healthcare Utilization but not With Surgery or Death.
Keywords: 
PMID: 37580879
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[754]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Cannabis Use in IBD Is Associated With Increased Healthcare Utilization but not With Surgery or Death.\\nKeywords: \\nPMID: 37580879\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1172 request_id=276b12582774cd7fd9502f4ddc1569af response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 152
INFO:root:RAW TEXT: subject: Cannabis Use in IBD
predicate: Is Associated With
object: Increased Healthcare Utilization
qualifier: not
subject_qualifier: 
object_qualifier:
INFO:root:PARSING LINE: subject: Cannabis Use in IBD
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Cannabis Use in IBD']
INFO:root:PARSING LINE: predicate: Is Associated With
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['Is Associated With']
INFO:root:PARSING LINE: object: Increased Healthcare Utilization
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['Increased Healthcare Utilization']
INFO:root:PARSING LINE: qualifier: not
DEBUG:root:SLOT: qualifier INL: None VALS: ['not']
INFO:root:PARSING LINE: subject_qualifier:
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:RAW: {'subject': 'Cannabis Use in IBD', 'predicate': 'Is Associated With', 'object': 'Increased Healthcare Utilization', 'qualifier': 'not'}
DEBUG:root:Grounding annotation object {'subject': 'Cannabis Use in IBD', 'predicate': 'Is Associated With', 'object': 'Increased Healthcare Utilization', 'qualifier': 'not'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Cannabis Use in IBD using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Cannabis Use in IBD to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING Is Associated With using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Is Associated With to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING Increased Healthcare Utilization using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Increased Healthcare Utilization to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'Cannabis Use in IBD', 'predicate': 'Is Associated With', 'object': 'Increased Healthcare Utilization', 'qualifier': 'not'}
INFO:root:{'subject': 'Cannabis Use in IBD', 'predicate': 'Is Associated With', 'object': 'Increased Healthcare Utilization', 'qualifier': 'not'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: The Impact of Cannabis Use on Clinical Outcomes in Inflammatory Bowel Disease: A Population-based Longitudinal Cohort Study.
Keywords: Crohn’s disease; cannabis; inflammatory bowel disease; ulcerative colitis
PMID: 37580878
Abstract: Cannabis use is common in inflammatory bowel disease (IBD). Recent studies demonstrated that use of cannabis may relieve symptoms; however, it is still unclear how safe cannabis and its derivatives are for IBD patients. We performed this study to evaluate the impact of cannabis use on several key clinical outcomes in IBD.We performed a retrospective study using the TriNetX Diamond Network. Cannabis use and noncannabis use subcohorts were identified for 3 patient groups: (1) IBD, (2) Crohn's disease (CD), and (3) ulcerative colitis (UC). Baseline differences between subcohorts for each group were controlled by propensity score matching. In each group, we compared relative incidence of emergency department (ED) visits, hospitalization, corticosteroid use, opioid use, IBD-related surgery, and death between cannabis users and noncannabis users.Inflammatory bowel disease cannabis users demonstrated an increased risk for corticosteroid use (risk ratios [R],1.095; 95% CI, 1.021-1.174; P = .011), ED visits (RR, 2.143; 95% CI, 2.034-2.257; P < .001), hospitalizations (RR, 1.925; 95% CI, 1.783-2.079; P < .001) and opioid use (RR, 1.35; 95% CI, 1.14-1.6); P < .001), but not an increased risk of IBD-related surgery or death. The CD and UC groups exhibited similar outcomes, except only CD demonstrated an increased risk for corticosteroid and opioid use.Cannabis use in IBD patients is associated with several poor clinical outcomes, including increased risk of corticosteroid and opioid use, ED visits and hospitalization, though not IBD-related surgery or death. It is not clear what drives these risks or whether they are directly related to IBD-associated disease activity or other factors. Further prospective studies are warranted to more carefully investigate these relationships.© The Author(s) 2023. Published by Oxford University Press on behalf of Crohn’s & Colitis Foundation. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2828]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: The Impact of Cannabis Use on Clinical Outcomes in Inflammatory Bowel Disease: A Population-based Longitudinal Cohort Study.\\nKeywords: Crohn\\u2019s disease; cannabis; inflammatory bowel disease; ulcerative colitis\\nPMID: 37580878\\nAbstract: Cannabis use is common in inflammatory bowel disease (IBD). Recent studies demonstrated that use of cannabis may relieve symptoms; however, it is still unclear how safe cannabis and its derivatives are for IBD patients. We performed this study to evaluate the impact of cannabis use on several key clinical outcomes in IBD.We performed a retrospective study using the TriNetX Diamond Network. Cannabis use and noncannabis use subcohorts were identified for 3 patient groups: (1) IBD, (2) Crohn\'s disease (CD), and (3) ulcerative colitis (UC). Baseline differences between subcohorts for each group were controlled by propensity score matching. In each group, we compared relative incidence of emergency department (ED) visits, hospitalization, corticosteroid use, opioid use, IBD-related surgery, and death between cannabis users and noncannabis users.Inflammatory bowel disease cannabis users demonstrated an increased risk for corticosteroid use (risk ratios [R],1.095; 95% CI, 1.021-1.174; P = .011), ED visits (RR, 2.143; 95% CI, 2.034-2.257; P < .001), hospitalizations (RR, 1.925; 95% CI, 1.783-2.079; P < .001) and opioid use (RR, 1.35; 95% CI, 1.14-1.6); P < .001), but not an increased risk of IBD-related surgery or death. The CD and UC groups exhibited similar outcomes, except only CD demonstrated an increased risk for corticosteroid and opioid use.Cannabis use in IBD patients is associated with several poor clinical outcomes, including increased risk of corticosteroid and opioid use, ED visits and hospitalization, though not IBD-related surgery or death. It is not clear what drives these risks or whether they are directly related to IBD-associated disease activity or other factors. Further prospective studies are warranted to more carefully investigate these relationships.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of Crohn\\u2019s & Colitis Foundation. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=640 request_id=3491b5c59c6043c35bff42f6f3cab8e8 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 103
INFO:root:RAW TEXT: subject: cannabis use
predicate: is associated with
object: poor clinical outcomes
qualifier: not clear
INFO:root:PARSING LINE: subject: cannabis use
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['cannabis use']
INFO:root:PARSING LINE: predicate: is associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: object: poor clinical outcomes
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['poor clinical outcomes']
INFO:root:PARSING LINE: qualifier: not clear
DEBUG:root:SLOT: qualifier INL: None VALS: ['not clear']
DEBUG:root:RAW: {'subject': 'cannabis use', 'predicate': 'is associated with', 'object': 'poor clinical outcomes', 'qualifier': 'not clear'}
DEBUG:root:Grounding annotation object {'subject': 'cannabis use', 'predicate': 'is associated with', 'object': 'poor clinical outcomes', 'qualifier': 'not clear'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING cannabis use using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize cannabis use to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING is associated with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is associated with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING poor clinical outcomes using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized poor clinical outcomes to poor clinical outcome
INFO:ontogpt.engines.knowledge_engine:GROUNDING poor clinical outcome using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize poor clinical outcomes to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'cannabis use', 'predicate': 'is associated with', 'object': 'poor clinical outcomes', 'qualifier': 'not clear'}
INFO:root:{'subject': 'cannabis use', 'predicate': 'is associated with', 'object': 'poor clinical outcomes', 'qualifier': 'not clear'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Adherence to ECCO Guidelines for Management of Iron Deficiency and Anemia in Inflammatory Bowel Diseases Among Israeli Adult and Pediatric Gastroenterologists.
Keywords: 
PMID: 37580868
Abstract: The consensus guidelines of the European Crohn's and Colitis Organization (ECCO) for the diagnosis and treatment of iron deficiency anemia (IDA), were published in 2015. We examined the management practices of both adult gastroenterologists (AGs) and pediatric gastroenterologists (PGs) in Israel in treating ID among patients with inflammatory bowel disease (IBD).An 18-question multiple-choice anonymous questionnaire was electronically delivered to AGs and APs. Questions explored three areas of interest: physician demographics, adherence to ECCO guidelines, and management practices of IDA in patients with IBD.Completed questionnaires were returned by 72 AGs and 89 PGs. Practice setting and years of practice were similar. A large majority of AGs and PGs (89% and 92%, respectively) measure complete blood count (CBC) and serum ferritin (S-Fr) at least every three months in outpatients with active IBD, as recommended by the ECCO guidelines. In contrast, in IBD patients in remission, only 53% and 26% of AGs and PGs, respectively (p<0.001), reported adherence to ECCO guidelines, measuring CBC and S-Fr every six months. The ECCO treatment guidelines recommend that intravenous (IV) iron should be considered the first-line treatment in patients with clinically active IBD, with previous oral iron intolerance and those with a hemoglobin level <10g/dL. Study results indicate that only 43% of AGs recommend IV iron for these indications, compared to 54% of PGs (p>0.1).In this study we have demonstrated a relatively low level of adherence to ECCO guideline recommendations among both AGs and PGs, regarding the management of IDA in patients with IBD.Copyright © 2023 by European Society for European Society for Pediatric Gastroenterology, Hepatology, and Nutrition and North American Society for Pediatric Gastroenterology, Hepatology, and Nutrition.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2672]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Adherence to ECCO Guidelines for Management of Iron Deficiency and Anemia in Inflammatory Bowel Diseases Among Israeli Adult and Pediatric Gastroenterologists.\\nKeywords: \\nPMID: 37580868\\nAbstract: The consensus guidelines of the European Crohn\'s and Colitis Organization (ECCO) for the diagnosis and treatment of iron deficiency anemia (IDA), were published in 2015. We examined the management practices of both adult gastroenterologists (AGs) and pediatric gastroenterologists (PGs) in Israel in treating ID among patients with inflammatory bowel disease (IBD).An 18-question multiple-choice anonymous questionnaire was electronically delivered to AGs and APs. Questions explored three areas of interest: physician demographics, adherence to ECCO guidelines, and management practices of IDA in patients with IBD.Completed questionnaires were returned by 72 AGs and 89 PGs. Practice setting and years of practice were similar. A large majority of AGs and PGs (89% and 92%, respectively) measure complete blood count (CBC) and serum ferritin (S-Fr) at least every three months in outpatients with active IBD, as recommended by the ECCO guidelines. In contrast, in IBD patients in remission, only 53% and 26% of AGs and PGs, respectively (p<0.001), reported adherence to ECCO guidelines, measuring CBC and S-Fr every six months. The ECCO treatment guidelines recommend that intravenous (IV) iron should be considered the first-line treatment in patients with clinically active IBD, with previous oral iron intolerance and those with a hemoglobin level <10g/dL. Study results indicate that only 43% of AGs recommend IV iron for these indications, compared to 54% of PGs (p>0.1).In this study we have demonstrated a relatively low level of adherence to ECCO guideline recommendations among both AGs and PGs, regarding the management of IDA in patients with IBD.Copyright \\u00a9 2023 by European Society for European Society for Pediatric Gastroenterology, Hepatology, and Nutrition and North American Society for Pediatric Gastroenterology, Hepatology, and Nutrition.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1597 request_id=6f307642d27a84285bd5a7e58a73bea4 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 189
INFO:root:RAW TEXT: subject: inflammatory bowel disease (IBD)
predicate: treated with 
object: iron deficiency anemia (IDA)
qualifier: NOT (in the last statement)
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: inflammatory bowel disease (IBD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: treated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['treated with']
INFO:root:PARSING LINE: object: iron deficiency anemia (IDA)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['iron deficiency anemia (IDA)']
INFO:root:PARSING LINE: qualifier: NOT (in the last statement)
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT (in the last statement)']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'inflammatory bowel disease (IBD)', 'predicate': 'treated with', 'object': 'iron deficiency anemia (IDA)', 'qualifier': 'NOT (in the last statement)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'inflammatory bowel disease (IBD)', 'predicate': 'treated with', 'object': 'iron deficiency anemia (IDA)', 'qualifier': 'NOT (in the last statement)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING inflammatory bowel disease (IBD) using Disease
INFO:ontogpt.engines.knowledge_engine:inflammatory bowel disease (ibd) =>paren=> ['ibd']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF ibd from ['ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING ibd using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Grounding inflammatory bowel disease (IBD) to MONDO:0005052; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized inflammatory bowel disease (IBD) with MONDO:0005052 to MONDO:0005052
INFO:ontogpt.engines.knowledge_engine:GROUNDING treated with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize treated with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING iron deficiency anemia (IDA) using CellularProcess
INFO:ontogpt.engines.knowledge_engine:iron deficiency anemia (ida) =>paren=> ['ida']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF ida from ['ida']
INFO:ontogpt.engines.knowledge_engine:GROUNDING ida using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:iron deficiency anemia (ida) =>trimmed=> iron deficiency anemia; in ['ida']
INFO:ontogpt.engines.knowledge_engine:GROUNDING iron deficiency anemia using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized iron deficiency anemia to iron deficiency anemium
INFO:ontogpt.engines.knowledge_engine:GROUNDING iron deficiency anemium using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize iron deficiency anemia (IDA) to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005052', 'predicate': 'treated with', 'object': 'iron deficiency anemia (IDA)', 'qualifier': 'NOT (in the last statement)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'MONDO:0005052', 'predicate': 'treated with', 'object': 'iron deficiency anemia (IDA)', 'qualifier': 'NOT (in the last statement)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Inhibition of GSDMD-mediated pyroptosis triggered by Trichinella spiralis intervention contributes to the alleviation of DSS-induced ulcerative colitis in mice.
Keywords: GSDMD-mediated pyroptosis; Inhibition; Protective effect; Trichinella spiralis; Ulcerative colitis
PMID: 37580819
Abstract: Inflammatory bowel disease (IBD), including Crohn's disease (CD) and ulcerative colitis (UC), is increasing worldwide. Although there is currently no completely curative treatment, helminthic therapy shows certain therapeutic potential for UC. Many studies have found that Trichinella spiralis (T.s) has a protective effect on UC, but the specific mechanism is still unclear.Balb/c mice drank dextran sulfate sodium (DSS) to induce acute colitis and then were treated with T.s. In vitro experiments, the LPS combination with ATP was used to induce the pyroptosis model, followed by intervention with crude protein from T.s (T.s cp). Additionally, the pyroptosis agonist of NSC or the pyroptosis inhibitor vx-765 was added to intervene to explore the role of pyroptosis in DSS-induced acute colitis. The degree of pyroptosis was evaluated by western blot, qPCR and IHC, etc., in vivo and in vitro.T.s intervention significantly inhibited NLRP3 inflammasome activation and GSDMD-mediated pyroptosis by downregulating the expression of pyroptosis-related signatures in vitro (cellular inflammatory model) and in vivo (DSS-induced UC mice model). Furthermore, blockade of GSDMD-mediated pyroptosis by the caspase-1 inhibitor vx-765 has a similar therapeutic effect on DSS-induced UC mice with T.s intervention, thus indicating that T.s intervention alleviated DSS-induced UC in mice by inhibiting GSDMD-mediated pyroptosis.This study showed that T.s could alleviate the pathological severity UC via GSDMD-mediated pyroptosis, and it provides new insight into the mechanistic study and application of helminths in treating colitis.© 2023. BioMed Central Ltd., part of Springer Nature.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2589]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Inhibition of GSDMD-mediated pyroptosis triggered by Trichinella spiralis intervention contributes to the alleviation of DSS-induced ulcerative colitis in mice.\\nKeywords: GSDMD-mediated pyroptosis; Inhibition; Protective effect; Trichinella spiralis; Ulcerative colitis\\nPMID: 37580819\\nAbstract: Inflammatory bowel disease (IBD), including Crohn\'s disease (CD) and ulcerative colitis (UC), is increasing worldwide. Although there is currently no completely curative treatment, helminthic therapy shows certain therapeutic potential for UC. Many studies have found that Trichinella spiralis (T.s) has a protective effect on UC, but the specific mechanism is still unclear.Balb/c mice drank dextran sulfate sodium (DSS) to induce acute colitis and then were treated with T.s. In vitro experiments, the LPS combination with ATP was used to induce the pyroptosis model, followed by intervention with crude protein from T.s (T.s cp). Additionally, the pyroptosis agonist of NSC or the pyroptosis inhibitor vx-765 was added to intervene to explore the role of pyroptosis in DSS-induced acute colitis. The degree of pyroptosis was evaluated by western blot, qPCR and IHC, etc., in vivo and in vitro.T.s intervention significantly inhibited NLRP3 inflammasome activation and GSDMD-mediated pyroptosis by downregulating the expression of pyroptosis-related signatures in vitro (cellular inflammatory model) and in vivo (DSS-induced UC mice model). Furthermore, blockade of GSDMD-mediated pyroptosis by the caspase-1 inhibitor vx-765 has a similar therapeutic effect on DSS-induced UC mice with T.s intervention, thus indicating that T.s intervention alleviated DSS-induced UC in mice by inhibiting GSDMD-mediated pyroptosis.This study showed that T.s could alleviate the pathological severity UC via GSDMD-mediated pyroptosis, and it provides new insight into the mechanistic study and application of helminths in treating colitis.\\u00a9 2023. BioMed Central Ltd., part of Springer Nature.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3224 request_id=73615d7b78f29a9afaba66c4ee8df152 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 490
INFO:root:RAW TEXT: subject: T.s intervention
predicate: alleviated
object: DSS-induced UC in mice

subject: T.s intervention
predicate: inhibiting
object: GSDMD-mediated pyroptosis

subject: T.s
predicate: has
object: protective effect

subject: T.s intervention
predicate: showed
object: therapeutic effect on DSS-induced UC mice

subject: T.s
predicate: alleviated
object: pathological severity UC

subject: T.s
predicate: provides
object: new insight into the mechanistic study and application of helminths
INFO:root:PARSING LINE: subject: T.s intervention
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['T.s intervention']
INFO:root:PARSING LINE: predicate: alleviated
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['alleviated']
INFO:root:PARSING LINE: object: DSS-induced UC in mice
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['DSS-induced UC in mice']
INFO:root:PARSING LINE: subject: T.s intervention
DEBUG:root:SLOT: subject INL: False VALS: ['T.s intervention']
INFO:root:PARSING LINE: predicate: inhibiting
DEBUG:root:SLOT: predicate INL: False VALS: ['inhibiting']
INFO:root:PARSING LINE: object: GSDMD-mediated pyroptosis
DEBUG:root:SLOT: object INL: False VALS: ['GSDMD-mediated pyroptosis']
INFO:root:PARSING LINE: subject: T.s
DEBUG:root:SLOT: subject INL: False VALS: ['T.s']
INFO:root:PARSING LINE: predicate: has
DEBUG:root:SLOT: predicate INL: False VALS: ['has']
INFO:root:PARSING LINE: object: protective effect
DEBUG:root:SLOT: object INL: False VALS: ['protective effect']
INFO:root:PARSING LINE: subject: T.s intervention
DEBUG:root:SLOT: subject INL: False VALS: ['T.s intervention']
INFO:root:PARSING LINE: predicate: showed
DEBUG:root:SLOT: predicate INL: False VALS: ['showed']
INFO:root:PARSING LINE: object: therapeutic effect on DSS-induced UC mice
DEBUG:root:SLOT: object INL: False VALS: ['therapeutic effect on DSS-induced UC mice']
INFO:root:PARSING LINE: subject: T.s
DEBUG:root:SLOT: subject INL: False VALS: ['T.s']
INFO:root:PARSING LINE: predicate: alleviated
DEBUG:root:SLOT: predicate INL: False VALS: ['alleviated']
INFO:root:PARSING LINE: object: pathological severity UC
DEBUG:root:SLOT: object INL: False VALS: ['pathological severity UC']
INFO:root:PARSING LINE: subject: T.s
DEBUG:root:SLOT: subject INL: False VALS: ['T.s']
INFO:root:PARSING LINE: predicate: provides
DEBUG:root:SLOT: predicate INL: False VALS: ['provides']
INFO:root:PARSING LINE: object: new insight into the mechanistic study and application of helminths
DEBUG:root:SLOT: object INL: False VALS: ['new insight into the mechanistic study and application of helminths']
DEBUG:root:RAW: {'subject': 'T.s', 'predicate': 'provides', 'object': 'new insight into the mechanistic study and application of helminths'}
DEBUG:root:Grounding annotation object {'subject': 'T.s', 'predicate': 'provides', 'object': 'new insight into the mechanistic study and application of helminths'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING T.s using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized T.s to t.
INFO:ontogpt.engines.knowledge_engine:GROUNDING t. using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize T.s to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING provides using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized provides to provide
INFO:ontogpt.engines.knowledge_engine:GROUNDING provide using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize provides to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING new insight into the mechanistic study and application of helminths using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized new insight into the mechanistic study and application of helminths to new insight into the mechanistic study and application of helminth
INFO:ontogpt.engines.knowledge_engine:GROUNDING new insight into the mechanistic study and application of helminth using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize new insight into the mechanistic study and application of helminths to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'T.s', 'predicate': 'provides', 'object': 'new insight into the mechanistic study and application of helminths'}
INFO:root:{'subject': 'T.s', 'predicate': 'provides', 'object': 'new insight into the mechanistic study and application of helminths'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Natural compound fraxinellone ameliorates intestinal fibrosis in mice via direct intervention of HSP47-collagen interaction in the epithelium.
Keywords: HSP47; antifibrotic drugs; collagen; fraxinellone; inflammatory bowel disease; intestinal fibrosis
PMID: 37580493
Abstract: Intestinal fibrosis is a common complication of inflammatory bowel disease. There is still a lack of effective drugs for the prevention or treatment of intestinal fibrosis. Heat shock protein 47 (HSP47) plays a key role in the development of intestinal fibrosis. In this study we investigated the therapeutic potential and underlying mechanisms of fraxinellone, a degraded limonoid isolated from the root bark of Dictamnus dasycarpus, in the treatment of intestinal fibrosis. Intestinal fibrosis was induced in mice by dextran sodium sulfate (DSS) treatment. DDS-treated mice were administered fraxinellone (7.5, 15, 30 mg·kg-1·d-1, i.g.) for 45 days. We showed that fraxinellone administration dose-dependently alleviated DSS-induced intestinal impairments, and reduced the production of intestinal fibrosis biomarkers such as α-smooth muscle actin (SMA), collagen I, hydroxyproline, fibronectin and laminin, and cytokines such as TGF-β, TNF-α and IL-β. We then established in vitro intestinal fibrosis cell models in SW480 and HT-29 cells, and demonstrated that treatment with fraxinellone (3, 10, 30 μM) significantly relieved TGF-β-induced fibrosis responses by inhibiting the TGF-β/Smad2/3 signaling pathway. Molecular docking suggested that the fraxinellone might disrupt the interaction between HSP47 and collagen, which was confirmed by coimmunoprecipitation experiments. SPR analysis showed that fraxinellone had a high affinity for HSP47 with a Kd value of 3.542 × 10-5 M. This study provides a new example of HSP47-collagen intervention by a natural compound and has important implications for the clinical treatment of inflammation-induced issue fibrosis.© 2023. The Author(s), under exclusive licence to Shanghai Institute of Materia Medica, Chinese Academy of Sciences and Chinese Pharmacological Society.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2711]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Natural compound fraxinellone ameliorates intestinal fibrosis in mice via direct intervention of HSP47-collagen interaction in the epithelium.\\nKeywords: HSP47; antifibrotic drugs; collagen; fraxinellone; inflammatory bowel disease; intestinal fibrosis\\nPMID: 37580493\\nAbstract: Intestinal fibrosis is a common complication of inflammatory bowel disease. There is still a lack of effective drugs for the prevention or treatment of intestinal fibrosis. Heat shock protein 47 (HSP47) plays a key role in the development of intestinal fibrosis. In this study we investigated the therapeutic potential and underlying mechanisms of fraxinellone, a degraded limonoid isolated from the root bark of Dictamnus dasycarpus, in the treatment of intestinal fibrosis. Intestinal fibrosis was induced in mice by dextran sodium sulfate (DSS) treatment. DDS-treated mice were administered fraxinellone (7.5, 15, 30\\u2009mg\\u00b7kg-1\\u00b7d-1, i.g.) for 45 days. We showed that fraxinellone administration dose-dependently alleviated DSS-induced intestinal impairments, and reduced the production of intestinal fibrosis biomarkers such as \\u03b1-smooth muscle actin (SMA), collagen I, hydroxyproline, fibronectin and laminin, and cytokines such as TGF-\\u03b2, TNF-\\u03b1 and IL-\\u03b2. We then established in vitro intestinal fibrosis cell models in SW480 and HT-29 cells, and demonstrated that treatment with fraxinellone (3, 10, 30\\u2009\\u03bcM) significantly relieved TGF-\\u03b2-induced fibrosis responses by inhibiting the TGF-\\u03b2/Smad2/3 signaling pathway. Molecular docking suggested that the fraxinellone might disrupt the interaction between HSP47 and collagen, which was confirmed by coimmunoprecipitation experiments. SPR analysis showed that fraxinellone had a high affinity for HSP47 with a Kd value of 3.542\\u2009\\u00d7\\u200910-5\\u2009M. This study provides a new example of HSP47-collagen intervention by a natural compound and has important implications for the clinical treatment of inflammation-induced issue fibrosis.\\u00a9 2023. The Author(s), under exclusive licence to Shanghai Institute of Materia Medica, Chinese Academy of Sciences and Chinese Pharmacological Society.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4503 request_id=bb06f8a66452a48cc171361a08f89e4b response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 663
INFO:root:RAW TEXT: subject: fraxinellone
predicate: ameliorates
object: intestinal fibrosis
subject_qualifier: None
object_qualifier: None

subject: fraxinellone
predicate: alleviated
object: DSS-induced intestinal impairments
subject_qualifier: None
object_qualifier: None

subject: fraxinellone
predicate: reduced
object: production of intestinal fibrosis biomarkers
subject_qualifier: None
object_qualifier: None

subject: fraxinellone
predicate: relieved
object: TGF-β-induced fibrosis responses
subject_qualifier: None
object_qualifier: None

subject: fraxinellone
predicate: disrupt
object: interaction between HSP47 and collagen
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: fraxinellone
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['fraxinellone']
INFO:root:PARSING LINE: predicate: ameliorates
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['ameliorates']
INFO:root:PARSING LINE: object: intestinal fibrosis
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['intestinal fibrosis']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: fraxinellone
DEBUG:root:SLOT: subject INL: False VALS: ['fraxinellone']
INFO:root:PARSING LINE: predicate: alleviated
DEBUG:root:SLOT: predicate INL: False VALS: ['alleviated']
INFO:root:PARSING LINE: object: DSS-induced intestinal impairments
DEBUG:root:SLOT: object INL: False VALS: ['DSS-induced intestinal impairments']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: fraxinellone
DEBUG:root:SLOT: subject INL: False VALS: ['fraxinellone']
INFO:root:PARSING LINE: predicate: reduced
DEBUG:root:SLOT: predicate INL: False VALS: ['reduced']
INFO:root:PARSING LINE: object: production of intestinal fibrosis biomarkers
DEBUG:root:SLOT: object INL: False VALS: ['production of intestinal fibrosis biomarkers']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: fraxinellone
DEBUG:root:SLOT: subject INL: False VALS: ['fraxinellone']
INFO:root:PARSING LINE: predicate: relieved
DEBUG:root:SLOT: predicate INL: False VALS: ['relieved']
INFO:root:PARSING LINE: object: TGF-β-induced fibrosis responses
DEBUG:root:SLOT: object INL: False VALS: ['TGF-β-induced fibrosis responses']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: fraxinellone
DEBUG:root:SLOT: subject INL: False VALS: ['fraxinellone']
INFO:root:PARSING LINE: predicate: disrupt
DEBUG:root:SLOT: predicate INL: False VALS: ['disrupt']
INFO:root:PARSING LINE: object: interaction between HSP47 and collagen
DEBUG:root:SLOT: object INL: False VALS: ['interaction between HSP47 and collagen']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'fraxinellone', 'predicate': 'disrupt', 'object': 'interaction between HSP47 and collagen', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'fraxinellone', 'predicate': 'disrupt', 'object': 'interaction between HSP47 and collagen', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING fraxinellone using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize fraxinellone to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING disrupt using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize disrupt to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING interaction between HSP47 and collagen using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize interaction between HSP47 and collagen to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'fraxinellone', 'predicate': 'disrupt', 'object': 'interaction between HSP47 and collagen', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'fraxinellone', 'predicate': 'disrupt', 'object': 'interaction between HSP47 and collagen', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: NAD+ salvage governs the immunosuppressive capacity of mesenchymal stem cells.
Keywords: Glycolysis; HIF-1α; Immunomodulation; Mesenchymal stem/stromal cells; NAD+ metabolism; Succinate
PMID: 37580400
Abstract: Mesenchymal stem/stromal cells (MSCs) possess robust immunoregulatory functions and are promising therapeutics for inflammatory disorders. This capacity is not innate but is activated or 'licensed' by inflammatory cytokines. The licensing mechanism remains unclear. Here, we examined whether inflammatory cytokines metabolically reprogrammed MSCs to confer this immunoregulatory capacity. In response to stimulation by inflammatory cytokines, MSCs exhibited a dramatic increase in the consumption of glucose, which was accompanied by an enhanced use of nicotinamide adenine dinucleotide (NAD+) and increased expression of nicotinamide phosphoribosyltransferase (NAMPT), a central enzyme in the salvage pathway for NAD+ production. When NAD+ synthesis was blocked by inhibiting or depleting NAMPT, the immunosuppressive function of MSCs induced by inflammatory cytokines was greatly attenuated. Consequently, when NAD+ metabolism in MSCs was perturbed, their therapeutic benefit was decreased in mice suffering from inflammatory bowel disease and acute liver injury. Further analysis revealed that NAMPT-driven production of NAD+ was critical for the inflammatory cytokine-induced increase in glycolysis in MSCs. Furthermore, the increase in glycolysis led to succinate accumulation in the tricarboxylic acid cycle, which led to hypoxia-inducible factor 1α (HIF-1α) stabilization and subsequently increased the transcription of key glycolytic genes, thereby persistently maintaining glycolytic flux. This study demonstrated that unlike its proinflammatory role in immune cells, NAD+ metabolism governs the anti-inflammatory function of MSCs during inflammation.© 2023. The Author(s), under exclusive licence to CSI and USTC.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2549]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: NAD+ salvage governs the immunosuppressive capacity of mesenchymal stem cells.\\nKeywords: Glycolysis; HIF-1\\u03b1; Immunomodulation; Mesenchymal stem/stromal cells; NAD+ metabolism; Succinate\\nPMID: 37580400\\nAbstract: Mesenchymal stem/stromal cells (MSCs) possess robust immunoregulatory functions and are promising therapeutics for inflammatory disorders. This capacity is not innate but is activated or \'licensed\' by inflammatory cytokines. The licensing mechanism remains unclear. Here, we examined whether inflammatory cytokines metabolically reprogrammed MSCs to confer this immunoregulatory capacity. In response to stimulation by inflammatory cytokines, MSCs exhibited a dramatic increase in the consumption of glucose, which was accompanied by an enhanced use of nicotinamide adenine dinucleotide (NAD+) and increased expression of nicotinamide phosphoribosyltransferase (NAMPT), a central enzyme in the salvage pathway for NAD+ production. When NAD+ synthesis was blocked by inhibiting or depleting NAMPT, the immunosuppressive function of MSCs induced by inflammatory cytokines was greatly attenuated. Consequently, when NAD+ metabolism in MSCs was perturbed, their therapeutic benefit was decreased in mice suffering from inflammatory bowel disease and acute liver injury. Further analysis revealed that NAMPT-driven production of NAD+ was critical for the inflammatory cytokine-induced increase in glycolysis in MSCs. Furthermore, the increase in glycolysis led to succinate accumulation in the tricarboxylic acid cycle, which led to hypoxia-inducible factor 1\\u03b1 (HIF-1\\u03b1) stabilization and subsequently increased the transcription of key glycolytic genes, thereby persistently maintaining glycolytic flux. This study demonstrated that unlike its proinflammatory role in immune cells, NAD+ metabolism governs the anti-inflammatory function of MSCs during inflammation.\\u00a9 2023. The Author(s), under exclusive licence to CSI and USTC.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=14056 request_id=c1e7013e0afe2b458f39074c76005111 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 2132
INFO:root:RAW TEXT: subject: MSCs (Mesenchymal stem/stromal cells)
predicate: metabolically reprogrammed
object: confer immunoregulatory capacity
subject_qualifier: None
object_qualifier: None

subject: inflammatory cytokines
predicate: activate or 'license'
object: immunoregulatory capacity
subject_qualifier: None
object_qualifier: None

subject: MSCs (Mesenchymal stem/stromal cells)
predicate: exhibit
object: increase in glucose consumption
subject_qualifier: None
object_qualifier: None

subject: MSCs (Mesenchymal stem/stromal cells)
predicate: use
object: nicotinamide adenine dinucleotide (NAD+)
subject_qualifier: enhanced
object_qualifier: None

subject: NAMPT (nicotinamide phosphoribosyltransferase)
predicate: increased expression of
object: NAD+ production
subject_qualifier: None
object_qualifier: None

subject: NAD+ synthesis
predicate: blocked by
object: inhibiting or depleting NAMPT
subject_qualifier: None
object_qualifier: None

subject: immunosuppressive function of MSCs
predicate: greatly attenuated
object: NAD+ metabolism perturbed
subject_qualifier: None
object_qualifier: None

subject: MSCs (Mesenchymal stem/stromal cells)
predicate: therapeutic benefit decreased
object: mice suffering from inflammatory bowel disease and acute liver injury
subject_qualifier: None
object_qualifier: None

subject: NAMPT-driven production of NAD+
predicate: critical for
object: increase in glycolysis in MSCs
subject_qualifier: None
object_qualifier: None

subject: increase in glycolysis
predicate: leads to
object: succinate accumulation in the tricarboxylic acid cycle
subject_qualifier: None
object_qualifier: None

subject: succinate accumulation in the tricarboxylic acid cycle
predicate: leads to
object: hypoxia-inducible factor 1α (HIF-1α) stabilization
subject_qualifier: None
object_qualifier: None

subject: hypoxia-inducible factor 1α (HIF-1α)
predicate: leads to
object: increased transcription of key glycolytic genes
subject_qualifier: None
object_qualifier: None

subject: NAD+ metabolism
predicate: governs
object: anti-inflammatory function of MSCs during inflammation
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: MSCs (Mesenchymal stem/stromal cells)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['MSCs (Mesenchymal stem/stromal cells)']
INFO:root:PARSING LINE: predicate: metabolically reprogrammed
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['metabolically reprogrammed']
INFO:root:PARSING LINE: object: confer immunoregulatory capacity
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['confer immunoregulatory capacity']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: inflammatory cytokines
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory cytokines']
INFO:root:PARSING LINE: predicate: activate or 'license'
DEBUG:root:SLOT: predicate INL: False VALS: ["activate or 'license'"]
INFO:root:PARSING LINE: object: immunoregulatory capacity
DEBUG:root:SLOT: object INL: False VALS: ['immunoregulatory capacity']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: MSCs (Mesenchymal stem/stromal cells)
DEBUG:root:SLOT: subject INL: False VALS: ['MSCs (Mesenchymal stem/stromal cells)']
INFO:root:PARSING LINE: predicate: exhibit
DEBUG:root:SLOT: predicate INL: False VALS: ['exhibit']
INFO:root:PARSING LINE: object: increase in glucose consumption
DEBUG:root:SLOT: object INL: False VALS: ['increase in glucose consumption']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: MSCs (Mesenchymal stem/stromal cells)
DEBUG:root:SLOT: subject INL: False VALS: ['MSCs (Mesenchymal stem/stromal cells)']
INFO:root:PARSING LINE: predicate: use
DEBUG:root:SLOT: predicate INL: False VALS: ['use']
INFO:root:PARSING LINE: object: nicotinamide adenine dinucleotide (NAD+)
DEBUG:root:SLOT: object INL: False VALS: ['nicotinamide adenine dinucleotide (NAD+)']
INFO:root:PARSING LINE: subject_qualifier: enhanced
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['enhanced']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: NAMPT (nicotinamide phosphoribosyltransferase)
DEBUG:root:SLOT: subject INL: False VALS: ['NAMPT (nicotinamide phosphoribosyltransferase)']
INFO:root:PARSING LINE: predicate: increased expression of
DEBUG:root:SLOT: predicate INL: False VALS: ['increased expression of']
INFO:root:PARSING LINE: object: NAD+ production
DEBUG:root:SLOT: object INL: False VALS: ['NAD+ production']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: NAD+ synthesis
DEBUG:root:SLOT: subject INL: False VALS: ['NAD+ synthesis']
INFO:root:PARSING LINE: predicate: blocked by
DEBUG:root:SLOT: predicate INL: False VALS: ['blocked by']
INFO:root:PARSING LINE: object: inhibiting or depleting NAMPT
DEBUG:root:SLOT: object INL: False VALS: ['inhibiting or depleting NAMPT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: immunosuppressive function of MSCs
DEBUG:root:SLOT: subject INL: False VALS: ['immunosuppressive function of MSCs']
INFO:root:PARSING LINE: predicate: greatly attenuated
DEBUG:root:SLOT: predicate INL: False VALS: ['greatly attenuated']
INFO:root:PARSING LINE: object: NAD+ metabolism perturbed
DEBUG:root:SLOT: object INL: False VALS: ['NAD+ metabolism perturbed']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: MSCs (Mesenchymal stem/stromal cells)
DEBUG:root:SLOT: subject INL: False VALS: ['MSCs (Mesenchymal stem/stromal cells)']
INFO:root:PARSING LINE: predicate: therapeutic benefit decreased
DEBUG:root:SLOT: predicate INL: False VALS: ['therapeutic benefit decreased']
INFO:root:PARSING LINE: object: mice suffering from inflammatory bowel disease and acute liver injury
DEBUG:root:SLOT: object INL: False VALS: ['mice suffering from inflammatory bowel disease and acute liver injury']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: NAMPT-driven production of NAD+
DEBUG:root:SLOT: subject INL: False VALS: ['NAMPT-driven production of NAD+']
INFO:root:PARSING LINE: predicate: critical for
DEBUG:root:SLOT: predicate INL: False VALS: ['critical for']
INFO:root:PARSING LINE: object: increase in glycolysis in MSCs
DEBUG:root:SLOT: object INL: False VALS: ['increase in glycolysis in MSCs']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: increase in glycolysis
DEBUG:root:SLOT: subject INL: False VALS: ['increase in glycolysis']
INFO:root:PARSING LINE: predicate: leads to
DEBUG:root:SLOT: predicate INL: False VALS: ['leads to']
INFO:root:PARSING LINE: object: succinate accumulation in the tricarboxylic acid cycle
DEBUG:root:SLOT: object INL: False VALS: ['succinate accumulation in the tricarboxylic acid cycle']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: succinate accumulation in the tricarboxylic acid cycle
DEBUG:root:SLOT: subject INL: False VALS: ['succinate accumulation in the tricarboxylic acid cycle']
INFO:root:PARSING LINE: predicate: leads to
DEBUG:root:SLOT: predicate INL: False VALS: ['leads to']
INFO:root:PARSING LINE: object: hypoxia-inducible factor 1α (HIF-1α) stabilization
DEBUG:root:SLOT: object INL: False VALS: ['hypoxia-inducible factor 1α (HIF-1α) stabilization']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: hypoxia-inducible factor 1α (HIF-1α)
DEBUG:root:SLOT: subject INL: False VALS: ['hypoxia-inducible factor 1α (HIF-1α)']
INFO:root:PARSING LINE: predicate: leads to
DEBUG:root:SLOT: predicate INL: False VALS: ['leads to']
INFO:root:PARSING LINE: object: increased transcription of key glycolytic genes
DEBUG:root:SLOT: object INL: False VALS: ['increased transcription of key glycolytic genes']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: NAD+ metabolism
DEBUG:root:SLOT: subject INL: False VALS: ['NAD+ metabolism']
INFO:root:PARSING LINE: predicate: governs
DEBUG:root:SLOT: predicate INL: False VALS: ['governs']
INFO:root:PARSING LINE: object: anti-inflammatory function of MSCs during inflammation
DEBUG:root:SLOT: object INL: False VALS: ['anti-inflammatory function of MSCs during inflammation']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'NAD+ metabolism', 'predicate': 'governs', 'object': 'anti-inflammatory function of MSCs during inflammation', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'NAD+ metabolism', 'predicate': 'governs', 'object': 'anti-inflammatory function of MSCs during inflammation', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING NAD+ metabolism using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize NAD+ metabolism to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING governs using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized governs to govern
INFO:ontogpt.engines.knowledge_engine:GROUNDING govern using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize governs to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING anti-inflammatory function of MSCs during inflammation using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize anti-inflammatory function of MSCs during inflammation to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'NAD+ metabolism', 'predicate': 'governs', 'object': 'anti-inflammatory function of MSCs during inflammation', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'NAD+ metabolism', 'predicate': 'governs', 'object': 'anti-inflammatory function of MSCs during inflammation', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Bacteroides uniformis-induced perturbations in colonic microbiota and bile acid levels inhibit TH17 differentiation and ameliorate colitis developments.
Keywords: 
PMID: 37580334
Abstract: Inflammatory bowel disease (IBD) is associated with gut dysbiosis and can lead to colitis-associated malignancies. Bacteroides uniformis (Bu) regulates animal intestinal homeostasis; however, the mechanism by which it alleviates colitis in mice remains unknown. We investigated the effects of B. uniformis JCM5828 and its metabolites on female C57BL/6J mice with dextran sulfate sodium salt (DSS) induced colitis. Treatment with Bu considerably alleviated colitis progression and restored the mechanical and immune barrier protein expression. Additionally, Bu increased the abundance of the symbiotic bacteria Bifidobacterium and Lactobacillus vaginalis while decreasing that of pathogenic Escherichia-Shigella, and modulated intestinal bile acid metabolism. Bu largely regulated the expression of key regulatory proteins of the NF-κB and mitogen-activated protein kinase (MAPK) signaling pathways in colonic tissues and the differentiation of TH17 cells. However, Bu could not directly inhibit TH17 cell differentiation in vitro; it modulated the process in the lamina propria by participating in bile acid metabolism and regulating key metabolites (alpha-muricholic, hyodeoxycholic, and isolithocholic acid), thereby modulating the intestinal immune response. Our findings suggest that Bu or bile acid supplements are potential therapies for colitis and other diseases associated with intestinal barrier dysfunction.© 2023. Springer Nature Limited.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2254]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Bacteroides uniformis-induced perturbations in colonic microbiota and bile acid levels inhibit TH17 differentiation and ameliorate colitis developments.\\nKeywords: \\nPMID: 37580334\\nAbstract: Inflammatory bowel disease (IBD) is associated with gut dysbiosis and can lead to colitis-associated malignancies. Bacteroides uniformis (Bu) regulates animal intestinal homeostasis; however, the mechanism by which it alleviates colitis in mice remains unknown. We investigated the effects of B. uniformis JCM5828 and its metabolites on female C57BL/6J mice with dextran sulfate sodium salt (DSS) induced colitis. Treatment with Bu considerably alleviated colitis progression and restored the mechanical and immune barrier protein expression. Additionally, Bu increased the abundance of the symbiotic bacteria Bifidobacterium and Lactobacillus vaginalis while decreasing that of pathogenic Escherichia-Shigella, and modulated intestinal bile acid metabolism. Bu largely regulated the expression of key regulatory proteins of the NF-\\u03baB and mitogen-activated protein kinase (MAPK) signaling pathways in colonic tissues and the differentiation of TH17 cells. However, Bu could not directly inhibit TH17 cell differentiation in vitro; it modulated the process in the lamina propria by participating in bile acid metabolism and regulating key metabolites (alpha-muricholic, hyodeoxycholic, and isolithocholic acid), thereby modulating the intestinal immune response. Our findings suggest that Bu or bile acid supplements are potential therapies for colitis and other diseases associated with intestinal barrier dysfunction.\\u00a9 2023. Springer Nature Limited.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9097 request_id=7fdf4873c1ac19f8dcc4b94a741fe635 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1592
INFO:root:RAW TEXT: Subject: Inflammatory bowel disease (IBD)
Predicate: is associated with
Object: gut dysbiosis and can lead to colitis-associated malignancies.

Subject: Bacteroides uniformis (Bu)
Predicate: regulates
Object: animal intestinal homeostasis.

Subject: Bacteroides uniformis JCM5828 and its metabolites
Predicate: have effects on
Object: female C57BL/6J mice with dextran sulfate sodium salt (DSS) induced colitis.

Subject: Treatment with Bu
Predicate: considerably alleviated
Object: colitis progression and restored the mechanical and immune barrier protein expression.

Subject: Bu
Predicate: increased the abundance of
Object: symbiotic bacteria Bifidobacterium and Lactobacillus vaginalis.

Subject: Bu
Predicate: decreased the abundance of
Object: pathogenic Escherichia-Shigella.

Subject: Bu
Predicate: modulated
Object: intestinal bile acid metabolism.

Subject: Bu
Predicate: regulated
Object: the expression of key regulatory proteins of the NF-κB and mitogen-activated protein kinase (MAPK) signaling pathways in colonic tissues and the differentiation of TH17 cells.

Subject: Bu
Predicate: could not directly inhibit
Object: TH17 cell differentiation in vitro.

Subject: Bu
Predicate: modulated
Object: the process in the lamina propria by participating in bile acid metabolism and regulating key metabolites (alpha-muricholic, hyodeoxycholic, and isolithocholic acid), thereby modulating the intestinal immune response.

Subject: Bu or bile acid supplements
Predicate: are potential therapies for
Object: colitis and other diseases associated with intestinal barrier dysfunction.
INFO:root:PARSING LINE: Subject: Inflammatory bowel disease (IBD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: Predicate: is associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: Object: gut dysbiosis and can lead to colitis-associated malignancies.
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['gut dysbiosis and can lead to colitis-associated malignancies.']
INFO:root:PARSING LINE: Subject: Bacteroides uniformis (Bu)
DEBUG:root:SLOT: subject INL: False VALS: ['Bacteroides uniformis (Bu)']
INFO:root:PARSING LINE: Predicate: regulates
DEBUG:root:SLOT: predicate INL: False VALS: ['regulates']
INFO:root:PARSING LINE: Object: animal intestinal homeostasis.
DEBUG:root:SLOT: object INL: False VALS: ['animal intestinal homeostasis.']
INFO:root:PARSING LINE: Subject: Bacteroides uniformis JCM5828 and its metabolites
DEBUG:root:SLOT: subject INL: False VALS: ['Bacteroides uniformis JCM5828 and its metabolites']
INFO:root:PARSING LINE: Predicate: have effects on
DEBUG:root:SLOT: predicate INL: False VALS: ['have effects on']
INFO:root:PARSING LINE: Object: female C57BL/6J mice with dextran sulfate sodium salt (DSS) induced colitis.
DEBUG:root:SLOT: object INL: False VALS: ['female C57BL/6J mice with dextran sulfate sodium salt (DSS) induced colitis.']
INFO:root:PARSING LINE: Subject: Treatment with Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Treatment with Bu']
INFO:root:PARSING LINE: Predicate: considerably alleviated
DEBUG:root:SLOT: predicate INL: False VALS: ['considerably alleviated']
INFO:root:PARSING LINE: Object: colitis progression and restored the mechanical and immune barrier protein expression.
DEBUG:root:SLOT: object INL: False VALS: ['colitis progression and restored the mechanical and immune barrier protein expression.']
INFO:root:PARSING LINE: Subject: Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Bu']
INFO:root:PARSING LINE: Predicate: increased the abundance of
DEBUG:root:SLOT: predicate INL: False VALS: ['increased the abundance of']
INFO:root:PARSING LINE: Object: symbiotic bacteria Bifidobacterium and Lactobacillus vaginalis.
DEBUG:root:SLOT: object INL: False VALS: ['symbiotic bacteria Bifidobacterium and Lactobacillus vaginalis.']
INFO:root:PARSING LINE: Subject: Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Bu']
INFO:root:PARSING LINE: Predicate: decreased the abundance of
DEBUG:root:SLOT: predicate INL: False VALS: ['decreased the abundance of']
INFO:root:PARSING LINE: Object: pathogenic Escherichia-Shigella.
DEBUG:root:SLOT: object INL: False VALS: ['pathogenic Escherichia-Shigella.']
INFO:root:PARSING LINE: Subject: Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Bu']
INFO:root:PARSING LINE: Predicate: modulated
DEBUG:root:SLOT: predicate INL: False VALS: ['modulated']
INFO:root:PARSING LINE: Object: intestinal bile acid metabolism.
DEBUG:root:SLOT: object INL: False VALS: ['intestinal bile acid metabolism.']
INFO:root:PARSING LINE: Subject: Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Bu']
INFO:root:PARSING LINE: Predicate: regulated
DEBUG:root:SLOT: predicate INL: False VALS: ['regulated']
INFO:root:PARSING LINE: Object: the expression of key regulatory proteins of the NF-κB and mitogen-activated protein kinase (MAPK) signaling pathways in colonic tissues and the differentiation of TH17 cells.
DEBUG:root:SLOT: object INL: False VALS: ['the expression of key regulatory proteins of the NF-κB and mitogen-activated protein kinase (MAPK) signaling pathways in colonic tissues and the differentiation of TH17 cells.']
INFO:root:PARSING LINE: Subject: Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Bu']
INFO:root:PARSING LINE: Predicate: could not directly inhibit
DEBUG:root:SLOT: predicate INL: False VALS: ['could not directly inhibit']
INFO:root:PARSING LINE: Object: TH17 cell differentiation in vitro.
DEBUG:root:SLOT: object INL: False VALS: ['TH17 cell differentiation in vitro.']
INFO:root:PARSING LINE: Subject: Bu
DEBUG:root:SLOT: subject INL: False VALS: ['Bu']
INFO:root:PARSING LINE: Predicate: modulated
DEBUG:root:SLOT: predicate INL: False VALS: ['modulated']
INFO:root:PARSING LINE: Object: the process in the lamina propria by participating in bile acid metabolism and regulating key metabolites (alpha-muricholic, hyodeoxycholic, and isolithocholic acid), thereby modulating the intestinal immune response.
DEBUG:root:SLOT: object INL: False VALS: ['the process in the lamina propria by participating in bile acid metabolism and regulating key metabolites (alpha-muricholic, hyodeoxycholic, and isolithocholic acid), thereby modulating the intestinal immune response.']
INFO:root:PARSING LINE: Subject: Bu or bile acid supplements
DEBUG:root:SLOT: subject INL: False VALS: ['Bu or bile acid supplements']
INFO:root:PARSING LINE: Predicate: are potential therapies for
DEBUG:root:SLOT: predicate INL: False VALS: ['are potential therapies for']
INFO:root:PARSING LINE: Object: colitis and other diseases associated with intestinal barrier dysfunction.
DEBUG:root:SLOT: object INL: False VALS: ['colitis and other diseases associated with intestinal barrier dysfunction.']
DEBUG:root:RAW: {'subject': 'Bu or bile acid supplements', 'predicate': 'are potential therapies for', 'object': 'colitis and other diseases associated with intestinal barrier dysfunction.'}
DEBUG:root:Grounding annotation object {'subject': 'Bu or bile acid supplements', 'predicate': 'are potential therapies for', 'object': 'colitis and other diseases associated with intestinal barrier dysfunction.'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Bu or bile acid supplements using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized Bu or bile acid supplements to bu or bile acid supplement
INFO:ontogpt.engines.knowledge_engine:GROUNDING bu or bile acid supplement using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Bu or bile acid supplements to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING are potential therapies for using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize are potential therapies for to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING colitis and other diseases associated with intestinal barrier dysfunction. using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize colitis and other diseases associated with intestinal barrier dysfunction. to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'Bu or bile acid supplements', 'predicate': 'are potential therapies for', 'object': 'colitis and other diseases associated with intestinal barrier dysfunction.'}
INFO:root:{'subject': 'Bu or bile acid supplements', 'predicate': 'are potential therapies for', 'object': 'colitis and other diseases associated with intestinal barrier dysfunction.'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: New biologic (Ab-IPL-IL-17) for IL-17-mediated diseases: identification of the bioactive sequence (nIL-17) for IL-17A/F function.
Keywords: arthritis, rheumatoid; autoimmune diseases; autoimmunity; inflammation
PMID: 37580108
Abstract: Interleukin (IL) 17s cytokines are key drivers of inflammation that are functionally dysregulated in several human immune-mediated inflammatory diseases (IMIDs), such as rheumatoid arthritis (RA), psoriasis and inflammatory bowel disease (IBD). Targeting these cytokines has some therapeutic benefits, but issues associated with low therapeutic efficacy and immunogenicity for subgroups of patients or IMIDs reduce their clinical use. Therefore, there is an urgent need to improve the coverage and efficacy of antibodies targeting IL-17A and/or IL-17F and IL-17A/F heterodimer.Here, we initially identified a bioactive 20 amino acid IL-17A/F-derived peptide (nIL-17) that mimics the pro-inflammatory actions of the full-length proteins. Subsequently, we generated a novel anti-IL-17 neutralising monoclonal antibody (Ab-IPL-IL-17) capable of effectively reversing the pro-inflammatory, pro-migratory actions of both nIL-17 and IL-17A/F. Importantly, we demonstrated that Ab-IPL-IL-17 has less off-target effects than the current gold-standard biologic, secukinumab. Finally, we compared the therapeutic efficacy of Ab-IPL-IL-17 with reference anti-IL-17 antibodies in preclinical murine models and samples from patients with RA and IBD. We found that Ab-IPL-IL-17 could effectively reduce clinical signs of arthritis and neutralise elevated IL-17 levels in IBD patient serum.Collectively, our preclinical and in vitro clinical evidence indicates high efficacy and therapeutic potency of Ab-IPL-IL-17, supporting the rationale for large-scale clinical evaluation of Ab-IPL-IL-17 in patients with IMIDs.© Author(s) (or their employer(s)) 2023. No commercial re-use. See rights and permissions. Published by BMJ.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2560]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: New biologic (Ab-IPL-IL-17) for IL-17-mediated diseases: identification of the bioactive sequence (nIL-17) for IL-17A/F function.\\nKeywords: arthritis, rheumatoid; autoimmune diseases; autoimmunity; inflammation\\nPMID: 37580108\\nAbstract: Interleukin (IL) 17s cytokines are key drivers of inflammation that are functionally dysregulated in several human immune-mediated inflammatory diseases (IMIDs), such as rheumatoid arthritis (RA), psoriasis and inflammatory bowel disease (IBD). Targeting these cytokines has some therapeutic benefits, but issues associated with low therapeutic efficacy and immunogenicity for subgroups of patients or IMIDs reduce their clinical use. Therefore, there is an urgent need to improve the coverage and efficacy of antibodies targeting IL-17A and/or IL-17F and IL-17A/F heterodimer.Here, we initially identified a bioactive 20 amino acid IL-17A/F-derived peptide (nIL-17) that mimics the pro-inflammatory actions of the full-length proteins. Subsequently, we generated a novel anti-IL-17 neutralising monoclonal antibody (Ab-IPL-IL-17) capable of effectively reversing the pro-inflammatory, pro-migratory actions of both nIL-17 and IL-17A/F. Importantly, we demonstrated that Ab-IPL-IL-17 has less off-target effects than the current gold-standard biologic, secukinumab. Finally, we compared the therapeutic efficacy of Ab-IPL-IL-17 with reference anti-IL-17 antibodies in preclinical murine models and samples from patients with RA and IBD. We found that Ab-IPL-IL-17 could effectively reduce clinical signs of arthritis and neutralise elevated IL-17 levels in IBD patient serum.Collectively, our preclinical and in vitro clinical evidence indicates high efficacy and therapeutic potency of Ab-IPL-IL-17, supporting the rationale for large-scale clinical evaluation of Ab-IPL-IL-17 in patients with IMIDs.\\u00a9 Author(s) (or their employer(s)) 2023. No commercial re-use. See rights and permissions. Published by BMJ.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9369 request_id=b4b6fee54815c18a01df8174eabf8882 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1177
INFO:root:RAW TEXT: subject: IL-17-mediated diseases
predicate: functionally dysregulated in
object: several human immune-mediated inflammatory diseases (IMIDs)

subject: targeting IL-17A and/or IL-17F and IL-17A/F heterodimer
predicate: has therapeutic benefits
object: IL-17-mediated diseases

subject: low therapeutic efficacy and immunogenicity
predicate: reduce
object: clinical use

subject: IL-17A/F-derived peptide
predicate: mimics
object: the pro-inflammatory actions of the full-length proteins

subject: anti-IL-17 neutralising monoclonal antibody (Ab-IPL-IL-17)
predicate: capable of effectively reversing
object: the pro-inflammatory, pro-migratory actions of both nIL-17 and IL-17A/F

subject: Ab-IPL-IL-17
predicate: has less off-target effects than
object: secukinumab

subject: Ab-IPL-IL-17
predicate: could effectively reduce
object: clinical signs of arthritis

subject: Ab-IPL-IL-17
predicate: could neutralise
object: elevated IL-17 levels in IBD patient serum

subject: Ab-IPL-IL-17
predicate: high efficacy and therapeutic potency
object: Ab-IPL-IL-17

subject: large-scale clinical evaluation
predicate: supporting the rationale
object: Ab-IPL-IL-17 in patients with IMIDs
INFO:root:PARSING LINE: subject: IL-17-mediated diseases
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['IL-17-mediated diseases']
INFO:root:PARSING LINE: predicate: functionally dysregulated in
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['functionally dysregulated in']
INFO:root:PARSING LINE: object: several human immune-mediated inflammatory diseases (IMIDs)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['several human immune-mediated inflammatory diseases (IMIDs)']
INFO:root:PARSING LINE: subject: targeting IL-17A and/or IL-17F and IL-17A/F heterodimer
DEBUG:root:SLOT: subject INL: False VALS: ['targeting IL-17A and/or IL-17F and IL-17A/F heterodimer']
INFO:root:PARSING LINE: predicate: has therapeutic benefits
DEBUG:root:SLOT: predicate INL: False VALS: ['has therapeutic benefits']
INFO:root:PARSING LINE: object: IL-17-mediated diseases
DEBUG:root:SLOT: object INL: False VALS: ['IL-17-mediated diseases']
INFO:root:PARSING LINE: subject: low therapeutic efficacy and immunogenicity
DEBUG:root:SLOT: subject INL: False VALS: ['low therapeutic efficacy and immunogenicity']
INFO:root:PARSING LINE: predicate: reduce
DEBUG:root:SLOT: predicate INL: False VALS: ['reduce']
INFO:root:PARSING LINE: object: clinical use
DEBUG:root:SLOT: object INL: False VALS: ['clinical use']
INFO:root:PARSING LINE: subject: IL-17A/F-derived peptide
DEBUG:root:SLOT: subject INL: False VALS: ['IL-17A/F-derived peptide']
INFO:root:PARSING LINE: predicate: mimics
DEBUG:root:SLOT: predicate INL: False VALS: ['mimics']
INFO:root:PARSING LINE: object: the pro-inflammatory actions of the full-length proteins
DEBUG:root:SLOT: object INL: False VALS: ['the pro-inflammatory actions of the full-length proteins']
INFO:root:PARSING LINE: subject: anti-IL-17 neutralising monoclonal antibody (Ab-IPL-IL-17)
DEBUG:root:SLOT: subject INL: False VALS: ['anti-IL-17 neutralising monoclonal antibody (Ab-IPL-IL-17)']
INFO:root:PARSING LINE: predicate: capable of effectively reversing
DEBUG:root:SLOT: predicate INL: False VALS: ['capable of effectively reversing']
INFO:root:PARSING LINE: object: the pro-inflammatory, pro-migratory actions of both nIL-17 and IL-17A/F
DEBUG:root:SLOT: object INL: False VALS: ['the pro-inflammatory, pro-migratory actions of both nIL-17 and IL-17A/F']
INFO:root:PARSING LINE: subject: Ab-IPL-IL-17
DEBUG:root:SLOT: subject INL: False VALS: ['Ab-IPL-IL-17']
INFO:root:PARSING LINE: predicate: has less off-target effects than
DEBUG:root:SLOT: predicate INL: False VALS: ['has less off-target effects than']
INFO:root:PARSING LINE: object: secukinumab
DEBUG:root:SLOT: object INL: False VALS: ['secukinumab']
INFO:root:PARSING LINE: subject: Ab-IPL-IL-17
DEBUG:root:SLOT: subject INL: False VALS: ['Ab-IPL-IL-17']
INFO:root:PARSING LINE: predicate: could effectively reduce
DEBUG:root:SLOT: predicate INL: False VALS: ['could effectively reduce']
INFO:root:PARSING LINE: object: clinical signs of arthritis
DEBUG:root:SLOT: object INL: False VALS: ['clinical signs of arthritis']
INFO:root:PARSING LINE: subject: Ab-IPL-IL-17
DEBUG:root:SLOT: subject INL: False VALS: ['Ab-IPL-IL-17']
INFO:root:PARSING LINE: predicate: could neutralise
DEBUG:root:SLOT: predicate INL: False VALS: ['could neutralise']
INFO:root:PARSING LINE: object: elevated IL-17 levels in IBD patient serum
DEBUG:root:SLOT: object INL: False VALS: ['elevated IL-17 levels in IBD patient serum']
INFO:root:PARSING LINE: subject: Ab-IPL-IL-17
DEBUG:root:SLOT: subject INL: False VALS: ['Ab-IPL-IL-17']
INFO:root:PARSING LINE: predicate: high efficacy and therapeutic potency
DEBUG:root:SLOT: predicate INL: False VALS: ['high efficacy and therapeutic potency']
INFO:root:PARSING LINE: object: Ab-IPL-IL-17
DEBUG:root:SLOT: object INL: False VALS: ['Ab-IPL-IL-17']
INFO:root:PARSING LINE: subject: large-scale clinical evaluation
DEBUG:root:SLOT: subject INL: False VALS: ['large-scale clinical evaluation']
INFO:root:PARSING LINE: predicate: supporting the rationale
DEBUG:root:SLOT: predicate INL: False VALS: ['supporting the rationale']
INFO:root:PARSING LINE: object: Ab-IPL-IL-17 in patients with IMIDs
DEBUG:root:SLOT: object INL: False VALS: ['Ab-IPL-IL-17 in patients with IMIDs']
DEBUG:root:RAW: {'subject': 'large-scale clinical evaluation', 'predicate': 'supporting the rationale', 'object': 'Ab-IPL-IL-17 in patients with IMIDs'}
DEBUG:root:Grounding annotation object {'subject': 'large-scale clinical evaluation', 'predicate': 'supporting the rationale', 'object': 'Ab-IPL-IL-17 in patients with IMIDs'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING large-scale clinical evaluation using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize large-scale clinical evaluation to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING supporting the rationale using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize supporting the rationale to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING Ab-IPL-IL-17 in patients with IMIDs using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized Ab-IPL-IL-17 in patients with IMIDs to ab-ipl-il-17 in patients with imid
INFO:ontogpt.engines.knowledge_engine:GROUNDING ab-ipl-il-17 in patients with imid using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Ab-IPL-IL-17 in patients with IMIDs to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'large-scale clinical evaluation', 'predicate': 'supporting the rationale', 'object': 'Ab-IPL-IL-17 in patients with IMIDs'}
INFO:root:{'subject': 'large-scale clinical evaluation', 'predicate': 'supporting the rationale', 'object': 'Ab-IPL-IL-17 in patients with IMIDs'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Severity of nocturia and constipation in patients with ulcerative colitis.
Keywords: 
PMID: 37579856
Abstract: To investigate the association between nocturia and constipation in patients with ulcerative colitis (UC). Constipation has recently been recognized as an important symptom in patients with UC. Although nocturia has been associated with constipation in the general population, the association between nocturia and constipation in UC patients is uncertain.Consecutive series of 290 Japanese patients with UC, Information on constipation, nocturia, and lifestyle habits was obtained using self-administered questionnaires. The definition of constipation was based on Rome I criteria and/or current medication for constipation. Patients were divided into three groups based on nighttime urination: 1) no nocturia, 2) mild nocturia (nocturnal urination - one), and 3) serious nocturia (nocturnal urination - two or more). Multivariate logistic regression was used to evaluate the association between nocturia and constipation.Among all of the UC patients, the prevalence of mild nocturia, serious nocturia, and constipation was 35.2%, 26.9%, and 12.4%, respectively. The prevalence of constipation in the none, mild, and serious nocturia groups was 8.2%, 10.8%, and 20.5%, respectively. After adjustment for confounders such as age, sex, current drinking, current smoking, body mass index, and steroid use, nocturia severity was independently and positively associated with constipation (adjusted odds ratio for mild nocturia: 1.55 [95% confidence interval: 0.57-4.28], serious nocturia: 3.19 [95% confidence interval: 1.09-9.81], p for trend = 0.035).The severity of nocturia is positively associated with constipation, and physicians should consider the interrelationships between nocturia and constipation in managing UC patients.Copyright © 2023. Published by Elsevier Inc.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2499]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Severity of nocturia and constipation in patients with ulcerative colitis.\\nKeywords: \\nPMID: 37579856\\nAbstract: To investigate the association between nocturia and constipation in patients with ulcerative colitis (UC). Constipation has recently been recognized as an important symptom in patients with UC. Although nocturia has been associated with constipation in the general population, the association between nocturia and constipation in UC patients is uncertain.Consecutive series of 290 Japanese patients with UC, Information on constipation, nocturia, and lifestyle habits was obtained using self-administered questionnaires. The definition of constipation was based on Rome I criteria and/or current medication for constipation. Patients were divided into three groups based on nighttime urination: 1) no nocturia, 2) mild nocturia (nocturnal urination - one), and 3) serious nocturia (nocturnal urination - two or more). Multivariate logistic regression was used to evaluate the association between nocturia and constipation.Among all of the UC patients, the prevalence of mild nocturia, serious nocturia, and constipation was 35.2%, 26.9%, and 12.4%, respectively. The prevalence of constipation in the none, mild, and serious nocturia groups was 8.2%, 10.8%, and 20.5%, respectively. After adjustment for confounders such as age, sex, current drinking, current smoking, body mass index, and steroid use, nocturia severity was independently and positively associated with constipation (adjusted odds ratio for mild nocturia: 1.55 [95% confidence interval: 0.57-4.28], serious nocturia: 3.19 [95% confidence interval: 1.09-9.81], p for trend = 0.035).The severity of nocturia is positively associated with constipation, and physicians should consider the interrelationships between nocturia and constipation in managing UC patients.Copyright \\u00a9 2023. Published by Elsevier Inc.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=867 request_id=5aa4513a8334cc791076f751dcdd54ab response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 129
INFO:root:RAW TEXT: subject: nocturia
predicate: associated with
object: constipation

subject_qualifier: None
object_qualifier: None
qualifier: None
INFO:root:PARSING LINE: subject: nocturia
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['nocturia']
INFO:root:PARSING LINE: predicate: associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['associated with']
INFO:root:PARSING LINE: object: constipation
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['constipation']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
DEBUG:root:RAW: {'subject': 'nocturia', 'predicate': 'associated with', 'object': 'constipation', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'nocturia', 'predicate': 'associated with', 'object': 'constipation', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING nocturia using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized nocturia to nocturium
INFO:ontogpt.engines.knowledge_engine:GROUNDING nocturium using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize nocturia to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING associated with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize associated with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING constipation using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize constipation to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'nocturia', 'predicate': 'associated with', 'object': 'constipation', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'None'}
INFO:root:{'subject': 'nocturia', 'predicate': 'associated with', 'object': 'constipation', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: [Not Available].
Keywords: 
PMID: 37579791
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[668]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: [Not Available].\\nKeywords: \\nPMID: 37579791\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=481 request_id=82009aab020260b06b2a8d26a1dd26e3 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 77
INFO:root:RAW TEXT: Unable to provide the requested information as the abstract is not available.
ERROR:root:Line 'Unable to provide the requested information as the abstract is not available.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Adalimumab-induced paradoxical psoriasis treated with biologics targeting the IL-17/IL-23 axis in patients with hidradenitis suppurativa.
Keywords: 
PMID: 37579735
Abstract: Background Paradoxical psoriasis (PP) has been mainly described in patients receiving tumor necrosis factor-α (TNFα)-inhibitors for inflammatory bowel disease or psoriasis vulgaris, while such data in the context of hidradenitis suppurativa (HS) are scarce. The purpose of this study was to demonstrate the course of PP and the underlying HS upon switching from adalimumab to a biologic agent targeting the interleukin (IL)-17/IL-23 axis. Methods The electronic medical database of the outpatient department for HS of a tertiary hospital for skin diseases was searched to identify patients with moderate to severe HS under treatment with adalimumab, who developed PP and were switched to biological therapy with an IL-17 or IL-23 inhibitor between February 2016 and January 2022. Disease assessment scores were evaluated at baseline, at time of PP development as well as six and twelve months thereafter. Results Among the 83 patients who received adalimumab the treatment of HS between February 2016 and January 2022, 10 patients (12%) developed paradoxical psoriasiform skin reactions after a median time of seven (range, 2-48) months. There were four females (40%) and six males (60%) with a median age of 42,5 (range, 33-56) years. Five patients presented with plaque psoriasis and five with palmoplantar pustulosis, while four had intertriginous and three nail involvement. In most of the patients the HS responded well to adalimumab at onset of PP. Eight patients were changed to secukinumab, one to ustekinumab and one to rizankizumab. The HS further improved in all but two patients, one receiving secukinumab and one receiving rizankizumab. In addition, all patients achieved improvement of PP. Conclusion Despite the small number of patients, this study provides support that patients with adalimumab-induced PP may benefit from biologics targeting IL-17/IL-23 axis. Further studies are needed, to establish the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.S. Karger AG, Basel.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2809]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Adalimumab-induced paradoxical psoriasis treated with biologics targeting the IL-17/IL-23 axis in patients with hidradenitis suppurativa.\\nKeywords: \\nPMID: 37579735\\nAbstract: Background Paradoxical psoriasis (PP) has been mainly described in patients receiving tumor necrosis factor-\\u03b1 (TNF\\u03b1)-inhibitors for inflammatory bowel disease or psoriasis vulgaris, while such data in the context of hidradenitis suppurativa (HS) are scarce. The purpose of this study was to demonstrate the course of PP and the underlying HS upon switching from adalimumab to a biologic agent targeting the interleukin (IL)-17/IL-23 axis. Methods The electronic medical database of the outpatient department for HS of a tertiary hospital for skin diseases was searched to identify patients with moderate to severe HS under treatment with adalimumab, who developed PP and were switched to biological therapy with an IL-17 or IL-23 inhibitor between February 2016 and January 2022. Disease assessment scores were evaluated at baseline, at time of PP development as well as six and twelve months thereafter. Results Among the 83 patients who received adalimumab the treatment of HS between February 2016 and January 2022, 10 patients (12%) developed paradoxical psoriasiform skin reactions after a median time of seven (range, 2-48) months. There were four females (40%) and six males (60%) with a median age of 42,5 (range, 33-56) years. Five patients presented with plaque psoriasis and five with palmoplantar pustulosis, while four had intertriginous and three nail involvement. In most of the patients the HS responded well to adalimumab at onset of PP. Eight patients were changed to secukinumab, one to ustekinumab and one to rizankizumab. The HS further improved in all but two patients, one receiving secukinumab and one receiving rizankizumab. In addition, all patients achieved improvement of PP. Conclusion Despite the small number of patients, this study provides support that patients with adalimumab-induced PP may benefit from biologics targeting IL-17/IL-23 axis. Further studies are needed, to establish the optimal therapeutic strategy of the anti-TNF\\u03b1-induced PP in the context of HS.S. Karger AG, Basel.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8174 request_id=04284badd4da713f72f1b67a26756aae response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1089
INFO:root:RAW TEXT: subject: Paradoxical psoriasis (PP)
predicate: developed
object: adalimumab-induced

subject_qualifier: patients with moderate to severe HS under treatment with adalimumab
object_qualifier: 

subject: patients
predicate: presented with
object: plaque psoriasis, palmoplantar pustulosis, intertriginous, and nail involvement.

subject_qualifier: 
object_qualifier: 

subject: HS (hidradenitis suppurativa)
predicate: responded well to
object: adalimumab

subject_qualifier: 
object_qualifier: 

subject: patients
predicate: were changed to
object: secukinumab, ustekinumab, rizankizumab

subject_qualifier: 
object_qualifier: 

subject: patients
predicate: achieved improvement of
object: PP (paradoxical psoriasis)

subject_qualifier: all
object_qualifier: 

subject: study
predicate: provides support that
object: patients with adalimumab-induced PP may benefit from biologics targeting IL-17/IL-23 axis

subject_qualifier: 
object_qualifier: 

subject: studies
predicate: are needed, to establish
object: the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.
INFO:root:PARSING LINE: subject: Paradoxical psoriasis (PP)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Paradoxical psoriasis (PP)']
INFO:root:PARSING LINE: predicate: developed
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['developed']
INFO:root:PARSING LINE: object: adalimumab-induced
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['adalimumab-induced']
INFO:root:PARSING LINE: subject_qualifier: patients with moderate to severe HS under treatment with adalimumab
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['patients with moderate to severe HS under treatment with adalimumab']
INFO:root:PARSING LINE: object_qualifier:
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: presented with
DEBUG:root:SLOT: predicate INL: False VALS: ['presented with']
INFO:root:PARSING LINE: object: plaque psoriasis, palmoplantar pustulosis, intertriginous, and nail involvement.
DEBUG:root:SLOT: object INL: False VALS: ['plaque psoriasis, palmoplantar pustulosis, intertriginous, and nail involvement.']
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: HS (hidradenitis suppurativa)
DEBUG:root:SLOT: subject INL: False VALS: ['HS (hidradenitis suppurativa)']
INFO:root:PARSING LINE: predicate: responded well to
DEBUG:root:SLOT: predicate INL: False VALS: ['responded well to']
INFO:root:PARSING LINE: object: adalimumab
DEBUG:root:SLOT: object INL: False VALS: ['adalimumab']
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: were changed to
DEBUG:root:SLOT: predicate INL: False VALS: ['were changed to']
INFO:root:PARSING LINE: object: secukinumab, ustekinumab, rizankizumab
DEBUG:root:SLOT: object INL: False VALS: ['secukinumab, ustekinumab, rizankizumab']
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: patients
DEBUG:root:SLOT: subject INL: False VALS: ['patients']
INFO:root:PARSING LINE: predicate: achieved improvement of
DEBUG:root:SLOT: predicate INL: False VALS: ['achieved improvement of']
INFO:root:PARSING LINE: object: PP (paradoxical psoriasis)
DEBUG:root:SLOT: object INL: False VALS: ['PP (paradoxical psoriasis)']
INFO:root:PARSING LINE: subject_qualifier: all
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['all']
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: study
DEBUG:root:SLOT: subject INL: False VALS: ['study']
INFO:root:PARSING LINE: predicate: provides support that
DEBUG:root:SLOT: predicate INL: False VALS: ['provides support that']
INFO:root:PARSING LINE: object: patients with adalimumab-induced PP may benefit from biologics targeting IL-17/IL-23 axis
DEBUG:root:SLOT: object INL: False VALS: ['patients with adalimumab-induced PP may benefit from biologics targeting IL-17/IL-23 axis']
INFO:root:PARSING LINE: subject_qualifier:
INFO:root:PARSING LINE: object_qualifier:
INFO:root:PARSING LINE: subject: studies
DEBUG:root:SLOT: subject INL: False VALS: ['studies']
INFO:root:PARSING LINE: predicate: are needed, to establish
DEBUG:root:SLOT: predicate INL: False VALS: ['are needed, to establish']
INFO:root:PARSING LINE: object: the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.
DEBUG:root:SLOT: object INL: False VALS: ['the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.']
DEBUG:root:RAW: {'subject': 'studies', 'predicate': 'are needed, to establish', 'object': 'the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.', 'subject_qualifier': 'all'}
DEBUG:root:Grounding annotation object {'subject': 'studies', 'predicate': 'are needed, to establish', 'object': 'the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.', 'subject_qualifier': 'all'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING studies using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized studies to study
INFO:ontogpt.engines.knowledge_engine:GROUNDING study using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize studies to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING are needed, to establish using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize are needed, to establish to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS. using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS. to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING all using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize all to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'studies', 'predicate': 'are needed, to establish', 'object': 'the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.', 'subject_qualifier': 'all'}
INFO:root:{'subject': 'studies', 'predicate': 'are needed, to establish', 'object': 'the optimal therapeutic strategy of the anti-TNFα-induced PP in the context of HS.', 'subject_qualifier': 'all'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Inflammatory Bowel Disease and Risk of Global Cardiovascular Diseases and Type 2 Diabetes.
Keywords: Crohn’s disease; cardiovascular disease; causality; type 2 diabetes; ulcerative colitis
PMID: 37579307
Abstract: Inflammatory bowel disease (IBD) was associated with elevated risk of cardiometabolic diseases in observational studies. We aimed to evaluate the observational and genetic associations of Crohn's disease (CD) and ulcerative colitis (UC) with multiple cardiometabolic outcomes.Our phenotypic and genetic association analyses included more than 400 000 participants who were free of major cardiovascular disease and diabetes at recruitment (2006-2010) and were followed up until December 2019 based on the UK Biobank. For the Mendelian randomization (MR) analyses, 415 and 273 single nucleotide polymorphisms associated with CD and UC, respectively, were selected as genetic instruments. Summary-level data on individual cardiometabolic outcomes were obtained from 4 different genome-wide association studies with a total of 2 248 842 participants.In the multivariable-adjusted observational analyses, CD was associated with higher risks of heart failure (hazard ratio [HR], 1.72; 95% confidence interval, 1.22-2.42) and type 2 diabetes (HR, 2.11; 95% confidence interval, 1.67-2.67) but not with myocardial infarction or ischemic stroke. UC was related to increased risks of all the assessed cardiometabolic diseases (HRs ranged from 1.29 for myocardial infarction to 1.76 for type 2 diabetes). Conversely, neither the genetic risk score for CD nor that for UC was associated with higher risk of developing cardiometabolic diseases. In 2-sample MR analyses, genetically determined CD and UC were not associated with any of the assessed cardiometabolic diseases (all P values >.05).Despite confirming the observational associations, our study does not support a causal association between IBD and elevated risk of cardiometabolic diseases.© The Author(s) 2023. Published by Oxford University Press on behalf of Crohn’s & Colitis Foundation. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2750]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Inflammatory Bowel Disease and Risk of Global Cardiovascular Diseases and Type 2 Diabetes.\\nKeywords: Crohn\\u2019s disease; cardiovascular disease; causality; type 2 diabetes; ulcerative colitis\\nPMID: 37579307\\nAbstract: Inflammatory bowel disease (IBD) was associated with elevated risk of cardiometabolic diseases in observational studies. We aimed to evaluate the observational and genetic associations of Crohn\'s disease (CD) and ulcerative colitis (UC) with multiple cardiometabolic outcomes.Our phenotypic and genetic association analyses included more than 400\\u2005000 participants who were free of major cardiovascular disease and diabetes at recruitment (2006-2010) and were followed up until December 2019 based on the UK Biobank. For the Mendelian randomization (MR) analyses, 415 and 273 single nucleotide polymorphisms associated with CD and UC, respectively, were selected as genetic instruments. Summary-level data on individual cardiometabolic outcomes were obtained from 4 different genome-wide association studies with a total of 2\\u2005248\\u2005842 participants.In the multivariable-adjusted observational analyses, CD was associated with higher risks of heart failure (hazard ratio [HR], 1.72; 95% confidence interval, 1.22-2.42) and type 2 diabetes (HR, 2.11; 95% confidence interval, 1.67-2.67) but not with myocardial infarction or ischemic stroke. UC was related to increased risks of all the assessed cardiometabolic diseases (HRs ranged from 1.29 for myocardial infarction to 1.76 for type 2 diabetes). Conversely, neither the genetic risk score for CD nor that for UC was associated with higher risk of developing cardiometabolic diseases. In 2-sample MR analyses, genetically determined CD and UC were not associated with any of the assessed cardiometabolic diseases (all P values\\u2005>.05).Despite confirming the observational associations, our study does not support a causal association between IBD and elevated risk of cardiometabolic diseases.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of Crohn\\u2019s & Colitis Foundation. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=2724 request_id=f1cf68dae3cfd42ad5a2b328f0012265 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 386
INFO:root:RAW TEXT: subject: Crohn's disease
predicate: associated with
object: higher risks of heart failure and type 2 diabetes
subject_qualifier: None
object_qualifier: None

subject: ulcerative colitis
predicate: related to
object: increased risks of all the assessed cardiometabolic diseases
subject_qualifier: None
object_qualifier: None

qualifier: NOT
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['associated with']
INFO:root:PARSING LINE: object: higher risks of heart failure and type 2 diabetes
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['higher risks of heart failure and type 2 diabetes']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: subject: ulcerative colitis
DEBUG:root:SLOT: subject INL: False VALS: ['ulcerative colitis']
INFO:root:PARSING LINE: predicate: related to
DEBUG:root:SLOT: predicate INL: False VALS: ['related to']
INFO:root:PARSING LINE: object: increased risks of all the assessed cardiometabolic diseases
DEBUG:root:SLOT: object INL: False VALS: ['increased risks of all the assessed cardiometabolic diseases']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'ulcerative colitis', 'predicate': 'related to', 'object': 'increased risks of all the assessed cardiometabolic diseases', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'NOT'}
DEBUG:root:Grounding annotation object {'subject': 'ulcerative colitis', 'predicate': 'related to', 'object': 'increased risks of all the assessed cardiometabolic diseases', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'NOT'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative colitis using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized ulcerative colitis to ulcerative coliti
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative coliti using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding ulcerative colitis to MONDO:0005101; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized ulcerative colitis with MONDO:0005101 to MONDO:0005101
INFO:ontogpt.engines.knowledge_engine:GROUNDING related to using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize related to to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING increased risks of all the assessed cardiometabolic diseases using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized increased risks of all the assessed cardiometabolic diseases to increased risks of all the assessed cardiometabolic disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING increased risks of all the assessed cardiometabolic disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize increased risks of all the assessed cardiometabolic diseases to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005101', 'predicate': 'related to', 'object': 'increased risks of all the assessed cardiometabolic diseases', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'NOT'}
INFO:root:{'subject': 'MONDO:0005101', 'predicate': 'related to', 'object': 'increased risks of all the assessed cardiometabolic diseases', 'subject_qualifier': 'None', 'object_qualifier': 'None', 'qualifier': 'NOT'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Thiazide Diuretics and Risk of Colorectal Cancer: A Population-Based Cohort Study.
Keywords: antihypertensive drugs; calcium channel blockers; cohort; colorectal cancer; dihydropyridine; propensity score; thiazide diuretics
PMID: 37579305
Abstract: Evidence from clinical trials and observational studies on the association between thiazide diuretics and colorectal cancer risk is conflicting. We aimed to determine whether thiazide diuretics are associated with an increased colorectal cancer risk compared with dihydropyridine calcium channel blockers (dCCBs).A population-based, new-user cohort was assembled using the United Kingdom Clinical Practice Research Datalink. Between 1990-2018, we compared thiazide diuretic initiators with dCCB initiators and estimated hazard ratios (HR) with 95% confidence intervals (CIs) of colorectal cancer using Cox proportional hazard models. Models were weighted using standardized morbidity ratio weights generated from calendar time-specific propensity scores.The cohort included 377,760 thiazide diuretic initiators and 364,300 dCCB initiators, generating 3,619,883 person-years of follow-up. Compared with dCCBs, thiazide diuretics were not associated with colorectal cancer (weighted HR:0.97, 95% CI:0.90-1.04). Secondary analyses yielded similar results, although an increased risk was observed among patients with inflammatory bowel disease (weighted HR:2.45, 95% CI:1.13-5.35) and potentially polyps (weighted HR:1.46, 95% CI:0.93-2.30).Compared with dCCBs, thiazide diuretics were not associated with an overall increased colorectal cancer risk. While these findings provide some reassurance, research is needed to corroborate the elevated risks observed among patients with inflammatory bowel disease and history of polyps.© The Author(s) 2023. Published by Oxford University Press on behalf of the Johns Hopkins Bloomberg School of Public Health. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2596]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Thiazide Diuretics and Risk of Colorectal Cancer: A Population-Based Cohort Study.\\nKeywords: antihypertensive drugs; calcium channel blockers; cohort; colorectal cancer; dihydropyridine; propensity score; thiazide diuretics\\nPMID: 37579305\\nAbstract: Evidence from clinical trials and observational studies on the association between thiazide diuretics and colorectal cancer risk is conflicting. We aimed to determine whether thiazide diuretics are associated with an increased colorectal cancer risk compared with dihydropyridine calcium channel blockers (dCCBs).A population-based, new-user cohort was assembled using the United Kingdom Clinical Practice Research Datalink. Between 1990-2018, we compared thiazide diuretic initiators with dCCB initiators and estimated hazard ratios (HR) with 95% confidence intervals (CIs) of colorectal cancer using Cox proportional hazard models. Models were weighted using standardized morbidity ratio weights generated from calendar time-specific propensity scores.The cohort included 377,760 thiazide diuretic initiators and 364,300 dCCB initiators, generating 3,619,883 person-years of follow-up. Compared with dCCBs, thiazide diuretics were not associated with colorectal cancer (weighted HR:0.97, 95% CI:0.90-1.04). Secondary analyses yielded similar results, although an increased risk was observed among patients with inflammatory bowel disease (weighted HR:2.45, 95% CI:1.13-5.35) and potentially polyps (weighted HR:1.46, 95% CI:0.93-2.30).Compared with dCCBs, thiazide diuretics were not associated with an overall increased colorectal cancer risk. While these findings provide some reassurance, research is needed to corroborate the elevated risks observed among patients with inflammatory bowel disease and history of polyps.\\u00a9 The Author(s) 2023. Published by Oxford University Press on behalf of the Johns Hopkins Bloomberg School of Public Health. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8631 request_id=2069bd9d3a317c7f1f6659b631cf27e2 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1431
INFO:root:RAW TEXT: subject: thiazide diuretics
predicate: are not associated with
object: colorectal cancer

subject_qualifier: thiazide diuretics
predicate: are not associated with
object_qualifier: an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: are not associated with
object: colorectal cancer

subject: thiazide diuretics
predicate: are not associated with
object: colorectal cancer

subject: thiazide diuretics
predicate: were not associated with
object: colorectal cancer

subject: thiazide diuretics
predicate: were not associated with
object: colorectal cancer

subject: thiazide diuretics
predicate: were not associated with
object_qualifier: an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: were not associated with an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: were not associated with an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: were not associated with an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: were not associated with an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: were not associated with an overall increased
object: colorectal cancer risk

subject: thiazide diuretics
predicate: were not associated with an overall increased
object: colorectal cancer risk
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: are not associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['are not associated with']
INFO:root:PARSING LINE: object: colorectal cancer
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer']
INFO:root:PARSING LINE: subject_qualifier: thiazide diuretics
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: are not associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['are not associated with']
INFO:root:PARSING LINE: object_qualifier: an overall increased
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: are not associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['are not associated with']
INFO:root:PARSING LINE: object: colorectal cancer
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: are not associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['are not associated with']
INFO:root:PARSING LINE: object: colorectal cancer
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with']
INFO:root:PARSING LINE: object: colorectal cancer
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with']
INFO:root:PARSING LINE: object: colorectal cancer
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with']
INFO:root:PARSING LINE: object_qualifier: an overall increased
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with an overall increased
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with an overall increased
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with an overall increased
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with an overall increased
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with an overall increased
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
INFO:root:PARSING LINE: subject: thiazide diuretics
DEBUG:root:SLOT: subject INL: False VALS: ['thiazide diuretics']
INFO:root:PARSING LINE: predicate: were not associated with an overall increased
DEBUG:root:SLOT: predicate INL: False VALS: ['were not associated with an overall increased']
INFO:root:PARSING LINE: object: colorectal cancer risk
DEBUG:root:SLOT: object INL: False VALS: ['colorectal cancer risk']
DEBUG:root:RAW: {'subject': 'thiazide diuretics', 'predicate': 'were not associated with an overall increased', 'object': 'colorectal cancer risk', 'subject_qualifier': 'thiazide diuretics', 'object_qualifier': 'an overall increased'}
DEBUG:root:Grounding annotation object {'subject': 'thiazide diuretics', 'predicate': 'were not associated with an overall increased', 'object': 'colorectal cancer risk', 'subject_qualifier': 'thiazide diuretics', 'object_qualifier': 'an overall increased'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING thiazide diuretics using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized thiazide diuretics to thiazide diuretic
INFO:ontogpt.engines.knowledge_engine:GROUNDING thiazide diuretic using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize thiazide diuretics to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING were not associated with an overall increased using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize were not associated with an overall increased to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING colorectal cancer risk using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize colorectal cancer risk to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING thiazide diuretics using NamedEntity
INFO:ontogpt.engines.knowledge_engine:Singularized thiazide diuretics to thiazide diuretic
INFO:ontogpt.engines.knowledge_engine:GROUNDING thiazide diuretic using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize thiazide diuretics to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING an overall increased using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize an overall increased to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'thiazide diuretics', 'predicate': 'were not associated with an overall increased', 'object': 'colorectal cancer risk', 'subject_qualifier': 'thiazide diuretics', 'object_qualifier': 'an overall increased'}
INFO:root:{'subject': 'thiazide diuretics', 'predicate': 'were not associated with an overall increased', 'object': 'colorectal cancer risk', 'subject_qualifier': 'thiazide diuretics', 'object_qualifier': 'an overall increased'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Tumor necrosis factor-like cytokine 1A plays a role in inflammatory bowel disease pathogenesis.
Keywords: TL1A; dendritic cell; inflammatory bowel disease
PMID: 37579137
Abstract: The binding of tumor necrosis factor-like cytokine 1A (TL1A) to death receptor 3 (DR3) plays an important role in the interaction between dendritic cells (DCs) and T cells and contributes to intestinal inflammation development. However, the mechanism by which DCs expressing TL1A mediate helper T (Th) cell differentiation in the intestinal lamina propria (LP) during the pathogenesis of inflammatory bowel disease remains unclear. In this study, we found that TL1A/DR3 promoted Th1 and Th17 cell differentiation in T-T and DC-T cell interaction-dependent manners. TL1A-deficient CD4+ T cells failed to polarize into Th1/Th17 cells and did not cause colonic inflammation in a T cell transfer colitis model. Notably, TL1A was located in the cytoplasm and nuclei of DCs, positively regulated the DC-specific ICAM-grabbing nonintegrin/RAF1/nuclear factor κB signaling pathway, enhanced the antigen uptake ability of DCs, and promoted TLR4-mediated DC activation, inducing naive CD4+ T cell differentiation into Th1 and Th17 cells. Our work reveals that TL1A plays a regulatory role in inflammatory bowel disease pathogenesis.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1917]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Tumor necrosis factor-like cytokine 1A plays a role in inflammatory bowel disease pathogenesis.\\nKeywords: TL1A; dendritic cell; inflammatory bowel disease\\nPMID: 37579137\\nAbstract: The binding of tumor necrosis factor-like cytokine 1A (TL1A) to death receptor 3 (DR3) plays an important role in the interaction between dendritic cells (DCs) and T cells and contributes to intestinal inflammation development. However, the mechanism by which DCs expressing TL1A mediate helper T (Th) cell differentiation in the intestinal lamina propria (LP) during the pathogenesis of inflammatory bowel disease remains unclear. In this study, we found that TL1A/DR3 promoted Th1 and Th17 cell differentiation in T-T and DC-T cell interaction-dependent manners. TL1A-deficient CD4+ T cells failed to polarize into Th1/Th17 cells and did not cause colonic inflammation in a T cell transfer colitis model. Notably, TL1A was located in the cytoplasm and nuclei of DCs, positively regulated the DC-specific ICAM-grabbing nonintegrin/RAF1/nuclear factor \\u03baB signaling pathway, enhanced the antigen uptake ability of DCs, and promoted TLR4-mediated DC activation, inducing naive CD4+ T cell differentiation into Th1 and Th17 cells. Our work reveals that TL1A plays a regulatory role in inflammatory bowel disease pathogenesis.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1036 request_id=83d1671d7888b2bcfe7f497906768b0b response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 170
INFO:root:RAW TEXT: subject: tumor necrosis factor-like cytokine 1A
predicate: plays a role in
object: inflammatory bowel disease pathogenesis

subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: tumor necrosis factor-like cytokine 1A
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['tumor necrosis factor-like cytokine 1A']
INFO:root:PARSING LINE: predicate: plays a role in
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['plays a role in']
INFO:root:PARSING LINE: object: inflammatory bowel disease pathogenesis
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel disease pathogenesis']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'tumor necrosis factor-like cytokine 1A', 'predicate': 'plays a role in', 'object': 'inflammatory bowel disease pathogenesis', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'tumor necrosis factor-like cytokine 1A', 'predicate': 'plays a role in', 'object': 'inflammatory bowel disease pathogenesis', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING tumor necrosis factor-like cytokine 1A using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize tumor necrosis factor-like cytokine 1A to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING plays a role in using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize plays a role in to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING inflammatory bowel disease pathogenesis using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized inflammatory bowel disease pathogenesis to inflammatory bowel disease pathogenesi
INFO:ontogpt.engines.knowledge_engine:GROUNDING inflammatory bowel disease pathogenesi using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize inflammatory bowel disease pathogenesis to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'tumor necrosis factor-like cytokine 1A', 'predicate': 'plays a role in', 'object': 'inflammatory bowel disease pathogenesis', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'tumor necrosis factor-like cytokine 1A', 'predicate': 'plays a role in', 'object': 'inflammatory bowel disease pathogenesis', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Abdominal pain is associated with an increased risk of future healthcare resource utilization in inflammatory bowel disease.
Keywords: Abdominal pain; Healthcare resource utilization; Inflammatory bowel disease
PMID: 37578543
Abstract: Numerous factors influence healthcare resource utilization (HRU) in inflammatory bowel disease (IBD). We previously demonstrated an association between the presence of certain IBD-related symptoms and HRU. We conducted a longitudinal study to identify the clinical variables and IBD-related symptoms predictive of HRU.This investigation utilized clinical encounters at an IBD center within a tertiary care referral center between 10/29/2015-12/31/2019. Participants were assessed over two time points (index and follow-up office visits) separated by a minimum of 6 months. Demographics, endoscopic disease severity, totals and sub-scores of surveys assessing for IBD-related symptoms, HRU, and substance use, and IBD-related medications. HRU was defined as any IBD-related emergency room visit, hospitalization, or surgery during the 6 months prior to follow-up appointment. We identified patients exhibiting HRU (at follow-up) and computed descriptive statistics and contingency table analyses of index appointment clinical data to identify predictors of HRU. Multivariable logistic regression models were fit incorporating significant demographic and clinical factors.162 consecutively enrolled IBD patients (mean age 44.0 years; 99f:63 m; 115 Crohn's disease [CD], 45 ulcerative colitis [UC], 2 indeterminate colitis) were included. 121 patients (74.7%) exhibited HRU (mean age 43.6 years; 73f:48 m; 84 CD, 36 UC, 1 IC) preceding follow-up appointment. Abdominal pain (OR = 2.18, 95% CI 1.04-4.35, p = 0.04) at the index appointment was the only study variable significantly associated with HRU on bivariate analysis (Table 1). However, none of the clinical factors evaluated in this study were independently associated with HRU in our multivariable logistic regression model.In this longitudinal study, abdominal pain was the only clinical variable that demonstrated an association with future HRU (even when considering other symptoms and key variables such as disease activity, IBD-medications, and psychiatric comorbidities (i.e., anxious or depressed state). These findings reinforce the importance of regularly screening for and effectively treating abdominal pain in IBD.© 2023. The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3136]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Abdominal pain is associated with an increased risk of future healthcare resource utilization in inflammatory bowel disease.\\nKeywords: Abdominal pain; Healthcare resource utilization; Inflammatory bowel disease\\nPMID: 37578543\\nAbstract: Numerous factors influence healthcare resource utilization (HRU) in inflammatory bowel disease (IBD). We previously demonstrated an association between the presence of certain IBD-related symptoms and HRU. We conducted a longitudinal study to identify the clinical variables and IBD-related symptoms predictive of HRU.This investigation utilized clinical encounters at an IBD center within a tertiary care referral center between 10/29/2015-12/31/2019. Participants were assessed over two time points (index and follow-up office visits) separated by a minimum of 6\\u00a0months. Demographics, endoscopic disease severity, totals and sub-scores of surveys assessing for IBD-related symptoms, HRU, and substance use, and IBD-related medications. HRU was defined as any IBD-related emergency room visit, hospitalization, or surgery during the 6\\u00a0months prior to follow-up appointment. We identified patients exhibiting HRU (at follow-up) and computed descriptive statistics and contingency table analyses of index appointment clinical data to identify predictors of HRU. Multivariable logistic regression models were fit incorporating significant demographic and clinical factors.162 consecutively enrolled IBD patients (mean age 44.0\\u00a0years; 99f:63\\u00a0m; 115 Crohn\'s disease [CD], 45 ulcerative colitis [UC], 2 indeterminate colitis) were included. 121 patients (74.7%) exhibited HRU (mean age 43.6\\u00a0years; 73f:48\\u00a0m; 84 CD, 36 UC, 1 IC) preceding follow-up appointment. Abdominal pain (OR\\u2009=\\u20092.18, 95% CI 1.04-4.35, p\\u2009=\\u20090.04) at the index appointment was the only study variable significantly associated with HRU on bivariate analysis (Table 1). However, none of the clinical factors evaluated in this study were independently associated with HRU in our multivariable logistic regression model.In this longitudinal study, abdominal pain was the only clinical variable that demonstrated an association with future HRU (even when considering other symptoms and key variables such as disease activity, IBD-medications, and psychiatric comorbidities (i.e., anxious or depressed state). These findings reinforce the importance of regularly screening for and effectively treating abdominal pain in IBD.\\u00a9 2023. The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1098 request_id=49c24cff35d6baa3e8abfa4af6db5741 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 184
INFO:root:RAW TEXT: subject: Abdominal pain
predicate: is associated with
object: an increased risk of future healthcare resource utilization
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Abdominal pain
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Abdominal pain']
INFO:root:PARSING LINE: predicate: is associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is associated with']
INFO:root:PARSING LINE: object: an increased risk of future healthcare resource utilization
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['an increased risk of future healthcare resource utilization']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'Abdominal pain', 'predicate': 'is associated with', 'object': 'an increased risk of future healthcare resource utilization', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'Abdominal pain', 'predicate': 'is associated with', 'object': 'an increased risk of future healthcare resource utilization', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Abdominal pain using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding Abdominal pain to HP:0002027; next step is to normalize
DEBUG:ontogpt.engines.knowledge_engine:ID HP:0002027 not in prefixes ['MONDO']
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): nodenormalization-sri.renci.org:443
DEBUG:urllib3.connectionpool:https://nodenormalization-sri.renci.org:443 "GET /1.3/get_normalized_nodes?curie=HP%3A0002027&conflate=false HTTP/1.1" 200 1698
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): nodenormalization-sri.renci.org:443
DEBUG:urllib3.connectionpool:https://nodenormalization-sri.renci.org:443 "GET /1.3/get_normalized_nodes?curie=HP%3A0002027&conflate=true HTTP/1.1" 200 1698
DEBUG:ontogpt.engines.knowledge_engine:ID NCIT:C26682 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID NCIT:C78320 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID NCIT:C78630 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0000737 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0221512 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0232487 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0235309 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0687713 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000059 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000081 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000085 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000429 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10004226 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10013084 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10017814 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10017999 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10018000 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10018241 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10018796 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10033374 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10033402 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10033492 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042076 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042101 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042112 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042124 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042126 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10045148 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10046318 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10064906 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:162059005 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:21522001 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:271681002 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:43364001 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MESH:D015746 not in prefixes ['MONDO']
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Grounding Abdominal pain to HP:0002027; next step is to normalize
DEBUG:ontogpt.engines.knowledge_engine:ID HP:0002027 not in prefixes ['MONDO']
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): nodenormalization-sri.renci.org:443
DEBUG:urllib3.connectionpool:https://nodenormalization-sri.renci.org:443 "GET /1.3/get_normalized_nodes?curie=HP%3A0002027&conflate=false HTTP/1.1" 200 1698
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): nodenormalization-sri.renci.org:443
DEBUG:urllib3.connectionpool:https://nodenormalization-sri.renci.org:443 "GET /1.3/get_normalized_nodes?curie=HP%3A0002027&conflate=true HTTP/1.1" 200 1698
DEBUG:ontogpt.engines.knowledge_engine:ID NCIT:C26682 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID NCIT:C78320 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID NCIT:C78630 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0000737 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0221512 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0232487 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0235309 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID UMLS:C0687713 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000059 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000081 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000085 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10000429 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10004226 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10013084 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10017814 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10017999 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10018000 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10018241 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10018796 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10033374 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10033402 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10033492 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042076 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042101 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042112 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042124 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10042126 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10045148 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10046318 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MEDDRA:10064906 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:162059005 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:21522001 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:271681002 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID SNOMEDCT:43364001 not in prefixes ['MONDO']
DEBUG:ontogpt.engines.knowledge_engine:ID MESH:D015746 not in prefixes ['MONDO']
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Abdominal pain to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING is associated with using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is associated with to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING an increased risk of future healthcare resource utilization using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize an increased risk of future healthcare resource utilization to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'Abdominal pain', 'predicate': 'is associated with', 'object': 'an increased risk of future healthcare resource utilization', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'Abdominal pain', 'predicate': 'is associated with', 'object': 'an increased risk of future healthcare resource utilization', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Frailty and Clinical Outcomes in Patients With IBD.
Keywords: 
PMID: 37578292
Abstract: 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[703]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Frailty and Clinical Outcomes in Patients With IBD.\\nKeywords: \\nPMID: 37578292\\nAbstract: \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=310 request_id=785fc3dbfae421f36fc8d127d6c5f74c response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 26
INFO:root:RAW TEXT: There is no text provided.
ERROR:root:Line 'There is no text provided.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: A comparison of treatment effect sizes in matched phase 2 and phase 3 trials of advanced therapeutics in inflammatory bowel disease: systematic review and meta-analysis.
Keywords: 
PMID: 37578211
Abstract: Phase 2 trials are fundamental to the rational and efficient design of phase 3 trials. We aimed to determine the relationship of treatment effect size estimates from phase 2 and phase 3 clinical trials on advanced therapeutics in inflammatory bowel disease.MEDLINE, EMBASE, CENTRAL, and the Cochrane library were searched from inception to December 19, 2022, to identify paired phase 2 and 3 placebo-controlled induction studies of advanced therapeutics for Crohn's disease (CD) and ulcerative colitis (UC). Treatment effect sizes were expressed as a risk ratio (RR) between the active arm and placebo arm. For the same therapeutics, RR from phase 2 trials were divided by the RR from phase 3 trial to quantify the relationship of effect sizes between phases.Twenty-two studies (9 phase 2 trials, 13 phase 3 trials) were included for CD and 30 studies (12 phase 2 trials, 18 phase 3 trials) for UC. In UC (pooled RR 0.72; 95% confidence interval [CI]: 0.58-0.86; RR <1 indicate smaller treatment effect sizes in phase 2 trials), but not CD (pooled RR 1.01; 95% CI: 0.84-1.18), phase 2 trials systematically underestimated treatment effect sizes for the primary endpoint compared to phase 3 trials. The underestimation was observed for clinical, but not endoscopic endpoints in UC.Treatment effect sizes for the primary and clinical endpoints were similar across clinical trial phases in CD, but not UC, where only endoscopic endpoints were comparable. This will help inform clinical development plans and future trial design.Copyright © 2023 The Author(s). Published by Wolters Kluwer Health, Inc. on behalf of The American College of Gastroenterology.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2473]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: A comparison of treatment effect sizes in matched phase 2 and phase 3 trials of advanced therapeutics in inflammatory bowel disease: systematic review and meta-analysis.\\nKeywords: \\nPMID: 37578211\\nAbstract: Phase 2 trials are fundamental to the rational and efficient design of phase 3 trials. We aimed to determine the relationship of treatment effect size estimates from phase 2 and phase 3 clinical trials on advanced therapeutics in inflammatory bowel disease.MEDLINE, EMBASE, CENTRAL, and the Cochrane library were searched from inception to December 19, 2022, to identify paired phase 2 and 3 placebo-controlled induction studies of advanced therapeutics for Crohn\'s disease (CD) and ulcerative colitis (UC). Treatment effect sizes were expressed as a risk ratio (RR) between the active arm and placebo arm. For the same therapeutics, RR from phase 2 trials were divided by the RR from phase 3 trial to quantify the relationship of effect sizes between phases.Twenty-two studies (9 phase 2 trials, 13 phase 3 trials) were included for CD and 30 studies (12 phase 2 trials, 18 phase 3 trials) for UC. In UC (pooled RR 0.72; 95% confidence interval [CI]: 0.58-0.86; RR <1 indicate smaller treatment effect sizes in phase 2 trials), but not CD (pooled RR 1.01; 95% CI: 0.84-1.18), phase 2 trials systematically underestimated treatment effect sizes for the primary endpoint compared to phase 3 trials. The underestimation was observed for clinical, but not endoscopic endpoints in UC.Treatment effect sizes for the primary and clinical endpoints were similar across clinical trial phases in CD, but not UC, where only endoscopic endpoints were comparable. This will help inform clinical development plans and future trial design.Copyright \\u00a9 2023 The Author(s). Published by Wolters Kluwer Health, Inc. on behalf of The American College of Gastroenterology.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3365 request_id=6b96b032c35739c09f754d63a08d1f46 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 635
INFO:root:RAW TEXT: subject: phase 2 trials
predicate: underestimated
object: treatment effect sizes
subject_qualifier: Not specified
object_qualifier: Not specified

subject: phase 3 trials
predicate: overestimated
object: treatment effect sizes
subject_qualifier: Not specified
object_qualifier: Not specified

subject: treatment effect sizes
predicate: were similar across clinical trial phases
object: primary and clinical endpoints
subject_qualifier: Not specified
object_qualifier: Not specified

subject: treatment effect sizes
predicate: were comparable
object: endoscopic endpoints
subject_qualifier: Not specified
object_qualifier: Not specified
INFO:root:PARSING LINE: subject: phase 2 trials
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['phase 2 trials']
INFO:root:PARSING LINE: predicate: underestimated
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['underestimated']
INFO:root:PARSING LINE: object: treatment effect sizes
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['treatment effect sizes']
INFO:root:PARSING LINE: subject_qualifier: Not specified
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: object_qualifier: Not specified
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: subject: phase 3 trials
DEBUG:root:SLOT: subject INL: False VALS: ['phase 3 trials']
INFO:root:PARSING LINE: predicate: overestimated
DEBUG:root:SLOT: predicate INL: False VALS: ['overestimated']
INFO:root:PARSING LINE: object: treatment effect sizes
DEBUG:root:SLOT: object INL: False VALS: ['treatment effect sizes']
INFO:root:PARSING LINE: subject_qualifier: Not specified
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: object_qualifier: Not specified
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: subject: treatment effect sizes
DEBUG:root:SLOT: subject INL: False VALS: ['treatment effect sizes']
INFO:root:PARSING LINE: predicate: were similar across clinical trial phases
DEBUG:root:SLOT: predicate INL: False VALS: ['were similar across clinical trial phases']
INFO:root:PARSING LINE: object: primary and clinical endpoints
DEBUG:root:SLOT: object INL: False VALS: ['primary and clinical endpoints']
INFO:root:PARSING LINE: subject_qualifier: Not specified
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: object_qualifier: Not specified
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: subject: treatment effect sizes
DEBUG:root:SLOT: subject INL: False VALS: ['treatment effect sizes']
INFO:root:PARSING LINE: predicate: were comparable
DEBUG:root:SLOT: predicate INL: False VALS: ['were comparable']
INFO:root:PARSING LINE: object: endoscopic endpoints
DEBUG:root:SLOT: object INL: False VALS: ['endoscopic endpoints']
INFO:root:PARSING LINE: subject_qualifier: Not specified
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['Not specified']
INFO:root:PARSING LINE: object_qualifier: Not specified
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['Not specified']
DEBUG:root:RAW: {'subject': 'treatment effect sizes', 'predicate': 'were comparable', 'object': 'endoscopic endpoints', 'subject_qualifier': 'Not specified', 'object_qualifier': 'Not specified'}
DEBUG:root:Grounding annotation object {'subject': 'treatment effect sizes', 'predicate': 'were comparable', 'object': 'endoscopic endpoints', 'subject_qualifier': 'Not specified', 'object_qualifier': 'Not specified'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING treatment effect sizes using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized treatment effect sizes to treatment effect size
INFO:ontogpt.engines.knowledge_engine:GROUNDING treatment effect size using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize treatment effect sizes to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING were comparable using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize were comparable to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING endoscopic endpoints using CellularProcess
INFO:ontogpt.engines.knowledge_engine:Singularized endoscopic endpoints to endoscopic endpoint
INFO:ontogpt.engines.knowledge_engine:GROUNDING endoscopic endpoint using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize endoscopic endpoints to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING Not specified using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Not specified to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING Not specified using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Not specified to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'treatment effect sizes', 'predicate': 'were comparable', 'object': 'endoscopic endpoints', 'subject_qualifier': 'Not specified', 'object_qualifier': 'Not specified'}
INFO:root:{'subject': 'treatment effect sizes', 'predicate': 'were comparable', 'object': 'endoscopic endpoints', 'subject_qualifier': 'Not specified', 'object_qualifier': 'Not specified'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: The impact of nonalcoholic fatty liver disease on inflammatory bowel disease-related hospitalization outcomes: a systematic review.
Keywords: 
PMID: 37577829
Abstract: Evidence suggests that patients with inflammatory bowel disease are at higher risk of developing nonalcoholic fatty liver disease (NAFLD). However, there is limited information currently available on how NAFLD may affect the clinical course of IBD. Thus, we conducted a systematic review to evaluate the impact of NAFLD on IBD-related hospitalization outcomes. All observational studies assessing IBD-related hospitalization outcomes in patients with NAFLD were included. Exclusion criteria were studies published in languages other than English or French, or those involving pediatric population. Outcomes included IBD-related hospitalization and readmission rates, need for surgery, length of stay, inpatient mortality, and costs. Overall, 3252 citations were retrieved and seven studies met the inclusion criteria (1 574 937 patients); all were observational, of high quality, and originated in the United States. Measurable outcomes reported in these studies were few and with insufficient similarity across studies to complete a quantitative assessment. Only one study reports NAFLD severity. Two studies suggested a higher rate of hospitalization for patients with both NAFLD and IBD compared to IBD alone (incidence rate ratio of 1.54; 95% confidence interval: 1.33-1.79). This is the first systematic review to date that evaluates any possible association of NAFLD with IBD-related hospitalization outcomes. Despite the paucity and low quality of available data, our findings indicate that NAFLD may be associated with worse outcomes amongst IBD patients (especially Crohn's disease). Further and higher certainty of evidence is needed for better characterization of such clinical impact.Copyright © 2023 Wolters Kluwer Health, Inc. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2544]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: The impact of nonalcoholic fatty liver disease on inflammatory bowel disease-related hospitalization outcomes: a systematic review.\\nKeywords: \\nPMID: 37577829\\nAbstract: Evidence suggests that patients with inflammatory bowel disease are at higher risk of developing nonalcoholic fatty liver disease (NAFLD). However, there is limited information currently available on how NAFLD may affect the clinical course of IBD. Thus, we conducted a systematic review to evaluate the impact of NAFLD on IBD-related hospitalization outcomes. All observational studies assessing IBD-related hospitalization outcomes in patients with NAFLD were included. Exclusion criteria were studies published in languages other than English or French, or those involving pediatric population. Outcomes included IBD-related hospitalization and readmission rates, need for surgery, length of stay, inpatient mortality, and costs. Overall, 3252 citations were retrieved and seven studies met the inclusion criteria (1\\u2005574\\u2005937 patients); all were observational, of high quality, and originated in the United States. Measurable outcomes reported in these studies were few and with insufficient similarity across studies to complete a quantitative assessment. Only one study reports NAFLD severity. Two studies suggested a higher rate of hospitalization for patients with both NAFLD and IBD compared to IBD alone (incidence rate ratio of 1.54; 95% confidence interval: 1.33-1.79). This is the first systematic review to date that evaluates any possible association of NAFLD with IBD-related hospitalization outcomes. Despite the paucity and low quality of available data, our findings indicate that NAFLD may be associated with worse outcomes amongst IBD patients (especially Crohn\'s disease). Further and higher certainty of evidence is needed for better characterization of such clinical impact.Copyright \\u00a9 2023 Wolters Kluwer Health, Inc. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1251 request_id=1dd7e37f2be06b9775b06917b5b0ca92 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 190
INFO:root:RAW TEXT: subject: nonalcoholic fatty liver disease (NAFLD)
predicate: affect
object: clinical course of IBD (inflammatory bowel disease)
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: nonalcoholic fatty liver disease (NAFLD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['nonalcoholic fatty liver disease (NAFLD)']
INFO:root:PARSING LINE: predicate: affect
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['affect']
INFO:root:PARSING LINE: object: clinical course of IBD (inflammatory bowel disease)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['clinical course of IBD (inflammatory bowel disease)']
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'nonalcoholic fatty liver disease (NAFLD)', 'predicate': 'affect', 'object': 'clinical course of IBD (inflammatory bowel disease)', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'nonalcoholic fatty liver disease (NAFLD)', 'predicate': 'affect', 'object': 'clinical course of IBD (inflammatory bowel disease)', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING nonalcoholic fatty liver disease (NAFLD) using Disease
INFO:ontogpt.engines.knowledge_engine:nonalcoholic fatty liver disease (nafld) =>paren=> ['nafld']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF nafld from ['nafld']
INFO:ontogpt.engines.knowledge_engine:GROUNDING nafld using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Grounding nonalcoholic fatty liver disease (NAFLD) to MONDO:0013209; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized nonalcoholic fatty liver disease (NAFLD) with MONDO:0013209 to MONDO:0013209
INFO:ontogpt.engines.knowledge_engine:GROUNDING affect using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize affect to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING clinical course of IBD (inflammatory bowel disease) using CellularProcess
INFO:ontogpt.engines.knowledge_engine:clinical course of ibd (inflammatory bowel disease) =>paren=> ['inflammatory bowel disease']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF inflammatory bowel disease from ['inflammatory bowel disease']
INFO:ontogpt.engines.knowledge_engine:GROUNDING inflammatory bowel disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:clinical course of ibd (inflammatory bowel disease) =>trimmed=> clinical course of ibd; in ['inflammatory bowel disease']
INFO:ontogpt.engines.knowledge_engine:GROUNDING clinical course of ibd using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize clinical course of IBD (inflammatory bowel disease) to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0013209', 'predicate': 'affect', 'object': 'clinical course of IBD (inflammatory bowel disease)', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'MONDO:0013209', 'predicate': 'affect', 'object': 'clinical course of IBD (inflammatory bowel disease)', 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Risk and incidence of colorectal stricture progressing to colorectal neoplasia in patients with inflammatory bowel disease: a systematic review and meta-analysis.
Keywords: 
PMID: 37577790
Abstract: This study aims to assess the risk of colorectal stricture progressing to colorectal neoplasia (CRN) in patients with inflammatory bowel disease (IBD). The literature from PubMed, Embase, Web of Science, and Cochrane Library databases was searched from the date of databases' creation to 5 November 2022. The Newcastle-Ottawa Scale was used to evaluate the quality of the included literature. Meta-analysis was conducted using the Stata 15 software and R 4.04 software. Two case-control studies and 12 cohort studies were eventually included. Colorectal stricture in patients with IBD increased the risk of progressing to CRN [odds ratio (OR): 1.52, 95% confidence interval (CI): 1.02-2.29, P = 0.042], but was irrelevant to the risk of progressing to ACRN (OR: 3.56, 95% CI 0.56-22.70, P = 0.180). The risk of CRN were further distinguished in patients with ulcerative colitis (UC) and Crohn's disease (CD) Our findings showed that colorectal stricture may increase the risk of progressing to CRN in patients with UC (OR = 3.53, 95%CI 1.62-7.68, P = 0.001), but was irrelevant to the risk of progressing to CRN in patients with CD (OR = 1.09, 95% CI 0.54-2.21, P = 0.811). In conclusion, colorectal stricture in patients with IBD can be used as a risk factor for predicting CRN but cannot be used as a risk factor for predicting ACRN. Stricture is a risk factor for CRN in patients with UC but not in patients with CD. More prospective, multi-center studies with large samples are expected to confirm our findings.Copyright © 2023 Wolters Kluwer Health, Inc. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2394]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Risk and incidence of colorectal stricture progressing to colorectal neoplasia in patients with inflammatory bowel disease: a systematic review and meta-analysis.\\nKeywords: \\nPMID: 37577790\\nAbstract: This study aims to assess the risk of colorectal stricture progressing to colorectal neoplasia (CRN) in patients with inflammatory bowel disease (IBD). The literature from PubMed, Embase, Web of Science, and Cochrane Library databases was searched from the date of databases\' creation to 5 November 2022. The Newcastle-Ottawa Scale was used to evaluate the quality of the included literature. Meta-analysis was conducted using the Stata 15 software and R 4.04 software. Two case-control studies and 12 cohort studies were eventually included. Colorectal stricture in patients with IBD increased the risk of progressing to CRN [odds ratio (OR): 1.52, 95% confidence interval (CI): 1.02-2.29, P = 0.042], but was irrelevant to the risk of progressing to ACRN (OR: 3.56, 95% CI 0.56-22.70, P = 0.180). The risk of CRN were further distinguished in patients with ulcerative colitis (UC) and Crohn\'s disease (CD) Our findings showed that colorectal stricture may increase the risk of progressing to CRN in patients with UC (OR = 3.53, 95%CI 1.62-7.68, P = 0.001), but was irrelevant to the risk of progressing to CRN in patients with CD (OR = 1.09, 95% CI 0.54-2.21, P = 0.811). In conclusion, colorectal stricture in patients with IBD can be used as a risk factor for predicting CRN but cannot be used as a risk factor for predicting ACRN. Stricture is a risk factor for CRN in patients with UC but not in patients with CD. More prospective, multi-center studies with large samples are expected to confirm our findings.Copyright \\u00a9 2023 Wolters Kluwer Health, Inc. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1668 request_id=cc94c4dc74ccd7e0d1d00ee80f2a89a4 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 185
INFO:root:RAW TEXT: subject: colorectal stricture
predicate: progressing to colorectal neoplasia (CRN)
object: patients with inflammatory bowel disease (IBD)

subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: colorectal stricture
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['colorectal stricture']
INFO:root:PARSING LINE: predicate: progressing to colorectal neoplasia (CRN)
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['progressing to colorectal neoplasia (CRN)']
INFO:root:PARSING LINE: object: patients with inflammatory bowel disease (IBD)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['patients with inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': 'colorectal stricture', 'predicate': 'progressing to colorectal neoplasia (CRN)', 'object': 'patients with inflammatory bowel disease (IBD)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': 'colorectal stricture', 'predicate': 'progressing to colorectal neoplasia (CRN)', 'object': 'patients with inflammatory bowel disease (IBD)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING colorectal stricture using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize colorectal stricture to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING progressing to colorectal neoplasia (CRN) using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:progressing to colorectal neoplasia (crn) =>paren=> ['crn']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF crn from ['crn']
INFO:ontogpt.engines.knowledge_engine:GROUNDING crn using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:progressing to colorectal neoplasia (crn) =>trimmed=> progressing to colorectal neoplasia; in ['crn']
INFO:ontogpt.engines.knowledge_engine:GROUNDING progressing to colorectal neoplasia using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized progressing to colorectal neoplasia to progressing to colorectal neoplasium
INFO:ontogpt.engines.knowledge_engine:GROUNDING progressing to colorectal neoplasium using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize progressing to colorectal neoplasia (CRN) to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING patients with inflammatory bowel disease (IBD) using CellularProcess
INFO:ontogpt.engines.knowledge_engine:patients with inflammatory bowel disease (ibd) =>paren=> ['ibd']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF ibd from ['ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING ibd using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:patients with inflammatory bowel disease (ibd) =>trimmed=> patients with inflammatory bowel disease; in ['ibd']
INFO:ontogpt.engines.knowledge_engine:GROUNDING patients with inflammatory bowel disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize patients with inflammatory bowel disease (IBD) to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'colorectal stricture', 'predicate': 'progressing to colorectal neoplasia (CRN)', 'object': 'patients with inflammatory bowel disease (IBD)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': 'colorectal stricture', 'predicate': 'progressing to colorectal neoplasia (CRN)', 'object': 'patients with inflammatory bowel disease (IBD)', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Extraintestinal Manifestations in Induced Colitis: Controversial Effects of N-Acetylcysteine on Colon, Liver, and Kidney.
Keywords: 
PMID: 37577725
Abstract: Ulcerative colitis (UC) is a chronic and recurrent inflammatory bowel disease (IBD) characterized by continuous inflammation in the colonic mucosa. Extraintestinal manifestations (EIM) occur due to the disruption of the intestinal barrier and increased permeability caused by redox imbalance, dysbiosis, and inflammation originating from the intestine and contribute to morbidity and mortality. The aim of this study is to investigate the effects of oral N-acetylcysteine (NAC) on colonic, hepatic, and renal tissues in mice with colitis induced by dextran sulfate sodium (DSS). Male Swiss mice received NAC (150 mg/kg/day) in the drinking water for 30 days before and during (DSS 5% v/v; for 7 days) colitis induction. On the 38th day, colon, liver, and kidney were collected and adequately prepared for the analysis of oxidative stress (superoxide dismutase (SOD), catalase (CAT), glutathione reduced (GSH), glutathione oxidized (GSSG), malondialdehyde (MDA), and hydrogen peroxide (H2O2)) and inflammatory biomarkers (myeloperoxidase (MPO) -, tumor necrosis factor alpha - (TNF-α, and interleukin-10 (IL-10)). In colon, NAC protected the histological architecture. However, NAC did not level up SOD, in contrast, it increased MDA and pro-inflammatory effect (increased of TNF-α and decreased of IL-10). In liver, colitis caused both oxidative (MDA, SOD, and GSH) and inflammatory damage (IL-10). NAC was able only to increase GSH and GSH/GSSG ratio. Kidney was not affected by colitis; however, NAC despite increasing CAT, GSH, and GSH/GSSG ratio promoted lipid peroxidation (increased MDA) and pro-inflammatory action (decreased IL-10). Despite some beneficial antioxidant effects of NAC, the negative outcomes concerning irreversible oxidative and inflammatory damage in the colon, liver, and kidney confirm the nonsafety of the prophylactic use of this antioxidant in models of induced colitis, suggesting that additional studies are needed, and its use in humans not yet recommended for the therapeutic routine of this disease.Copyright © 2023 Amylly Sanuelly da Paz Martins et al.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2861]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Extraintestinal Manifestations in Induced Colitis: Controversial Effects of N-Acetylcysteine on Colon, Liver, and Kidney.\\nKeywords: \\nPMID: 37577725\\nAbstract: Ulcerative colitis (UC) is a chronic and recurrent inflammatory bowel disease (IBD) characterized by continuous inflammation in the colonic mucosa. Extraintestinal manifestations (EIM) occur due to the disruption of the intestinal barrier and increased permeability caused by redox imbalance, dysbiosis, and inflammation originating from the intestine and contribute to morbidity and mortality. The aim of this study is to investigate the effects of oral N-acetylcysteine (NAC) on colonic, hepatic, and renal tissues in mice with colitis induced by dextran sulfate sodium (DSS). Male Swiss mice received NAC (150\\u2009mg/kg/day) in the drinking water for 30 days before and during (DSS 5% v/v; for 7 days) colitis induction. On the 38th day, colon, liver, and kidney were collected and adequately prepared for the analysis of oxidative stress (superoxide dismutase (SOD), catalase (CAT), glutathione reduced (GSH), glutathione oxidized (GSSG), malondialdehyde (MDA), and hydrogen peroxide (H2O2)) and inflammatory biomarkers (myeloperoxidase (MPO) -, tumor necrosis factor alpha - (TNF-\\u03b1, and interleukin-10 (IL-10)). In colon, NAC protected the histological architecture. However, NAC did not level up SOD, in contrast, it increased MDA and pro-inflammatory effect (increased of TNF-\\u03b1 and decreased of IL-10). In liver, colitis caused both oxidative (MDA, SOD, and GSH) and inflammatory damage (IL-10). NAC was able only to increase GSH and GSH/GSSG ratio. Kidney was not affected by colitis; however, NAC despite increasing CAT, GSH, and GSH/GSSG ratio promoted lipid peroxidation (increased MDA) and pro-inflammatory action (decreased IL-10). Despite some beneficial antioxidant effects of NAC, the negative outcomes concerning irreversible oxidative and inflammatory damage in the colon, liver, and kidney confirm the nonsafety of the prophylactic use of this antioxidant in models of induced colitis, suggesting that additional studies are needed, and its use in humans not yet recommended for the therapeutic routine of this disease.Copyright \\u00a9 2023 Amylly Sanuelly da Paz Martins et al.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6736 request_id=869eba0beba40b424211769187d7f622 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1061
INFO:root:RAW TEXT: subject: Ulcerative colitis
predicate: is a chronic and recurrent inflammatory bowel disease
object: 

subject: Extraintestinal manifestations
predicate: occur due to the disruption of the intestinal barrier and increased permeability caused by redox imbalance, dysbiosis, and inflammation originating from the intestine
object: 

subject: N-Acetylcysteine
predicate: had controversial effects on colon, liver, and kidney
object: 

subject: Colon
predicate: was protected in terms of histological architecture by N-Acetylcysteine
object: 

subject: N-Acetylcysteine
predicate: did not level up SOD, increased MDA and pro-inflammatory effect in colon
object: 

subject: Liver
predicate: experienced oxidative and inflammatory damage due to colitis
object: 

subject: N-Acetylcysteine
predicate: increased GSH and GSH/GSSG ratio in liver
object: 

subject: Kidney
predicate: was not affected by colitis
object: 

subject: N-Acetylcysteine
predicate: increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney
object:
INFO:root:PARSING LINE: subject: Ulcerative colitis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Ulcerative colitis']
INFO:root:PARSING LINE: predicate: is a chronic and recurrent inflammatory bowel disease
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is a chronic and recurrent inflammatory bowel disease']
INFO:root:PARSING LINE: object:
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
INFO:root:PARSING LINE: subject: Extraintestinal manifestations
DEBUG:root:SLOT: subject INL: False VALS: ['Extraintestinal manifestations']
INFO:root:PARSING LINE: predicate: occur due to the disruption of the intestinal barrier and increased permeability caused by redox imbalance, dysbiosis, and inflammation originating from the intestine
DEBUG:root:SLOT: predicate INL: False VALS: ['occur due to the disruption of the intestinal barrier and increased permeability caused by redox imbalance, dysbiosis, and inflammation originating from the intestine']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: N-Acetylcysteine
DEBUG:root:SLOT: subject INL: False VALS: ['N-Acetylcysteine']
INFO:root:PARSING LINE: predicate: had controversial effects on colon, liver, and kidney
DEBUG:root:SLOT: predicate INL: False VALS: ['had controversial effects on colon, liver, and kidney']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: Colon
DEBUG:root:SLOT: subject INL: False VALS: ['Colon']
INFO:root:PARSING LINE: predicate: was protected in terms of histological architecture by N-Acetylcysteine
DEBUG:root:SLOT: predicate INL: False VALS: ['was protected in terms of histological architecture by N-Acetylcysteine']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: N-Acetylcysteine
DEBUG:root:SLOT: subject INL: False VALS: ['N-Acetylcysteine']
INFO:root:PARSING LINE: predicate: did not level up SOD, increased MDA and pro-inflammatory effect in colon
DEBUG:root:SLOT: predicate INL: False VALS: ['did not level up SOD, increased MDA and pro-inflammatory effect in colon']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: Liver
DEBUG:root:SLOT: subject INL: False VALS: ['Liver']
INFO:root:PARSING LINE: predicate: experienced oxidative and inflammatory damage due to colitis
DEBUG:root:SLOT: predicate INL: False VALS: ['experienced oxidative and inflammatory damage due to colitis']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: N-Acetylcysteine
DEBUG:root:SLOT: subject INL: False VALS: ['N-Acetylcysteine']
INFO:root:PARSING LINE: predicate: increased GSH and GSH/GSSG ratio in liver
DEBUG:root:SLOT: predicate INL: False VALS: ['increased GSH and GSH/GSSG ratio in liver']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: Kidney
DEBUG:root:SLOT: subject INL: False VALS: ['Kidney']
INFO:root:PARSING LINE: predicate: was not affected by colitis
DEBUG:root:SLOT: predicate INL: False VALS: ['was not affected by colitis']
INFO:root:PARSING LINE: object:
INFO:root:PARSING LINE: subject: N-Acetylcysteine
DEBUG:root:SLOT: subject INL: False VALS: ['N-Acetylcysteine']
INFO:root:PARSING LINE: predicate: increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney
DEBUG:root:SLOT: predicate INL: False VALS: ['increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney']
INFO:root:PARSING LINE: object:
DEBUG:root:RAW: {'subject': 'N-Acetylcysteine', 'predicate': 'increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney'}
DEBUG:root:Grounding annotation object {'subject': 'N-Acetylcysteine', 'predicate': 'increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING N-Acetylcysteine using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize N-Acetylcysteine to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney to DiseaseToCellularProcessPredicate
DEBUG:root:Creating object from dict {'subject': 'N-Acetylcysteine', 'predicate': 'increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney'}
INFO:root:{'subject': 'N-Acetylcysteine', 'predicate': 'increased CAT, GSH, and GSH/GSSG ratio, promoted lipid peroxidation and pro-inflammatory action in kidney'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Intra-host variation in the spike S1/S2 region of a feline coronavirus type-1 in a cat with persistent infection.
Keywords: 
PMID: 37577589
Abstract: Feline coronavirus type 1 (FCoV-1) is widely known for causing feline infectious peritonitis (FIP), a systemic infection that is often fatal, with the virus known as the FIPV biotype. However, subclinical disease also occurs, in which cats may not show signs and intermittently shed the virus, including in feces, possibly for long periods of time. This virus is known as the FECV biotype. Progression of FECV to FIPV has been linked to several genomic changes, however a specific region of the viral spike protein at the interface of the spike S1 and S2 domains has been especially implicated. In this study, we followed a cat (#576) for six years from 2017, at which time FCoV-1 was detected in feces and conjunctival swabs, until 2022, when the animal was euthanized based on a diagnosis of alimentary small cell lymphoma. Over this time period, the cat was clinically diagnosed with inflammatory bowel disease and chronic rhinitis, and cardiac problems were also suspected. Using hybridization capture targeting the spike (S) gene of FCoV followed by next-generation sequencing, we screened 27 clinical samples. We detected FCoV-1 in 4 samples taken in 2017 (intestine and nasal tissue, feces, and conjunctiva), and 3 samples taken in 2022 (feces, and intestinal and heart tissue), but not in fecal samples taken in 2019 and 2020. Next, we focused on the S1/S2 region within S, which contains the furin cleavage site (FCS), a key regulator of viral transmission and pathogenesis. We show that the FCoV-1 variants obtained from feces in 2017 and 2022 were identical, while the ones from conjunctiva (2017), heart (2022), and intestine (2017 and 2022) were distinct. Sequence comparison of all the variants obtained showed that most of the non-synonymous changes in the S1/S2 region occur within the FCS. In the heart, we found two variants that differed by a single nucleotide, resulting in distinct FCS motifs that differ in one amino acid. It is predicted that one of these FCS motifs will down-regulate spike cleavability. The variant from the conjunctiva (2017) had a 6-nucleotide in-frame insertion that resulted in a longer and more exposed S1/S2 loop, which is predicted to be more accessible to the furin protease. Our studies indicate that FCoV-1 can independently persist in the gastrointestinal tract and heart of a cat over a long period of time without evidence of typical FIP signs, with intermittent viral shedding from the gastrointestinal and respiratory tracts.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3247]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Intra-host variation in the spike S1/S2 region of a feline coronavirus type-1 in a cat with persistent infection.\\nKeywords: \\nPMID: 37577589\\nAbstract: Feline coronavirus type 1 (FCoV-1) is widely known for causing feline infectious peritonitis (FIP), a systemic infection that is often fatal, with the virus known as the FIPV biotype. However, subclinical disease also occurs, in which cats may not show signs and intermittently shed the virus, including in feces, possibly for long periods of time. This virus is known as the FECV biotype. Progression of FECV to FIPV has been linked to several genomic changes, however a specific region of the viral spike protein at the interface of the spike S1 and S2 domains has been especially implicated. In this study, we followed a cat (#576) for six years from 2017, at which time FCoV-1 was detected in feces and conjunctival swabs, until 2022, when the animal was euthanized based on a diagnosis of alimentary small cell lymphoma. Over this time period, the cat was clinically diagnosed with inflammatory bowel disease and chronic rhinitis, and cardiac problems were also suspected. Using hybridization capture targeting the spike (S) gene of FCoV followed by next-generation sequencing, we screened 27 clinical samples. We detected FCoV-1 in 4 samples taken in 2017 (intestine and nasal tissue, feces, and conjunctiva), and 3 samples taken in 2022 (feces, and intestinal and heart tissue), but not in fecal samples taken in 2019 and 2020. Next, we focused on the S1/S2 region within S, which contains the furin cleavage site (FCS), a key regulator of viral transmission and pathogenesis. We show that the FCoV-1 variants obtained from feces in 2017 and 2022 were identical, while the ones from conjunctiva (2017), heart (2022), and intestine (2017 and 2022) were distinct. Sequence comparison of all the variants obtained showed that most of the non-synonymous changes in the S1/S2 region occur within the FCS. In the heart, we found two variants that differed by a single nucleotide, resulting in distinct FCS motifs that differ in one amino acid. It is predicted that one of these FCS motifs will down-regulate spike cleavability. The variant from the conjunctiva (2017) had a 6-nucleotide in-frame insertion that resulted in a longer and more exposed S1/S2 loop, which is predicted to be more accessible to the furin protease. Our studies indicate that FCoV-1 can independently persist in the gastrointestinal tract and heart of a cat over a long period of time without evidence of typical FIP signs, with intermittent viral shedding from the gastrointestinal and respiratory tracts.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=503 request_id=1df0da86aa5163f29a69356cfd15bbce response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 94
INFO:root:RAW TEXT: No relevant entities related to diseases and cellular processes are present in the given text.
ERROR:root:Line 'No relevant entities related to diseases and cellular processes are present in the given text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Diarrheal-associated gut dysbiosis in cancer and inflammatory bowel disease patients is exacerbated by Clostridioides difficile infection.
Keywords: CDI; Clostridioides difficile; diarrhea; gut dysbiosis; inflammatory bowel disease; metabolites; microbiome
PMID: 37577378
Abstract: Low diversity gut dysbiosis can take different forms depending on the disease context. In this study, we used shotgun metagenomic sequencing and gas chromatography-mass spectrometry (GC-MS) to compared the metagenomic and metabolomic profiles of Clostridioides (Clostridium) difficile diarrheal cancer and inflammatory bowel disease (IBD) patients and defined the additive effect of C. difficile infection (CDI) on intestinal dysbiosis.The study cohort consisted of 138 case-mix cancer patients, 43 IBD patients, and 45 healthy control individuals. Thirty-three patients were also infected with C. difficile. In the control group, three well-known enterotypes were identified, while the other groups presented with an additional Escherichia-driven enterotype. Bacterial diversity was significantly lower in all groups than in healthy controls, while the highest level of bacterial species richness was observed in cancer patients. Fifty-six bacterial species had abundance levels that differentiated diarrheal patient groups from the control group. Of these species, 52 and 4 (Bacteroides fragilis, Escherichia coli, Klebsiella pneumoniae, and Ruminococcus gnavus) were under-represented and over-represented, respectively, in all diarrheal patient groups. The relative abundances of propionate and butyrate were significantly lower in fecal samples from IBD and CDI patients than in control samples. Isobutyrate, propanate, and butyrate concentrations were lower in cancer, IBD, and CDI samples, respectively. Glycine and valine amino acids were over- represented in diarrheal patients.Our data indicate that different external and internal factors drive comparable profiles of low diversity dysbiosis. While diarrheal-related low diversity dysbiosis may be a consequence of systemic cancer therapy, a similar phenotype is observed in cases of moderate to severe IBD, and in both cases, dysbiosis is exacerbated by incidence of CDI.Copyright © 2023 Kulecka, Zeber-Lubecka, Bałabas, Czarnowski, Bagińska, Głowienka, Kluska, Piątkowska, Dąbrowska, Waker, Mikula and Ostrowski.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2972]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Diarrheal-associated gut dysbiosis in cancer and inflammatory bowel disease patients is exacerbated by Clostridioides difficile infection.\\nKeywords: CDI; Clostridioides difficile; diarrhea; gut dysbiosis; inflammatory bowel disease; metabolites; microbiome\\nPMID: 37577378\\nAbstract: Low diversity gut dysbiosis can take different forms depending on the disease context. In this study, we used shotgun metagenomic sequencing and gas chromatography-mass spectrometry (GC-MS) to compared the metagenomic and metabolomic profiles of Clostridioides (Clostridium) difficile diarrheal cancer and inflammatory bowel disease (IBD) patients and defined the additive effect of C. difficile infection (CDI) on intestinal dysbiosis.The study cohort consisted of 138 case-mix cancer patients, 43 IBD patients, and 45 healthy control individuals. Thirty-three patients were also infected with C. difficile. In the control group, three well-known enterotypes were identified, while the other groups presented with an additional Escherichia-driven enterotype. Bacterial diversity was significantly lower in all groups than in healthy controls, while the highest level of bacterial species richness was observed in cancer patients. Fifty-six bacterial species had abundance levels that differentiated diarrheal patient groups from the control group. Of these species, 52 and 4 (Bacteroides fragilis, Escherichia coli, Klebsiella pneumoniae, and Ruminococcus gnavus) were under-represented and over-represented, respectively, in all diarrheal patient groups. The relative abundances of propionate and butyrate were significantly lower in fecal samples from IBD and CDI patients than in control samples. Isobutyrate, propanate, and butyrate concentrations were lower in cancer, IBD, and CDI samples, respectively. Glycine and valine amino acids were over- represented in diarrheal patients.Our data indicate that different external and internal factors drive comparable profiles of low diversity dysbiosis. While diarrheal-related low diversity dysbiosis may be a consequence of systemic cancer therapy, a similar phenotype is observed in cases of moderate to severe IBD, and in both cases, dysbiosis is exacerbated by incidence of CDI.Copyright \\u00a9 2023 Kulecka, Zeber-Lubecka, Ba\\u0142abas, Czarnowski, Bagi\\u0144ska, G\\u0142owienka, Kluska, Pi\\u0105tkowska, D\\u0105browska, Waker, Mikula and Ostrowski.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=662 request_id=c590a439808653c75c12d2e9e3067088 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 94
INFO:root:RAW TEXT: subject: gut dysbiosis
predicate: is exacerbated by
object: Clostridioides difficile infection
INFO:root:PARSING LINE: subject: gut dysbiosis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['gut dysbiosis']
INFO:root:PARSING LINE: predicate: is exacerbated by
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is exacerbated by']
INFO:root:PARSING LINE: object: Clostridioides difficile infection
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['Clostridioides difficile infection']
DEBUG:root:RAW: {'subject': 'gut dysbiosis', 'predicate': 'is exacerbated by', 'object': 'Clostridioides difficile infection'}
DEBUG:root:Grounding annotation object {'subject': 'gut dysbiosis', 'predicate': 'is exacerbated by', 'object': 'Clostridioides difficile infection'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING gut dysbiosis using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized gut dysbiosis to gut dysbiosi
INFO:ontogpt.engines.knowledge_engine:GROUNDING gut dysbiosi using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize gut dysbiosis to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING is exacerbated by using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is exacerbated by to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING Clostridioides difficile infection using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Clostridioides difficile infection to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'gut dysbiosis', 'predicate': 'is exacerbated by', 'object': 'Clostridioides difficile infection'}
INFO:root:{'subject': 'gut dysbiosis', 'predicate': 'is exacerbated by', 'object': 'Clostridioides difficile infection'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Application of single-cell omics in inflammatory bowel disease.
Keywords: Crohn’s disease; Inflammatory bowel disease; Precision medicine; Single cell RNA-sequencing; Single-cell omics; Ulcerative colitis
PMID: 37576705
Abstract: Over the past decade, the advent of single cell RNA-sequencing has revolutionized the approach in cellular transcriptomics research. The current technology offers an unbiased platform to understand how genotype correlates to phenotype. Single-cell omics applications in gastrointestinal (GI) research namely inflammatory bowel disease (IBD) has become popular in the last few years with multiple publications as single-cell omics techniques can be applied directly to the target organ, the GI tract at the tissue level. Through examination of mucosal tissue and peripheral blood in IBD, the recent boom in single cell research has identified a myriad of key immune players from enterocytes to tissue resident memory T cells, and explored functional heterogeneity within cellular subsets previously unreported. As we begin to unravel the complex mucosal immune system in states of health and disease like IBD, the power of exploration through single-cell omics can change our approach to translational research. As novel techniques evolve through multiplexing single-cell omics and spatial transcriptomics come to the forefront, we can begin to fully comprehend the disease IBD and better design targets of treatment. In addition, hopefully these techniques can ultimately begin to identify biomarkers of therapeutic response and answer clinically relevant questions in how to tailor individual therapy to patients through personalized medicine.©The Author(s) 2023. Published by Baishideng Publishing Group Inc. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2376]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Application of single-cell omics in inflammatory bowel disease.\\nKeywords: Crohn\\u2019s disease; Inflammatory bowel disease; Precision medicine; Single cell RNA-sequencing; Single-cell omics; Ulcerative colitis\\nPMID: 37576705\\nAbstract: Over the past decade, the advent of single cell RNA-sequencing has revolutionized the approach in cellular transcriptomics research. The current technology offers an unbiased platform to understand how genotype correlates to phenotype. Single-cell omics applications in gastrointestinal (GI) research namely inflammatory bowel disease (IBD) has become popular in the last few years with multiple publications as single-cell omics techniques can be applied directly to the target organ, the GI tract at the tissue level. Through examination of mucosal tissue and peripheral blood in IBD, the recent boom in single cell research has identified a myriad of key immune players from enterocytes to tissue resident memory T cells, and explored functional heterogeneity within cellular subsets previously unreported. As we begin to unravel the complex mucosal immune system in states of health and disease like IBD, the power of exploration through single-cell omics can change our approach to translational research. As novel techniques evolve through multiplexing single-cell omics and spatial transcriptomics come to the forefront, we can begin to fully comprehend the disease IBD and better design targets of treatment. In addition, hopefully these techniques can ultimately begin to identify biomarkers of therapeutic response and answer clinically relevant questions in how to tailor individual therapy to patients through personalized medicine.\\u00a9The Author(s) 2023. Published by Baishideng Publishing Group Inc. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=347 request_id=868c845f33a7dac365ba04a0063e70c2 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 121
INFO:root:RAW TEXT: No relevant information regarding the relationship between a disease and a cellular process is present in the given text.
ERROR:root:Line 'No relevant information regarding the relationship between a disease and a cellular process is present in the given text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Intestinal Ultrasound in Inflammatory Bowel Disease: A Novel and Increasingly Important Tool.
Keywords: Crohn’s disease; inflammatory bowel disease; intestinal ultrasound; ulcerative colitis
PMID: 37576427
Abstract: New and efficacious medical therapies have become available that have greatly enhanced clinicians' ability to manage inflammatory bowel diseases (IBDs). IBD activity should be assessed regularly in scheduled examinations as the part of a treat-to-target strategy for IBD care. The gold-standard approach to investigating IBD is colonoscopy, but this is an invasive procedure. Intestinal ultrasound (IUS) has played a crucial role in recent years regarding the assessment of IBD activity because it is noninvasive, safe, reproducible, and inexpensive. IUS findings could inform changes in therapeutic interventions for IBDs; this would necessitate fewer endoscopies and enable faster decision-making processes. Furthermore, patients are accepting and tolerant of IUS examinations. This review outlines the current evidence and gives indication regarding the use of IUS in the management of IBDs.Copyright: © 2023 Journal of Medical Ultrasound.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1773]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Intestinal Ultrasound in Inflammatory Bowel Disease: A Novel and Increasingly Important Tool.\\nKeywords: Crohn\\u2019s disease; inflammatory bowel disease; intestinal ultrasound; ulcerative colitis\\nPMID: 37576427\\nAbstract: New and efficacious medical therapies have become available that have greatly enhanced clinicians\' ability to manage inflammatory bowel diseases (IBDs). IBD activity should be assessed regularly in scheduled examinations as the part of a treat-to-target strategy for IBD care. The gold-standard approach to investigating IBD is colonoscopy, but this is an invasive procedure. Intestinal ultrasound (IUS) has played a crucial role in recent years regarding the assessment of IBD activity because it is noninvasive, safe, reproducible, and inexpensive. IUS findings could inform changes in therapeutic interventions for IBDs; this would necessitate fewer endoscopies and enable faster decision-making processes. Furthermore, patients are accepting and tolerant of IUS examinations. This review outlines the current evidence and gives indication regarding the use of IUS in the management of IBDs.Copyright: \\u00a9 2023 Journal of Medical Ultrasound.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=638 request_id=41d1d6ec839b6c5b2d4f9fc6706dfe74 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 109
INFO:root:RAW TEXT: There are no statements describing a relationship between a disease and a cellular process in the given text.
ERROR:root:Line 'There are no statements describing a relationship between a disease and a cellular process in the given text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Identifying predictors of clinical outcomes using the projection-predictive feature selection-a proof of concept on the example of Crohn's disease.
Keywords: Bayesian; C-reactive protein; Shiny application; calprotectin; endoscopy; inflammatory bowel disease; monitoring; ordinal regression model
PMID: 37576142
Abstract: Several clinical disease activity indices (DAIs) have been developed to noninvasively assess mucosal healing in pediatric Crohn's disease (CD). However, their clinical application can be complex. Therefore, we present a new way to identify the most informative biomarkers for mucosal inflammation from current markers in use and, based on this, how to obtain an easy-to-use DAI for clinical practice. A further aim of our proof-of-concept study is to demonstrate how the performance of such a new DAI can be compared to that of existing DAIs.The data of two independent study cohorts, with 167 visits from 109 children and adolescents with CD, were evaluated retrospectively. A variable selection based on a Bayesian ordinal regression model was applied to select clinical or standard laboratory parameters as predictors, using an endoscopic outcome. The predictive performance of the resulting model was compared to that of existing pediatric DAIs.With our proof-of-concept dataset, the resulting model included C-reactive protein (CRP) and fecal calprotectin (FC) as predictors. In general, our model performed better than the existing DAIs. To show how our Bayesian approach can be applied in practice, we developed a web application for predicting disease activity for a new CD patient or visit.Our work serves as a proof-of-concept, showing that the statistical methods used here can identify biomarkers relevant for the prediction of a clinical outcome. In our case, a small number of biomarkers is sufficient, which, together with the web interface, facilitates the clinical application. However, the retrospective nature of our study, the rather small amount of data, and the lack of an external validation cohort do not allow us to consider our results as the establishment of a novel DAI for pediatric CD. This needs to be done with the help of a prospective study with more data and an external validation cohort in the future.© 2023 Wirthgen, Weber, Kubickova-Weber, Schiller, Schiller, Radke and Däbritz.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2954]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Identifying predictors of clinical outcomes using the projection-predictive feature selection-a proof of concept on the example of Crohn\'s disease.\\nKeywords: Bayesian; C-reactive protein; Shiny application; calprotectin; endoscopy; inflammatory bowel disease; monitoring; ordinal regression model\\nPMID: 37576142\\nAbstract: Several clinical disease activity indices (DAIs) have been developed to noninvasively assess mucosal healing in pediatric Crohn\'s disease (CD). However, their clinical application can be complex. Therefore, we present a new way to identify the most informative biomarkers for mucosal inflammation from current markers in use and, based on this, how to obtain an easy-to-use DAI for clinical practice. A further aim of our proof-of-concept study is to demonstrate how the performance of such a new DAI can be compared to that of existing DAIs.The data of two independent study cohorts, with 167 visits from 109 children and adolescents with CD, were evaluated retrospectively. A variable selection based on a Bayesian ordinal regression model was applied to select clinical or standard laboratory parameters as predictors, using an endoscopic outcome. The predictive performance of the resulting model was compared to that of existing pediatric DAIs.With our proof-of-concept dataset, the resulting model included C-reactive protein (CRP) and fecal calprotectin (FC) as predictors. In general, our model performed better than the existing DAIs. To show how our Bayesian approach can be applied in practice, we developed a web application for predicting disease activity for a new CD patient or visit.Our work serves as a proof-of-concept, showing that the statistical methods used here can identify biomarkers relevant for the prediction of a clinical outcome. In our case, a small number of biomarkers is sufficient, which, together with the web interface, facilitates the clinical application. However, the retrospective nature of our study, the rather small amount of data, and the lack of an external validation cohort do not allow us to consider our results as the establishment of a novel DAI for pediatric CD. This needs to be done with the help of a prospective study with more data and an external validation cohort in the future.\\u00a9 2023 Wirthgen, Weber, Kubickova-Weber, Schiller, Schiller, Radke and D\\u00e4britz.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6752 request_id=98af52fd689a2a2ce54ea8c012612dd5 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1066
INFO:root:RAW TEXT: Entity 1:
subject: Crohn's disease
predicate: is a type of
object: inflammatory bowel disease

Entity 2:
subject: clinical disease activity indices (DAIs)
predicate: assess
object: mucosal healing

Entity 3:
subject: clinical application
predicate: can be
object: complex

Entity 4:
subject: biomarkers
predicate: are used to
object: assess mucosal inflammation

Entity 5:
subject: existing pediatric DAIs
predicate: have a
object: lower predictive performance

Entity 6:
subject: C-reactive protein (CRP)
predicate: is a
object: predictor

Entity 7:
subject: fecal calprotectin (FC)
predicate: is a
object: predictor

Entity 8:
subject: statistical methods
predicate: can
object: identify relevant biomarkers

Entity 9:
subject: web application
predicate: is developed for
object: predicting disease activity

Entity 10:
subject: study
predicate: has a
object: retrospective nature

Entity 11:
subject: data
predicate: is rather
object: small

Entity 12:
subject: external validation cohort
predicate: is needed for
object: establishing a novel DAI for pediatric CD
INFO:root:PARSING LINE: Entity 1:
ERROR:root:Cannot find slot for entity_1 in Entity 1:
INFO:root:PARSING LINE: subject: Crohn's disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: predicate: is a type of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['is a type of']
INFO:root:PARSING LINE: object: inflammatory bowel disease
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['inflammatory bowel disease']
INFO:root:PARSING LINE: Entity 2:
ERROR:root:Cannot find slot for entity_2 in Entity 2:
INFO:root:PARSING LINE: subject: clinical disease activity indices (DAIs)
DEBUG:root:SLOT: subject INL: False VALS: ['clinical disease activity indices (DAIs)']
INFO:root:PARSING LINE: predicate: assess
DEBUG:root:SLOT: predicate INL: False VALS: ['assess']
INFO:root:PARSING LINE: object: mucosal healing
DEBUG:root:SLOT: object INL: False VALS: ['mucosal healing']
INFO:root:PARSING LINE: Entity 3:
ERROR:root:Cannot find slot for entity_3 in Entity 3:
INFO:root:PARSING LINE: subject: clinical application
DEBUG:root:SLOT: subject INL: False VALS: ['clinical application']
INFO:root:PARSING LINE: predicate: can be
DEBUG:root:SLOT: predicate INL: False VALS: ['can be']
INFO:root:PARSING LINE: object: complex
DEBUG:root:SLOT: object INL: False VALS: ['complex']
INFO:root:PARSING LINE: Entity 4:
ERROR:root:Cannot find slot for entity_4 in Entity 4:
INFO:root:PARSING LINE: subject: biomarkers
DEBUG:root:SLOT: subject INL: False VALS: ['biomarkers']
INFO:root:PARSING LINE: predicate: are used to
DEBUG:root:SLOT: predicate INL: False VALS: ['are used to']
INFO:root:PARSING LINE: object: assess mucosal inflammation
DEBUG:root:SLOT: object INL: False VALS: ['assess mucosal inflammation']
INFO:root:PARSING LINE: Entity 5:
ERROR:root:Cannot find slot for entity_5 in Entity 5:
INFO:root:PARSING LINE: subject: existing pediatric DAIs
DEBUG:root:SLOT: subject INL: False VALS: ['existing pediatric DAIs']
INFO:root:PARSING LINE: predicate: have a
DEBUG:root:SLOT: predicate INL: False VALS: ['have a']
INFO:root:PARSING LINE: object: lower predictive performance
DEBUG:root:SLOT: object INL: False VALS: ['lower predictive performance']
INFO:root:PARSING LINE: Entity 6:
ERROR:root:Cannot find slot for entity_6 in Entity 6:
INFO:root:PARSING LINE: subject: C-reactive protein (CRP)
DEBUG:root:SLOT: subject INL: False VALS: ['C-reactive protein (CRP)']
INFO:root:PARSING LINE: predicate: is a
DEBUG:root:SLOT: predicate INL: False VALS: ['is a']
INFO:root:PARSING LINE: object: predictor
DEBUG:root:SLOT: object INL: False VALS: ['predictor']
INFO:root:PARSING LINE: Entity 7:
ERROR:root:Cannot find slot for entity_7 in Entity 7:
INFO:root:PARSING LINE: subject: fecal calprotectin (FC)
DEBUG:root:SLOT: subject INL: False VALS: ['fecal calprotectin (FC)']
INFO:root:PARSING LINE: predicate: is a
DEBUG:root:SLOT: predicate INL: False VALS: ['is a']
INFO:root:PARSING LINE: object: predictor
DEBUG:root:SLOT: object INL: False VALS: ['predictor']
INFO:root:PARSING LINE: Entity 8:
ERROR:root:Cannot find slot for entity_8 in Entity 8:
INFO:root:PARSING LINE: subject: statistical methods
DEBUG:root:SLOT: subject INL: False VALS: ['statistical methods']
INFO:root:PARSING LINE: predicate: can
DEBUG:root:SLOT: predicate INL: False VALS: ['can']
INFO:root:PARSING LINE: object: identify relevant biomarkers
DEBUG:root:SLOT: object INL: False VALS: ['identify relevant biomarkers']
INFO:root:PARSING LINE: Entity 9:
ERROR:root:Cannot find slot for entity_9 in Entity 9:
INFO:root:PARSING LINE: subject: web application
DEBUG:root:SLOT: subject INL: False VALS: ['web application']
INFO:root:PARSING LINE: predicate: is developed for
DEBUG:root:SLOT: predicate INL: False VALS: ['is developed for']
INFO:root:PARSING LINE: object: predicting disease activity
DEBUG:root:SLOT: object INL: False VALS: ['predicting disease activity']
INFO:root:PARSING LINE: Entity 10:
ERROR:root:Cannot find slot for entity_10 in Entity 10:
INFO:root:PARSING LINE: subject: study
DEBUG:root:SLOT: subject INL: False VALS: ['study']
INFO:root:PARSING LINE: predicate: has a
DEBUG:root:SLOT: predicate INL: False VALS: ['has a']
INFO:root:PARSING LINE: object: retrospective nature
DEBUG:root:SLOT: object INL: False VALS: ['retrospective nature']
INFO:root:PARSING LINE: Entity 11:
ERROR:root:Cannot find slot for entity_11 in Entity 11:
INFO:root:PARSING LINE: subject: data
DEBUG:root:SLOT: subject INL: False VALS: ['data']
INFO:root:PARSING LINE: predicate: is rather
DEBUG:root:SLOT: predicate INL: False VALS: ['is rather']
INFO:root:PARSING LINE: object: small
DEBUG:root:SLOT: object INL: False VALS: ['small']
INFO:root:PARSING LINE: Entity 12:
ERROR:root:Cannot find slot for entity_12 in Entity 12:
INFO:root:PARSING LINE: subject: external validation cohort
DEBUG:root:SLOT: subject INL: False VALS: ['external validation cohort']
INFO:root:PARSING LINE: predicate: is needed for
DEBUG:root:SLOT: predicate INL: False VALS: ['is needed for']
INFO:root:PARSING LINE: object: establishing a novel DAI for pediatric CD
DEBUG:root:SLOT: object INL: False VALS: ['establishing a novel DAI for pediatric CD']
DEBUG:root:RAW: {'subject': 'external validation cohort', 'predicate': 'is needed for', 'object': 'establishing a novel DAI for pediatric CD'}
DEBUG:root:Grounding annotation object {'subject': 'external validation cohort', 'predicate': 'is needed for', 'object': 'establishing a novel DAI for pediatric CD'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING external validation cohort using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize external validation cohort to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING is needed for using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize is needed for to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING establishing a novel DAI for pediatric CD using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize establishing a novel DAI for pediatric CD to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'external validation cohort', 'predicate': 'is needed for', 'object': 'establishing a novel DAI for pediatric CD'}
INFO:root:{'subject': 'external validation cohort', 'predicate': 'is needed for', 'object': 'establishing a novel DAI for pediatric CD'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Promoting early testing and appropriate referral to reduce diagnostic delay for children with suspected inflammatory bowel disease, a narrative review.
Keywords: Inflammatory bowel disease (IBD); diagnostic; laboratory parameters; referral; risk factors
PMID: 37575896
Abstract: When a child with chronic gastrointestinal (GI) symptoms presents to a primary care physician or general paediatrician, the clinician is challenged with differentiating between functional or organic disease. When there is a high suspicion of inflammatory bowel disease (IBD), rapid referral to a paediatric gastroenterologist for assessment and treatment will help protect against the sequelae of a delayed diagnosis for a child. However, this must be balanced against the need for ensuring appropriate referrals and avoiding invasive diagnostic testing for those with non-organic aetiology. The objective of this narrative review was to present evidence on specific presenting symptoms, testing, and risk factors of paediatric IBD that may aid the identification of children requiring timely referral for specialist care, thereby reducing the chance of a delayed diagnosis.Literature databases (Medline, Embase) were searched using terms specific to the population studied, and topic specific terms relating to each section of the review. Year limits were set for 2010-2022. Included papers were limited to original research, with meta-analyses considered where of benefit.Children often present with non-specific GI symptoms that may be associated with a delayed diagnosis for those with subsequent IBD. Symptoms such as rectal bleeding or weight loss may indicate the need for rapid referral. However, non-specific symptoms necessitate testing strategies to differentiate between those with possible IBD and non-organic conditions. Definitive laboratory testing for IBD is not yet available. This review outlines those metrics that should be considered and monitored, then utilised to make a comprehensive referral to tertiary care for specialist paediatric gastroenterology review. Summaries are provided relating to presenting symptoms, extra-intestinal manifestations (EIMs), and alarm symptoms in order to highlight those reported most frequently. The diagnostic accuracy and importance of interpreting faecal calprotectin (FC) levels, in conjunction with additional measures, are also outlined.Diagnostic testing to effectively identify children with IBD without the need for endoscopy is not yet available. Primary care physicians and general paediatricians must, therefore, rely on interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis.2023 Translational Pediatrics. All rights reserved.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3374]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Promoting early testing and appropriate referral to reduce diagnostic delay for children with suspected inflammatory bowel disease, a narrative review.\\nKeywords: Inflammatory bowel disease (IBD); diagnostic; laboratory parameters; referral; risk factors\\nPMID: 37575896\\nAbstract: When a child with chronic gastrointestinal (GI) symptoms presents to a primary care physician or general paediatrician, the clinician is challenged with differentiating between functional or organic disease. When there is a high suspicion of inflammatory bowel disease (IBD), rapid referral to a paediatric gastroenterologist for assessment and treatment will help protect against the sequelae of a delayed diagnosis for a child. However, this must be balanced against the need for ensuring appropriate referrals and avoiding invasive diagnostic testing for those with non-organic aetiology. The objective of this narrative review was to present evidence on specific presenting symptoms, testing, and risk factors of paediatric IBD that may aid the identification of children requiring timely referral for specialist care, thereby reducing the chance of a delayed diagnosis.Literature databases (Medline, Embase) were searched using terms specific to the population studied, and topic specific terms relating to each section of the review. Year limits were set for 2010-2022. Included papers were limited to original research, with meta-analyses considered where of benefit.Children often present with non-specific GI symptoms that may be associated with a delayed diagnosis for those with subsequent IBD. Symptoms such as rectal bleeding or weight loss may indicate the need for rapid referral. However, non-specific symptoms necessitate testing strategies to differentiate between those with possible IBD and non-organic conditions. Definitive laboratory testing for IBD is not yet available. This review outlines those metrics that should be considered and monitored, then utilised to make a comprehensive referral to tertiary care for specialist paediatric gastroenterology review. Summaries are provided relating to presenting symptoms, extra-intestinal manifestations (EIMs), and alarm symptoms in order to highlight those reported most frequently. The diagnostic accuracy and importance of interpreting faecal calprotectin (FC) levels, in conjunction with additional measures, are also outlined.Diagnostic testing to effectively identify children with IBD without the need for endoscopy is not yet available. Primary care physicians and general paediatricians must, therefore, rely on interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis.2023 Translational Pediatrics. All rights reserved.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6981 request_id=5a29dc519b0daa1fd67587dde5794433 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 1287
INFO:root:RAW TEXT: subject: Inflammatory bowel disease (IBD)
predicate: associated with
object: chronic gastrointestinal (GI) symptoms

subject: clinician
predicate: challenged with 
object: differentiating between functional or organic disease

subject: inflammatory bowel disease (IBD)
predicate: may indicate
object: the need for rapid referral

subject: non-specific symptoms
predicate: necessitate
object: testing strategies to differentiate between those with possible IBD and non-organic conditions

subject: definitive laboratory testing for IBD
predicate: not yet available

subject: metrics
predicate: should be considered and monitored, then utilised to make
object: a comprehensive referral to tertiary care for specialist paediatric gastroenterology review

subject: presenting symptoms, extra-intestinal manifestations (EIMs), and alarm symptoms
predicate: reported most frequently

subject: faecal calprotectin (FC) levels
predicate: importance of interpreting
object: in conjunction with additional measures

subject: Diagnostic testing
predicate: not yet available

subject: primary care physicians and general paediatricians
predicate: rely on
object: interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis
INFO:root:PARSING LINE: subject: Inflammatory bowel disease (IBD)
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: associated with
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['associated with']
INFO:root:PARSING LINE: object: chronic gastrointestinal (GI) symptoms
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['chronic gastrointestinal (GI) symptoms']
INFO:root:PARSING LINE: subject: clinician
DEBUG:root:SLOT: subject INL: False VALS: ['clinician']
INFO:root:PARSING LINE: predicate: challenged with
DEBUG:root:SLOT: predicate INL: False VALS: ['challenged with']
INFO:root:PARSING LINE: object: differentiating between functional or organic disease
DEBUG:root:SLOT: object INL: False VALS: ['differentiating between functional or organic disease']
INFO:root:PARSING LINE: subject: inflammatory bowel disease (IBD)
DEBUG:root:SLOT: subject INL: False VALS: ['inflammatory bowel disease (IBD)']
INFO:root:PARSING LINE: predicate: may indicate
DEBUG:root:SLOT: predicate INL: False VALS: ['may indicate']
INFO:root:PARSING LINE: object: the need for rapid referral
DEBUG:root:SLOT: object INL: False VALS: ['the need for rapid referral']
INFO:root:PARSING LINE: subject: non-specific symptoms
DEBUG:root:SLOT: subject INL: False VALS: ['non-specific symptoms']
INFO:root:PARSING LINE: predicate: necessitate
DEBUG:root:SLOT: predicate INL: False VALS: ['necessitate']
INFO:root:PARSING LINE: object: testing strategies to differentiate between those with possible IBD and non-organic conditions
DEBUG:root:SLOT: object INL: False VALS: ['testing strategies to differentiate between those with possible IBD and non-organic conditions']
INFO:root:PARSING LINE: subject: definitive laboratory testing for IBD
DEBUG:root:SLOT: subject INL: False VALS: ['definitive laboratory testing for IBD']
INFO:root:PARSING LINE: predicate: not yet available
DEBUG:root:SLOT: predicate INL: False VALS: ['not yet available']
INFO:root:PARSING LINE: subject: metrics
DEBUG:root:SLOT: subject INL: False VALS: ['metrics']
INFO:root:PARSING LINE: predicate: should be considered and monitored, then utilised to make
DEBUG:root:SLOT: predicate INL: False VALS: ['should be considered and monitored, then utilised to make']
INFO:root:PARSING LINE: object: a comprehensive referral to tertiary care for specialist paediatric gastroenterology review
DEBUG:root:SLOT: object INL: False VALS: ['a comprehensive referral to tertiary care for specialist paediatric gastroenterology review']
INFO:root:PARSING LINE: subject: presenting symptoms, extra-intestinal manifestations (EIMs), and alarm symptoms
DEBUG:root:SLOT: subject INL: False VALS: ['presenting symptoms, extra-intestinal manifestations (EIMs), and alarm symptoms']
INFO:root:PARSING LINE: predicate: reported most frequently
DEBUG:root:SLOT: predicate INL: False VALS: ['reported most frequently']
INFO:root:PARSING LINE: subject: faecal calprotectin (FC) levels
DEBUG:root:SLOT: subject INL: False VALS: ['faecal calprotectin (FC) levels']
INFO:root:PARSING LINE: predicate: importance of interpreting
DEBUG:root:SLOT: predicate INL: False VALS: ['importance of interpreting']
INFO:root:PARSING LINE: object: in conjunction with additional measures
DEBUG:root:SLOT: object INL: False VALS: ['in conjunction with additional measures']
INFO:root:PARSING LINE: subject: Diagnostic testing
DEBUG:root:SLOT: subject INL: False VALS: ['Diagnostic testing']
INFO:root:PARSING LINE: predicate: not yet available
DEBUG:root:SLOT: predicate INL: False VALS: ['not yet available']
INFO:root:PARSING LINE: subject: primary care physicians and general paediatricians
DEBUG:root:SLOT: subject INL: False VALS: ['primary care physicians and general paediatricians']
INFO:root:PARSING LINE: predicate: rely on
DEBUG:root:SLOT: predicate INL: False VALS: ['rely on']
INFO:root:PARSING LINE: object: interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis
DEBUG:root:SLOT: object INL: False VALS: ['interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis']
DEBUG:root:RAW: {'subject': 'primary care physicians and general paediatricians', 'predicate': 'rely on', 'object': 'interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis'}
DEBUG:root:Grounding annotation object {'subject': 'primary care physicians and general paediatricians', 'predicate': 'rely on', 'object': 'interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING primary care physicians and general paediatricians using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized primary care physicians and general paediatricians to primary care physicians and general paediatrician
INFO:ontogpt.engines.knowledge_engine:GROUNDING primary care physicians and general paediatrician using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize primary care physicians and general paediatricians to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING rely on using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize rely on to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis to CellularProcess
DEBUG:root:Creating object from dict {'subject': 'primary care physicians and general paediatricians', 'predicate': 'rely on', 'object': 'interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis'}
INFO:root:{'subject': 'primary care physicians and general paediatricians', 'predicate': 'rely on', 'object': 'interpreting a combination of symptoms, laboratory parameters, and risk factors to assess the need for specialist referral and diagnosis'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Ischemic Colitis Due to Idiopathic Myointimal Hyperplasia of the Mesenteric Veins.
Keywords: idiopathic myointimal hyperplasia of the mesenteric veins; ischemic colitis
PMID: 37575488
Abstract: Idiopathic myointimal hyperplasia of the mesenteric veins (IMHMV) is a rare and poorly understood noninflammatory ischemic colitis. First reported by Genta and Haggitt in 1991, the disease typically presents with chronic abdominal pain, weight loss, and diarrhea with or without hematochezia in middle-aged men. IMHMV is frequently misdiagnosed as an inflammatory bowel disease. The pathophysiology of IMHMV involves the proliferation of the intimal smooth muscle in mesenteric veins leading to bowel ischemia. The etiology of this process remains unknown. There are no good medical therapies for IMHMV, and surgical resection, a curative intervention, is typically required to make the diagnosis. We present the case of a 66-year-old man with IMHMV diagnosed with endoscopic biopsies.© 2023 The Author(s). Published by Wolters Kluwer Health, Inc. on behalf of The American College of Gastroenterology.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[1711]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Ischemic Colitis Due to Idiopathic Myointimal Hyperplasia of the Mesenteric Veins.\\nKeywords: idiopathic myointimal hyperplasia of the mesenteric veins; ischemic colitis\\nPMID: 37575488\\nAbstract: Idiopathic myointimal hyperplasia of the mesenteric veins (IMHMV) is a rare and poorly understood noninflammatory ischemic colitis. First reported by Genta and Haggitt in 1991, the disease typically presents with chronic abdominal pain, weight loss, and diarrhea with or without hematochezia in middle-aged men. IMHMV is frequently misdiagnosed as an inflammatory bowel disease. The pathophysiology of IMHMV involves the proliferation of the intimal smooth muscle in mesenteric veins leading to bowel ischemia. The etiology of this process remains unknown. There are no good medical therapies for IMHMV, and surgical resection, a curative intervention, is typically required to make the diagnosis. We present the case of a 66-year-old man with IMHMV diagnosed with endoscopic biopsies.\\u00a9 2023 The Author(s). Published by Wolters Kluwer Health, Inc. on behalf of The American College of Gastroenterology.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=405 request_id=6cac1e22ca1b3e60340ef9471d1e8e51 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 58
INFO:root:RAW TEXT: No entities with the given format are present in the text.
ERROR:root:Line 'No entities with the given format are present in the text.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: TRAF5 regulates intestinal mucosal Th1/Th17 cell immune responses via Runx1 in colitis mice.
Keywords: T cell transfer colitis; TRAF5; Th1 cells; Th17 cells; inflammatory bowel disease
PMID: 37575027
Abstract: Inflammatory bowel disease (IBD) is a chronic gastrointestinal inflammatory disease associated with CD4+ Th1 and Th17 cell immune responses. Tumour necrosis factor-associated factor 5 (TRAF5) deficiency has been shown to aggravate DSS-induced colitis. However, the potential role of TRAF5 in regulating CD4+ T cell immune responses in the pathogenesis of IBD remains unclear. TRAF5-/- CD4+ CD45RBhigh T cells and WT CD4+ CD45RBhigh T cells were transferred to Rag2-/- mice via intravenous (i.v.) tail injection, respectively, to establish a chronic colitis model. Adeno-associated virus (AAV)-mediated gene knockout technique was used to knock out runt-associated transcription factor 1 (Runx1) expression in vivo. Specific cytokines of Th1 and Th17 cells were detected by quantitative RT-PCR, immunohistochemistry, ELISA, and flow cytometry. In T-cell transfer colitis mice, the Rag2-/- mice reconstituted with TRAF5-/- CD4+ CD45RBhigh T cells showed more severe intestinal inflammation than the WT control group, which was characterised by increased expression of INF-γ, TNF-α, IL-17a. Furthermore, we found that the INF-γ+ CD4+ , IL17a+ CD4+ , and INF-γ+ IL17a+ CD4+ T cells in the intestinal mucosa of Rag2-/- mice reconstituted with TRAF5-/- CD4+ CD45RBhigh T cells were significantly higher than those of the WT control group by flow cytometry. Mechanistically, knockout Runx1 inhibited the differentiation of TRAF5-/- CD4+ T cells into Th1 and Th17 cells in the intestinal mucosa of T-cell transfer colitis mice. TRAF5 regulates Th1 and Th17 cell differentiation and immune response through Runx1 to participate in the pathogenesis of colitis. Thus targeting TRAF5 in CD4+ T cells may be a novel treatment for IBD.© 2023 John Wiley & Sons Ltd.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2575]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: TRAF5 regulates intestinal mucosal Th1/Th17 cell immune responses via Runx1 in colitis mice.\\nKeywords: T cell transfer colitis; TRAF5; Th1 cells; Th17 cells; inflammatory bowel disease\\nPMID: 37575027\\nAbstract: Inflammatory bowel disease (IBD) is a chronic gastrointestinal inflammatory disease associated with CD4+ Th1 and Th17 cell immune responses. Tumour necrosis factor-associated factor 5 (TRAF5) deficiency has been shown to aggravate DSS-induced colitis. However, the potential role of TRAF5 in regulating CD4+ T cell immune responses in the pathogenesis of IBD remains unclear. TRAF5-/- CD4+ CD45RBhigh T cells and WT CD4+ CD45RBhigh T cells were transferred to Rag2-/- mice via intravenous (i.v.) tail injection, respectively, to establish a chronic colitis model. Adeno-associated virus (AAV)-mediated gene knockout technique was used to knock out runt-associated transcription factor 1 (Runx1) expression in vivo. Specific cytokines of Th1 and Th17 cells were detected by quantitative RT-PCR, immunohistochemistry, ELISA, and flow cytometry. In T-cell transfer colitis mice, the Rag2-/- mice reconstituted with TRAF5-/- CD4+ CD45RBhigh T cells showed more severe intestinal inflammation than the WT control group, which was characterised by increased expression of INF-\\u03b3, TNF-\\u03b1, IL-17a. Furthermore, we found that the INF-\\u03b3+ CD4+ , IL17a+ CD4+ , and INF-\\u03b3+ IL17a+ CD4+ T cells in the intestinal mucosa of Rag2-/- mice reconstituted with TRAF5-/- CD4+ CD45RBhigh T cells were significantly higher than those of the WT control group by flow cytometry. Mechanistically, knockout Runx1 inhibited the differentiation of TRAF5-/- CD4+ T cells into Th1 and Th17 cells in the intestinal mucosa of T-cell transfer colitis mice. TRAF5 regulates Th1 and Th17 cell differentiation and immune response through Runx1 to participate in the pathogenesis of colitis. Thus targeting TRAF5 in CD4+ T cells may be a novel treatment for IBD.\\u00a9 2023 John Wiley & Sons Ltd.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=611 request_id=6d2e2432ca8d85717913aa0ed5c96c1b response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 118
INFO:root:RAW TEXT: There are no statements in the text that specifically mention a disease and a cellular process in the required format.
ERROR:root:Line 'There are no statements in the text that specifically mention a disease and a cellular process in the required format.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Jejunal Inflammation in Crohn's Disease: Comparison between Diffusion Weighted Magnetic Resonance Imaging and Video Capsule Endoscopy.
Keywords: 
PMID: 37574895
Abstract: Jejunal disease is associated with worse prognosis in Crohn's disease. The added value of diffusion weighted imaging for evaluating jejunal inflammation related to Crohn's Disease is scarce.To compare diffusion weighted imaging, video capsule endoscopy, and inflammatory biomarkers in the assessment of Crohn's disease involving the jejunum.Crohn's disease patients in clinical remission were prospectively recruited and underwent magnetic resonance (MR)-enterography and video capsule endoscopy. C-reactive protein and fecal-calprotectin levels were obtained. MR-enterography images were evaluated for restricted diffusion, and apparent diffusion coefficient values were measured. The video capsule endoscopy-based Lewis score was calculated. Associations between diffusion weighted imaging, apparent diffusion coefficient, Lewis score, and inflammatory biomarkers were evaluated.The study included 51 patients, and 27/51 (52.9%) with video capsule endoscopies showed jejunal mucosal inflammation. Sensitivity and specificity of restricted diffusion for video capsule endoscopy mucosal inflammation were 59.3% and 37.5% for the first reader, and 66.7% and 37.5% for the second reader, respectively. Diffusion weighted imaging was not statistically associated with jejunal video capsule endoscopy inflammation (P = 0.813).Diffusion weighted imaging was not an effective test for evaluation of jejunal inflammation as seen by video capsule endoscopy in patients with quiescent Crohn's disease.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2278]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Jejunal Inflammation in Crohn\'s Disease: Comparison between Diffusion Weighted Magnetic Resonance Imaging and Video Capsule Endoscopy.\\nKeywords: \\nPMID: 37574895\\nAbstract: Jejunal disease is associated with worse prognosis in Crohn\'s disease. The added value of diffusion weighted imaging for evaluating jejunal inflammation related to Crohn\'s Disease is scarce.To compare diffusion weighted imaging, video capsule endoscopy, and inflammatory biomarkers in the assessment of Crohn\'s disease involving the jejunum.Crohn\'s disease patients in clinical remission were prospectively recruited and underwent magnetic resonance (MR)-enterography and video capsule endoscopy. C-reactive protein and fecal-calprotectin levels were obtained. MR-enterography images were evaluated for restricted diffusion, and apparent diffusion coefficient values were measured. The video capsule endoscopy-based Lewis score was calculated. Associations between diffusion weighted imaging, apparent diffusion coefficient, Lewis score, and inflammatory biomarkers were evaluated.The study included 51 patients, and 27/51 (52.9%) with video capsule endoscopies showed jejunal mucosal inflammation. Sensitivity and specificity of restricted diffusion for video capsule endoscopy mucosal inflammation were 59.3% and 37.5% for the first reader, and 66.7% and 37.5% for the second reader, respectively. Diffusion weighted imaging was not statistically associated with jejunal video capsule endoscopy inflammation (P = 0.813).Diffusion weighted imaging was not an effective test for evaluation of jejunal inflammation as seen by video capsule endoscopy in patients with quiescent Crohn\'s disease.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1264 request_id=79757b963a99d7435a6f3393c8ee94b0 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 181
INFO:root:RAW TEXT: subject: Jejunal inflammation in Crohn's Disease
predicate: associated with worse prognosis in
object: Crohn's disease
qualifier: None
subject_qualifier: None
object_qualifier: None
INFO:root:PARSING LINE: subject: Jejunal inflammation in Crohn's Disease
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ["Jejunal inflammation in Crohn's Disease"]
INFO:root:PARSING LINE: predicate: associated with worse prognosis in
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['associated with worse prognosis in']
INFO:root:PARSING LINE: object: Crohn's disease
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ["Crohn's disease"]
INFO:root:PARSING LINE: qualifier: None
DEBUG:root:SLOT: qualifier INL: None VALS: ['None']
INFO:root:PARSING LINE: subject_qualifier: None
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['None']
INFO:root:PARSING LINE: object_qualifier: None
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['None']
DEBUG:root:RAW: {'subject': "Jejunal inflammation in Crohn's Disease", 'predicate': 'associated with worse prognosis in', 'object': "Crohn's disease", 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
DEBUG:root:Grounding annotation object {'subject': "Jejunal inflammation in Crohn's Disease", 'predicate': 'associated with worse prognosis in', 'object': "Crohn's disease", 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Jejunal inflammation in Crohn's Disease using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Jejunal inflammation in Crohn's Disease to Disease
INFO:ontogpt.engines.knowledge_engine:GROUNDING associated with worse prognosis in using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize associated with worse prognosis in to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING Crohn's disease using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Crohn's disease to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING None using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize None to NamedEntity
DEBUG:root:Creating object from dict {'subject': "Jejunal inflammation in Crohn's Disease", 'predicate': 'associated with worse prognosis in', 'object': "Crohn's disease", 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:root:{'subject': "Jejunal inflammation in Crohn's Disease", 'predicate': 'associated with worse prognosis in', 'object': "Crohn's disease", 'qualifier': 'None', 'subject_qualifier': 'None', 'object_qualifier': 'None'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Mechanisms and regulation of defensins in host defense.
Keywords: 
PMID: 37574471
Abstract: As a family of cationic host defense peptides, defensins are mainly synthesized by Paneth cells, neutrophils, and epithelial cells, contributing to host defense. Their biological functions in innate immunity, as well as their structure and activity relationships, along with their mechanisms of action and therapeutic potential, have been of great interest in recent years. To highlight the key research into the role of defensins in human and animal health, we first describe their research history, structural features, evolution, and antimicrobial mechanisms. Next, we cover the role of defensins in immune homeostasis, chemotaxis, mucosal barrier function, gut microbiota regulation, intestinal development and regulation of cell death. Further, we discuss their clinical relevance and therapeutic potential in various diseases, including infectious disease, inflammatory bowel disease, diabetes and obesity, chronic inflammatory lung disease, periodontitis and cancer. Finally, we summarize the current knowledge regarding the nutrient-dependent regulation of defensins, including fatty acids, amino acids, microelements, plant extracts, and probiotics, while considering the clinical application of such regulation. Together, the review summarizes the various biological functions, mechanism of actions and potential clinical significance of defensins, along with the challenges in developing defensins-based therapy, thus providing crucial insights into their biology and potential clinical utility.© 2023. West China Hospital, Sichuan University.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2261]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Mechanisms and regulation of defensins in host defense.\\nKeywords: \\nPMID: 37574471\\nAbstract: As a family of cationic host defense peptides, defensins are mainly synthesized by Paneth cells, neutrophils, and epithelial cells, contributing to host defense. Their biological functions in innate immunity, as well as their structure and activity relationships, along with their mechanisms of action and therapeutic potential, have been of great interest in recent years. To highlight the key research into the role of defensins in human and animal health, we first describe their research history, structural features, evolution, and antimicrobial mechanisms. Next, we cover the role of defensins in immune homeostasis, chemotaxis, mucosal barrier function, gut microbiota regulation, intestinal development and regulation of cell death. Further, we discuss their clinical relevance and therapeutic potential in various diseases, including infectious disease, inflammatory bowel disease, diabetes and obesity, chronic inflammatory lung disease, periodontitis and cancer. Finally, we summarize the current knowledge regarding the nutrient-dependent regulation of defensins, including fatty acids, amino acids, microelements, plant extracts, and probiotics, while considering the clinical application of such regulation. Together, the review summarizes the various biological functions, mechanism of actions and potential clinical significance of defensins, along with the challenges in developing defensins-based therapy, thus providing crucial insights into their biology and potential clinical utility.\\u00a9 2023. West China Hospital, Sichuan University.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=451 request_id=abe9f32ec123a09f375db283b9714340 response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 77
INFO:root:RAW TEXT: There are no specific statements in the text that match the requested format.
ERROR:root:Line 'There are no specific statements in the text that match the requested format.' does not contain a colon; ignoring
DEBUG:root:RAW: None
DEBUG:root:Grounding annotation object None
ERROR:root:Cannot ground None annotation, cls=DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: Golimumab improves health-related quality of life of patients with moderate-to-severe ulcerative colitis: Results of the go-care study.
Keywords: Golimumab; Inflammatory bowel disease questionnaire; Ulcerative colitis
PMID: 37574431
Abstract: In recent years, improvement of Health-Related Quality of Life (HRQoL) in Ulcerative colitis (UC) has become a relevant measure for treatment efficacy.We report results from a multicenter prospective study in Italy investigating HRQoL in adult patients with UC treated with golimumab (GLM). Patients who had shown clinical response after a 6-week induction phase (w0), were followed for an additional 48 weeks (w48) (total 54-week treatment).Of the 159 patients enrolled 90 completed the study. Compared to values at the beginning of treatment (n = 137), significant improvements were observed for mean total Inflammatory Bowel Disease Questionnaire (IBDQ) scores at w0 (168.5) and w48 (181.7). Patients with baseline PMS above the median tended to have greater improvements in IBDQ at w0 (OR 2.037, p = 0.033) and w48 (OR 3.292, p = 0.027). Compared to beginning of GLM treatment, the mean Full Mayo Score (FMS) decreased by 5.9 points at w48, while mean Partial Mayo Score (PMS) decreased by 3.9 points at w0 and by 4.9 points at w48.GLM improved HRQoL, disease activity and inflammatory biomarkers in UC patients with moderate-to-severely active disease. The greater the burden of disease activity at baseline, the greater the improvement of HRQoL after 24 and 48 weeks of treatment.Copyright © 2023. Published by Elsevier Ltd.
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[2188]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: Golimumab improves health-related quality of life of patients with moderate-to-severe ulcerative colitis: Results of the go-care study.\\nKeywords: Golimumab; Inflammatory bowel disease questionnaire; Ulcerative colitis\\nPMID: 37574431\\nAbstract: In recent years, improvement of Health-Related Quality of Life (HRQoL) in Ulcerative colitis (UC) has become a relevant measure for treatment efficacy.We report results from a multicenter prospective study in Italy investigating HRQoL in adult patients with UC treated with golimumab (GLM). Patients who had shown clinical response after a 6-week induction phase (w0), were followed for an additional 48 weeks (w48) (total 54-week treatment).Of the 159 patients enrolled 90 completed the study. Compared to values at the beginning of treatment (n\\u00a0=\\u00a0137), significant improvements were observed for mean total Inflammatory Bowel Disease Questionnaire (IBDQ) scores at w0 (168.5) and w48 (181.7). Patients with baseline PMS above the median tended to have greater improvements in IBDQ at w0 (OR 2.037, p\\u00a0=\\u00a00.033) and w48 (OR 3.292, p\\u00a0=\\u00a00.027). Compared to beginning of GLM treatment, the mean Full Mayo Score (FMS) decreased by 5.9 points at w48, while mean Partial Mayo Score (PMS) decreased by 3.9 points at w0 and by 4.9 points at w48.GLM improved HRQoL, disease activity and inflammatory biomarkers in UC patients with moderate-to-severely active disease. The greater the burden of disease activity at baseline, the greater the improvement of HRQoL after 24 and 48 weeks of treatment.Copyright \\u00a9 2023. Published by Elsevier Ltd.\\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1218 request_id=5c842322905e66594e5144e33310e1fc response_code=200
INFO:ontogpt.clients.openai_client:Storing payload of len: 169
INFO:root:RAW TEXT: subject: Ulcerative colitis
predicate: improves
object: Health-Related Quality of Life (HRQoL)
subject_qualifier: moderate-to-severe
qualifier: NOT
object_qualifier: NOT
INFO:root:PARSING LINE: subject: Ulcerative colitis
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:SLOT: subject INL: False VALS: ['Ulcerative colitis']
INFO:root:PARSING LINE: predicate: improves
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:SLOT: predicate INL: False VALS: ['improves']
INFO:root:PARSING LINE: object: Health-Related Quality of Life (HRQoL)
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:SLOT: object INL: False VALS: ['Health-Related Quality of Life (HRQoL)']
INFO:root:PARSING LINE: subject_qualifier: moderate-to-severe
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:SLOT: subject_qualifier INL: False VALS: ['moderate-to-severe']
INFO:root:PARSING LINE: qualifier: NOT
DEBUG:root:SLOT: qualifier INL: None VALS: ['NOT']
INFO:root:PARSING LINE: object_qualifier: NOT
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:['Triple'] takes precedence over ['Triple'] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
DEBUG:root:SLOT: object_qualifier INL: False VALS: ['NOT']
DEBUG:root:RAW: {'subject': 'Ulcerative colitis', 'predicate': 'improves', 'object': 'Health-Related Quality of Life (HRQoL)', 'subject_qualifier': 'moderate-to-severe', 'qualifier': 'NOT', 'object_qualifier': 'NOT'}
DEBUG:root:Grounding annotation object {'subject': 'Ulcerative colitis', 'predicate': 'improves', 'object': 'Health-Related Quality of Life (HRQoL)', 'subject_qualifier': 'moderate-to-severe', 'qualifier': 'NOT', 'object_qualifier': 'NOT'}
INFO:ontogpt.engines.knowledge_engine:GROUNDING Ulcerative colitis using Disease
INFO:ontogpt.engines.knowledge_engine:Singularized Ulcerative colitis to ulcerative coliti
INFO:ontogpt.engines.knowledge_engine:GROUNDING ulcerative coliti using Disease
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:mondo
INFO:root:Locator: obo:mondo
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/mondo.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/mondo.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:mondo'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
INFO:ontogpt.engines.knowledge_engine:Grounding Ulcerative colitis to MONDO:0005101; next step is to normalize
INFO:ontogpt.engines.knowledge_engine:Normalized Ulcerative colitis with MONDO:0005101 to MONDO:0005101
INFO:ontogpt.engines.knowledge_engine:GROUNDING improves using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:Singularized improves to improfe
INFO:ontogpt.engines.knowledge_engine:GROUNDING improfe using DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:ro
INFO:root:Locator: obo:ro
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/ro.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/ro.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:ro'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize improves to DiseaseToCellularProcessPredicate
INFO:ontogpt.engines.knowledge_engine:GROUNDING Health-Related Quality of Life (HRQoL) using CellularProcess
INFO:ontogpt.engines.knowledge_engine:health-related quality of life (hrqol) =>paren=> ['hrqol']
DEBUG:ontogpt.engines.knowledge_engine:RECURSIVE GROUNDING OF hrqol from ['hrqol']
INFO:ontogpt.engines.knowledge_engine:GROUNDING hrqol using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Loading annotator sqlite:obo:go
INFO:root:Locator: obo:go
INFO:root:Ensuring gunzipped for https://s3.amazonaws.com/bbop-sqlite/go.db.gz
INFO:root:Locator, post-processed: sqlite:////Users/agranyaketha/.data/oaklib/go.db
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
DEBUG:ontogpt.engines.knowledge_engine:health-related quality of life (hrqol) =>trimmed=> health-related quality of life; in ['hrqol']
INFO:ontogpt.engines.knowledge_engine:GROUNDING health-related quality of life using CellularProcess
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine: Annotators: ['sqlite:obo:go'] [will skip: None]
INFO:root:No token exclusion list provided. Proceeding ...
DEBUG:root:Config, including synonyms: SearchConfiguration(search_terms=[], syntax=(text='SQL', description='The search term is SQL LIKE syntax, with percent symbols acting as wildcards'), properties=[(text='ALIAS', description='An alias or synonym of the entity', meaning='http://www.w3.org/2004/02/skos/core#altLabel')], limit=None, cursor=None, is_partial=None, is_complete=None, include_obsoletes_in_results=None, is_fuzzy=None, categories=[], force_case_insensitive=True)
INFO:ontogpt.engines.knowledge_engine:Skipping <class 'oaklib.implementations.sqldb.sql_implementation.SqlImplementation'> as it does not support partial matches
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize Health-Related Quality of Life (HRQoL) to CellularProcess
INFO:ontogpt.engines.knowledge_engine:GROUNDING moderate-to-severe using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize moderate-to-severe to NamedEntity
INFO:ontogpt.engines.knowledge_engine:GROUNDING NOT using NamedEntity
INFO:ontogpt.engines.knowledge_engine: Annotators: [] [will skip: None]
INFO:ontogpt.engines.knowledge_engine:Could not ground and normalize NOT to NamedEntity
DEBUG:root:Creating object from dict {'subject': 'MONDO:0005101', 'predicate': 'improves', 'object': 'Health-Related Quality of Life (HRQoL)', 'subject_qualifier': 'moderate-to-severe', 'qualifier': 'NOT', 'object_qualifier': 'NOT'}
INFO:root:{'subject': 'MONDO:0005101', 'predicate': 'improves', 'object': 'Health-Related Quality of Life (HRQoL)', 'subject_qualifier': 'moderate-to-severe', 'qualifier': 'NOT', 'object_qualifier': 'NOT'}
INFO:ontogpt.engines.knowledge_engine:Loading schema for ibd_literature.DiseaseCellularProcessRelationship
INFO:ontogpt.engines.knowledge_engine:Getting class for template ibd_literature.DiseaseCellularProcessRelationship
INFO:root:Importing core as core from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates
INFO:root:Importing linkml:types as /Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/templates/ibd_literature.yaml; base_dir=None
INFO:root:Using template DiseaseCellularProcessRelationship
INFO:root:Using mappers (currently hardcoded)
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
INFO:root:Setting up OpenAI client API Key
INFO:root:API KEY path = /Users/agranyaketha/Library/Application Support/ontology-access-kit/openai-apikey.txt
DEBUG:root:Input text: Title: [Application of TIGIT combined with interleukin-6 detection in the evaluation of Crohn's disease status].
Keywords: 
PMID: 37574320
Abstract: To explore the application of IL-6, PCT, T lymphocyte subsets and TIGIT expression on T lymphocytes in the evaluation of Crohn's disease status. Using a cross-sectional study, total of 119 confirmed patients with Crohn's disease who were treated in the Affiliated Hospital of Jiangxi University of Traditional Chinese Medicine from June 2020 to December 2022 were selected. The age range was 18-59 years old, and the median age (interquartile range) was 37 (29, 45) years old, including 57 cases in active disease group (30 males, 27 females), 62 cases in disease remission group (33 males, 29 females); 50 healthy control groups (27 males, 23 females), the age range was 19-60 years old, and the median age (interquartile range) was 38 (31, 46) years old. The level of IL-6 was detected by flow fluorescence microsphere method, the concentration of PCT was detected by immunochromatography, and the levels of T lymphocyte subsets and TIGIT were detected by flow cytometry. The differences and correlations between the detection indicators in each group were compared, logistic regression was used to analyze the factors influencing the progression of Crosne's disease and the clinical value of each detection indicator was analyzed by ROC curve. The results showed that there were no statistically significant differences in age and gender among the control group, the remission group, and the active group (H=1.422,χ2=0.020;P=0.491, P=0.990); in the active group, IL-6 was 17.55(9.67, 21.72)pg/ml, PCT was 0.38(0.14, 0.43)ng/ml, CD3+CD4+ was 35.47%±6.01%, CD3+CD8+ was 30.50%±5.20%, TIGIT was 25.08%±6.30%; in the remission group, IL-6 was 8.46(5.21, 10.04) pg/ml, PCT was 0.26(0.11, 0.35) ng/ml, CD3+CD4+ was 37.62%±4.86%, CD3+CD8+ was 28.30%±5.28%, TIGIT was 34.22%±5.45%; in the control group, IL-6 was 6.13(3.57, 8.12)pg/ml, PCT was 0.17(0.10, 0.21)ng/m, CD3+CD4+ was 39.74%±3.94%, CD3+CD8+ was 26.59%±4.50%, and TIGIT was 37.64%±6.22%.There were significant differences in IL-6, PCT, CD3+CD4+%, CD3+CD8+%, and TIGIT among the three groups(H=58.688, H=18.003, F=9.600, F=8.124, F=65.059;P<0.001, P<0.001, P<0.001, P<0.001, P<0.001), Among them, IL-6 and TIGIT in the active group were significantly different from those in the remission group (P<0.001, P<0.001), and only TIGIT was significantly different between the remission group and the control group (P=0.007);Spearman correlation analysis showed that the expression of TIGIT on T lymphocytes was negatively correlated with the levels of IL-6; the results of Logistic regression analysis showed that IL-6, PCT and TIGIT were independent factors affecting the progression of Crohn's disease;Comparing the ROC curves of the active group and the remission group, found that TIGIT was significantly different from PCT, CD3+CD4+, CD3+CD8+(Z=4.011, Z=4.091, Z=4.157; P<0.001, P<0.001, P<0.001), 
DEBUG:root:subject takes precedence over subject for subject.name
DEBUG:root:[] takes precedence over [] for subject.id_prefixes
DEBUG:root:{} takes precedence over {} for subject.local_names
DEBUG:root:[] takes precedence over [] for subject.implements
DEBUG:root:{} takes precedence over {} for subject.extensions
DEBUG:root:{} takes precedence over {} for subject.annotations
DEBUG:root:{} takes precedence over {} for subject.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject.todos
DEBUG:root:[] takes precedence over [] for subject.notes
DEBUG:root:[] takes precedence over [] for subject.comments
DEBUG:root:[] takes precedence over [] for subject.examples
DEBUG:root:[] takes precedence over [] for subject.in_subset
DEBUG:root:[] takes precedence over [] for subject.see_also
DEBUG:root:[] takes precedence over [] for subject.aliases
DEBUG:root:{} takes precedence over {} for subject.structured_aliases
DEBUG:root:[] takes precedence over [] for subject.mappings
DEBUG:root:[] takes precedence over [] for subject.exact_mappings
DEBUG:root:[] takes precedence over [] for subject.close_mappings
DEBUG:root:[] takes precedence over [] for subject.related_mappings
DEBUG:root:[] takes precedence over [] for subject.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject.broad_mappings
DEBUG:root:[] takes precedence over [] for subject.mixins
DEBUG:root:[] takes precedence over [] for subject.apply_to
DEBUG:root:[] takes precedence over [] for subject.values_from
DEBUG:root:[] takes precedence over [] for subject.domain_of
DEBUG:root:[] takes precedence over [] for subject.disjoint_with
DEBUG:root:[] takes precedence over [] for subject.union_of
DEBUG:root:Disease takes precedence over Disease for subject.range
DEBUG:root:[] takes precedence over [] for subject.equals_string_in
DEBUG:root:[] takes precedence over [] for subject.none_of
DEBUG:root:[] takes precedence over [] for subject.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject.any_of
DEBUG:root:[] takes precedence over [] for subject.all_of
DEBUG:root:predicate takes precedence over predicate for predicate.name
DEBUG:root:[] takes precedence over [] for predicate.id_prefixes
DEBUG:root:{} takes precedence over {} for predicate.local_names
DEBUG:root:[] takes precedence over [] for predicate.implements
DEBUG:root:{} takes precedence over {} for predicate.extensions
DEBUG:root:{} takes precedence over {} for predicate.annotations
DEBUG:root:{} takes precedence over {} for predicate.alt_descriptions
DEBUG:root:[] takes precedence over [] for predicate.todos
DEBUG:root:[] takes precedence over [] for predicate.notes
DEBUG:root:[] takes precedence over [] for predicate.comments
DEBUG:root:[] takes precedence over [] for predicate.examples
DEBUG:root:[] takes precedence over [] for predicate.in_subset
DEBUG:root:[] takes precedence over [] for predicate.see_also
DEBUG:root:[] takes precedence over [] for predicate.aliases
DEBUG:root:{} takes precedence over {} for predicate.structured_aliases
DEBUG:root:[] takes precedence over [] for predicate.mappings
DEBUG:root:[] takes precedence over [] for predicate.exact_mappings
DEBUG:root:[] takes precedence over [] for predicate.close_mappings
DEBUG:root:[] takes precedence over [] for predicate.related_mappings
DEBUG:root:[] takes precedence over [] for predicate.narrow_mappings
DEBUG:root:[] takes precedence over [] for predicate.broad_mappings
DEBUG:root:[] takes precedence over [] for predicate.mixins
DEBUG:root:[] takes precedence over [] for predicate.apply_to
DEBUG:root:[] takes precedence over [] for predicate.values_from
DEBUG:root:[] takes precedence over [] for predicate.domain_of
DEBUG:root:[] takes precedence over [] for predicate.disjoint_with
DEBUG:root:[] takes precedence over [] for predicate.union_of
DEBUG:root:DiseaseToCellularProcessPredicate takes precedence over DiseaseToCellularProcessPredicate for predicate.range
DEBUG:root:[] takes precedence over [] for predicate.equals_string_in
DEBUG:root:[] takes precedence over [] for predicate.none_of
DEBUG:root:[] takes precedence over [] for predicate.exactly_one_of
DEBUG:root:[] takes precedence over [] for predicate.any_of
DEBUG:root:[] takes precedence over [] for predicate.all_of
DEBUG:root:object takes precedence over object for object.name
DEBUG:root:[] takes precedence over [] for object.id_prefixes
DEBUG:root:{} takes precedence over {} for object.local_names
DEBUG:root:[] takes precedence over [] for object.implements
DEBUG:root:{} takes precedence over {} for object.extensions
DEBUG:root:{} takes precedence over {} for object.annotations
DEBUG:root:{} takes precedence over {} for object.alt_descriptions
DEBUG:root:[] takes precedence over [] for object.todos
DEBUG:root:[] takes precedence over [] for object.notes
DEBUG:root:[] takes precedence over [] for object.comments
DEBUG:root:[] takes precedence over [] for object.examples
DEBUG:root:[] takes precedence over [] for object.in_subset
DEBUG:root:[] takes precedence over [] for object.see_also
DEBUG:root:[] takes precedence over [] for object.aliases
DEBUG:root:{} takes precedence over {} for object.structured_aliases
DEBUG:root:[] takes precedence over [] for object.mappings
DEBUG:root:[] takes precedence over [] for object.exact_mappings
DEBUG:root:[] takes precedence over [] for object.close_mappings
DEBUG:root:[] takes precedence over [] for object.related_mappings
DEBUG:root:[] takes precedence over [] for object.narrow_mappings
DEBUG:root:[] takes precedence over [] for object.broad_mappings
DEBUG:root:[] takes precedence over [] for object.mixins
DEBUG:root:[] takes precedence over [] for object.apply_to
DEBUG:root:[] takes precedence over [] for object.values_from
DEBUG:root:[] takes precedence over [] for object.domain_of
DEBUG:root:[] takes precedence over [] for object.disjoint_with
DEBUG:root:[] takes precedence over [] for object.union_of
DEBUG:root:CellularProcess takes precedence over CellularProcess for object.range
DEBUG:root:[] takes precedence over [] for object.equals_string_in
DEBUG:root:[] takes precedence over [] for object.none_of
DEBUG:root:[] takes precedence over [] for object.exactly_one_of
DEBUG:root:[] takes precedence over [] for object.any_of
DEBUG:root:[] takes precedence over [] for object.all_of
DEBUG:root:subject_qualifier takes precedence over subject_qualifier for subject_qualifier.name
DEBUG:root:[] takes precedence over [] for subject_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for subject_qualifier.local_names
DEBUG:root:[] takes precedence over [] for subject_qualifier.implements
DEBUG:root:{} takes precedence over {} for subject_qualifier.extensions
DEBUG:root:{} takes precedence over {} for subject_qualifier.annotations
DEBUG:root:{} takes precedence over {} for subject_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for subject_qualifier.todos
DEBUG:root:[] takes precedence over [] for subject_qualifier.notes
DEBUG:root:[] takes precedence over [] for subject_qualifier.comments
DEBUG:root:[] takes precedence over [] for subject_qualifier.examples
DEBUG:root:[] takes precedence over [] for subject_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for subject_qualifier.see_also
DEBUG:root:[] takes precedence over [] for subject_qualifier.aliases
DEBUG:root:{} takes precedence over {} for subject_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for subject_qualifier.mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for subject_qualifier.mixins
DEBUG:root:[] takes precedence over [] for subject_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for subject_qualifier.values_from
DEBUG:root:[] takes precedence over [] for subject_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for subject_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for subject_qualifier.range
DEBUG:root:[] takes precedence over [] for subject_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for subject_qualifier.none_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.any_of
DEBUG:root:[] takes precedence over [] for subject_qualifier.all_of
DEBUG:root:object_qualifier takes precedence over object_qualifier for object_qualifier.name
DEBUG:root:[] takes precedence over [] for object_qualifier.id_prefixes
DEBUG:root:{} takes precedence over {} for object_qualifier.local_names
DEBUG:root:[] takes precedence over [] for object_qualifier.implements
DEBUG:root:{} takes precedence over {} for object_qualifier.extensions
DEBUG:root:{} takes precedence over {} for object_qualifier.annotations
DEBUG:root:{} takes precedence over {} for object_qualifier.alt_descriptions
DEBUG:root:[] takes precedence over [] for object_qualifier.todos
DEBUG:root:[] takes precedence over [] for object_qualifier.notes
DEBUG:root:[] takes precedence over [] for object_qualifier.comments
DEBUG:root:[] takes precedence over [] for object_qualifier.examples
DEBUG:root:[] takes precedence over [] for object_qualifier.in_subset
DEBUG:root:[] takes precedence over [] for object_qualifier.see_also
DEBUG:root:[] takes precedence over [] for object_qualifier.aliases
DEBUG:root:{} takes precedence over {} for object_qualifier.structured_aliases
DEBUG:root:[] takes precedence over [] for object_qualifier.mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.exact_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.close_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.related_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.narrow_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.broad_mappings
DEBUG:root:[] takes precedence over [] for object_qualifier.mixins
DEBUG:root:[] takes precedence over [] for object_qualifier.apply_to
DEBUG:root:[] takes precedence over [] for object_qualifier.values_from
DEBUG:root:[] takes precedence over [] for object_qualifier.domain_of
DEBUG:root:[] takes precedence over [] for object_qualifier.disjoint_with
DEBUG:root:[] takes precedence over [] for object_qualifier.union_of
DEBUG:root:NamedEntity takes precedence over NamedEntity for object_qualifier.range
DEBUG:root:[] takes precedence over [] for object_qualifier.equals_string_in
DEBUG:root:[] takes precedence over [] for object_qualifier.none_of
DEBUG:root:[] takes precedence over [] for object_qualifier.exactly_one_of
DEBUG:root:[] takes precedence over [] for object_qualifier.any_of
DEBUG:root:[] takes precedence over [] for object_qualifier.all_of
INFO:ontogpt.clients.openai_client:Complete: engine=gpt-3.5-turbo, prompt[3608]=From the text below, extract the following entities in the following format:

subject: <The name of ...
INFO:ontogpt.clients.openai_client:Caching OpenAI responses to /Users/agranyaketha/Documents/GitHub/ontogpt/.openai_cache.db
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 1)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: [Application of TIGIT combined with interleukin-6 detection in the evaluation of Crohn\'s disease status].\\nKeywords: \\nPMID: 37574320\\nAbstract: To explore the application of IL-6, PCT, T lymphocyte subsets and TIGIT expression on T lymphocytes in the evaluation of Crohn\'s disease status. Using a cross-sectional study, total of 119 confirmed patients with Crohn\'s disease who were treated in the Affiliated Hospital of Jiangxi University of Traditional Chinese Medicine from June 2020 to December 2022 were selected. The age range was 18-59 years old, and the median age (interquartile range) was 37 (29, 45) years old, including 57 cases in active disease group (30 males, 27 females), 62 cases in disease remission group (33 males, 29 females); 50 healthy control groups (27 males, 23 females), the age range was 19-60 years old, and the median age (interquartile range) was 38 (31, 46) years old. The level of IL-6 was detected by flow fluorescence microsphere method, the concentration of PCT was detected by immunochromatography, and the levels of T lymphocyte subsets and TIGIT were detected by flow cytometry. The differences and correlations between the detection indicators in each group were compared, logistic regression was used to analyze the factors influencing the progression of Crosne\'s disease and the clinical value of each detection indicator was analyzed by ROC curve. The results showed that there were no statistically significant differences in age and gender among the control group, the remission group, and the active group (H=1.422,\\u03c72=0.020;P=0.491, P=0.990); in the active group, IL-6 was 17.55(9.67, 21.72)pg/ml, PCT was 0.38(0.14, 0.43)ng/ml, CD3+CD4+ was 35.47%\\u00b16.01%, CD3+CD8+ was 30.50%\\u00b15.20%, TIGIT was 25.08%\\u00b16.30%; in the remission group, IL-6 was 8.46(5.21, 10.04) pg/ml, PCT was 0.26(0.11, 0.35) ng/ml, CD3+CD4+ was 37.62%\\u00b14.86%, CD3+CD8+ was 28.30%\\u00b15.28%, TIGIT was 34.22%\\u00b15.45%; in the control group, IL-6 was 6.13(3.57, 8.12)pg/ml, PCT was 0.17(0.10, 0.21)ng/m, CD3+CD4+ was 39.74%\\u00b13.94%, CD3+CD8+ was 26.59%\\u00b14.50%, and TIGIT was 37.64%\\u00b16.22%.There were significant differences in IL-6, PCT, CD3+CD4+%, CD3+CD8+%, and TIGIT among the three groups(H=58.688, H=18.003, F=9.600, F=8.124, F=65.059;P<0.001, P<0.001, P<0.001, P<0.001, P<0.001), Among them, IL-6 and TIGIT in the active group were significantly different from those in the remission group (P<0.001, P<0.001), and only TIGIT was significantly different between the remission group and the control group (P=0.007);Spearman correlation analysis showed that the expression of TIGIT on T lymphocytes was negatively correlated with the levels of IL-6; the results of Logistic regression analysis showed that IL-6, PCT and TIGIT were independent factors affecting the progression of Crohn\'s disease;Comparing the ROC curves of the active group and the remission group, found that TIGIT was significantly different from PCT, CD3+CD4+, CD3+CD8+(Z=4.011, Z=4.091, Z=4.157; P<0.001, P<0.001, P<0.001), \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 400 330
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=10 request_id=d0d3e24d4b2c537283c985961e0ba1fb response_code=400
INFO:openai:error_code=context_length_exceeded error_message="This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion." error_param=messages error_type=invalid_request_error message='OpenAI API error received' stream_error=False
ERROR:ontogpt.clients.openai_client:OpenAI API connection error: This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion.
INFO:ontogpt.clients.openai_client:Retrying 1 of 3 after 4 seconds...
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 2)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: [Application of TIGIT combined with interleukin-6 detection in the evaluation of Crohn\'s disease status].\\nKeywords: \\nPMID: 37574320\\nAbstract: To explore the application of IL-6, PCT, T lymphocyte subsets and TIGIT expression on T lymphocytes in the evaluation of Crohn\'s disease status. Using a cross-sectional study, total of 119 confirmed patients with Crohn\'s disease who were treated in the Affiliated Hospital of Jiangxi University of Traditional Chinese Medicine from June 2020 to December 2022 were selected. The age range was 18-59 years old, and the median age (interquartile range) was 37 (29, 45) years old, including 57 cases in active disease group (30 males, 27 females), 62 cases in disease remission group (33 males, 29 females); 50 healthy control groups (27 males, 23 females), the age range was 19-60 years old, and the median age (interquartile range) was 38 (31, 46) years old. The level of IL-6 was detected by flow fluorescence microsphere method, the concentration of PCT was detected by immunochromatography, and the levels of T lymphocyte subsets and TIGIT were detected by flow cytometry. The differences and correlations between the detection indicators in each group were compared, logistic regression was used to analyze the factors influencing the progression of Crosne\'s disease and the clinical value of each detection indicator was analyzed by ROC curve. The results showed that there were no statistically significant differences in age and gender among the control group, the remission group, and the active group (H=1.422,\\u03c72=0.020;P=0.491, P=0.990); in the active group, IL-6 was 17.55(9.67, 21.72)pg/ml, PCT was 0.38(0.14, 0.43)ng/ml, CD3+CD4+ was 35.47%\\u00b16.01%, CD3+CD8+ was 30.50%\\u00b15.20%, TIGIT was 25.08%\\u00b16.30%; in the remission group, IL-6 was 8.46(5.21, 10.04) pg/ml, PCT was 0.26(0.11, 0.35) ng/ml, CD3+CD4+ was 37.62%\\u00b14.86%, CD3+CD8+ was 28.30%\\u00b15.28%, TIGIT was 34.22%\\u00b15.45%; in the control group, IL-6 was 6.13(3.57, 8.12)pg/ml, PCT was 0.17(0.10, 0.21)ng/m, CD3+CD4+ was 39.74%\\u00b13.94%, CD3+CD8+ was 26.59%\\u00b14.50%, and TIGIT was 37.64%\\u00b16.22%.There were significant differences in IL-6, PCT, CD3+CD4+%, CD3+CD8+%, and TIGIT among the three groups(H=58.688, H=18.003, F=9.600, F=8.124, F=65.059;P<0.001, P<0.001, P<0.001, P<0.001, P<0.001), Among them, IL-6 and TIGIT in the active group were significantly different from those in the remission group (P<0.001, P<0.001), and only TIGIT was significantly different between the remission group and the control group (P=0.007);Spearman correlation analysis showed that the expression of TIGIT on T lymphocytes was negatively correlated with the levels of IL-6; the results of Logistic regression analysis showed that IL-6, PCT and TIGIT were independent factors affecting the progression of Crohn\'s disease;Comparing the ROC curves of the active group and the remission group, found that TIGIT was significantly different from PCT, CD3+CD4+, CD3+CD8+(Z=4.011, Z=4.091, Z=4.157; P<0.001, P<0.001, P<0.001), \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 400 330
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=17 request_id=f7f64f47962011e72fba7e701f777158 response_code=400
INFO:openai:error_code=context_length_exceeded error_message="This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion." error_param=messages error_type=invalid_request_error message='OpenAI API error received' stream_error=False
ERROR:ontogpt.clients.openai_client:OpenAI API connection error: This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion.
INFO:ontogpt.clients.openai_client:Retrying 2 of 3 after 16 seconds...
DEBUG:ontogpt.clients.openai_client:Calling OpenAI API (attempt 3)...
DEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
DEBUG:openai:api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "From the text below, extract the following entities in the following format:\\n\\nsubject: <The name of the disease.>\\npredicate: <The name of the type of relationship between a disease and a cellular process.>\\nobject: <The name of the cellular process.>\\nqualifier: <A qualifier for the statements, e.g. \\"NOT\\" for negation>\\nsubject_qualifier: <An optional qualifier or modifier for the subject of the statement, e.g. \\"high dose\\" or \\"intravenously administered\\">\\nobject_qualifier: <An optional qualifier or modifier for the object of the statement, e.g. \\"severe\\" or \\"with additional complications\\">\\n\\n\\nText:\\nTitle: [Application of TIGIT combined with interleukin-6 detection in the evaluation of Crohn\'s disease status].\\nKeywords: \\nPMID: 37574320\\nAbstract: To explore the application of IL-6, PCT, T lymphocyte subsets and TIGIT expression on T lymphocytes in the evaluation of Crohn\'s disease status. Using a cross-sectional study, total of 119 confirmed patients with Crohn\'s disease who were treated in the Affiliated Hospital of Jiangxi University of Traditional Chinese Medicine from June 2020 to December 2022 were selected. The age range was 18-59 years old, and the median age (interquartile range) was 37 (29, 45) years old, including 57 cases in active disease group (30 males, 27 females), 62 cases in disease remission group (33 males, 29 females); 50 healthy control groups (27 males, 23 females), the age range was 19-60 years old, and the median age (interquartile range) was 38 (31, 46) years old. The level of IL-6 was detected by flow fluorescence microsphere method, the concentration of PCT was detected by immunochromatography, and the levels of T lymphocyte subsets and TIGIT were detected by flow cytometry. The differences and correlations between the detection indicators in each group were compared, logistic regression was used to analyze the factors influencing the progression of Crosne\'s disease and the clinical value of each detection indicator was analyzed by ROC curve. The results showed that there were no statistically significant differences in age and gender among the control group, the remission group, and the active group (H=1.422,\\u03c72=0.020;P=0.491, P=0.990); in the active group, IL-6 was 17.55(9.67, 21.72)pg/ml, PCT was 0.38(0.14, 0.43)ng/ml, CD3+CD4+ was 35.47%\\u00b16.01%, CD3+CD8+ was 30.50%\\u00b15.20%, TIGIT was 25.08%\\u00b16.30%; in the remission group, IL-6 was 8.46(5.21, 10.04) pg/ml, PCT was 0.26(0.11, 0.35) ng/ml, CD3+CD4+ was 37.62%\\u00b14.86%, CD3+CD8+ was 28.30%\\u00b15.28%, TIGIT was 34.22%\\u00b15.45%; in the control group, IL-6 was 6.13(3.57, 8.12)pg/ml, PCT was 0.17(0.10, 0.21)ng/m, CD3+CD4+ was 39.74%\\u00b13.94%, CD3+CD8+ was 26.59%\\u00b14.50%, and TIGIT was 37.64%\\u00b16.22%.There were significant differences in IL-6, PCT, CD3+CD4+%, CD3+CD8+%, and TIGIT among the three groups(H=58.688, H=18.003, F=9.600, F=8.124, F=65.059;P<0.001, P<0.001, P<0.001, P<0.001, P<0.001), Among them, IL-6 and TIGIT in the active group were significantly different from those in the remission group (P<0.001, P<0.001), and only TIGIT was significantly different between the remission group and the control group (P=0.007);Spearman correlation analysis showed that the expression of TIGIT on T lymphocytes was negatively correlated with the levels of IL-6; the results of Logistic regression analysis showed that IL-6, PCT and TIGIT were independent factors affecting the progression of Crohn\'s disease;Comparing the ROC curves of the active group and the remission group, found that TIGIT was significantly different from PCT, CD3+CD4+, CD3+CD8+(Z=4.011, Z=4.091, Z=4.157; P<0.001, P<0.001, P<0.001), \\n\\n===\\n\\n"}], "max_tokens": 3000}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 400 330
DEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12 request_id=8dfed9b0088f0a8c52b4c8895760682c response_code=400
INFO:openai:error_code=context_length_exceeded error_message="This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion." error_param=messages error_type=invalid_request_error message='OpenAI API error received' stream_error=False
ERROR:ontogpt.clients.openai_client:OpenAI API connection error: This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion.
Traceback (most recent call last):
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/bin/ontogpt", line 6, in <module>
    sys.exit(main())
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/click/core.py", line 1130, in __call__
    return self.main(*args, **kwargs)
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/click/core.py", line 1055, in main
    rv = self.invoke(ctx)
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/click/core.py", line 1657, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/click/core.py", line 1404, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/click/core.py", line 760, in invoke
    return __callback(*args, **kwargs)
  File "/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/cli.py", line 377, in pubmed_annotate
    results = ke.extract_from_text(text)
  File "/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/engines/spires_engine.py", line 84, in extract_from_text
    raw_text = self._raw_extract(text, cls, object=object)
  File "/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/engines/spires_engine.py", line 249, in _raw_extract
    payload = self.client.complete(prompt)
  File "/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/clients/openai_client.py", line 72, in complete
    raise e
  File "/Users/agranyaketha/Documents/GitHub/ontogpt/src/ontogpt/clients/openai_client.py", line 51, in complete
    response = openai.ChatCompletion.create(
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/openai/api_requestor.py", line 226, in request
    resp, got_stream = self._interpret_response(result, stream)
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/openai/api_requestor.py", line 620, in _interpret_response
    self._interpret_response_line(
  File "/Users/agranyaketha/opt/anaconda3/envs/ontogpt/lib/python3.10/site-packages/openai/api_requestor.py", line 683, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 4097 tokens. However, you requested 4098 tokens (1098 in the messages, 3000 in the completion). Please reduce the length of the messages or completion.
