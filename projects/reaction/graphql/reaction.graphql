type AnnotatorResult
  {
    subjectText: String
    objectId: String
    objectText: String
  }

type Any
  {
  }

type ChemicalEntity
  {
    id: String!
    label: String
  }

interface CompoundExpression
  {
  }

type Evidence
  {
    id: String!
    label: String
  }

type ExtractionResult
  {
    inputId: String
    inputTitle: String
    inputText: String
    rawCompletionOutput: String
    prompt: String
    extractedObject: Any
    namedEntities: [Any]
  }

type Gene
  {
    id: String!
    label: String
  }

type GeneReactionPairing
  {
    gene: Gene
    reaction: Reaction
  }

type GeneToReaction
  {
    gene: Gene
    reactions: [Reaction]
    organism: Organism
  }

interface NamedEntity
  {
    id: String!
    label: String
  }

type Organism
  {
    id: String!
    label: String
  }

type Publication
  {
    id: String
    title: String
    abstract: String
    combinedText: String
    fullText: String
  }

type Reaction
  {
    id: String!
    label: String
    description: String
    synonyms: [String]
    subclassOf: ReactionGrouping
    leftSide: [ChemicalEntity]
    rightSide: [ChemicalEntity]
  }

type ReactionDocument
  {
    genes: [Gene]
    reactions: [Reaction]
    geneReactionPairings: [GeneReactionPairing]
    organism: Organism
    hasEvidence: [Evidence]
  }

type ReactionGrouping
  {
    id: String!
    label: String
  }

type RelationshipType
  {
    id: String!
    label: String
  }

type TextWithTriples
  {
    publication: Publication
    triples: [Triple]
  }

interface Triple
  {
    subject: NamedEntity
    predicate: RelationshipType
    object: NamedEntity
    qualifier: String
    subjectQualifier: NamedEntity
    objectQualifier: NamedEntity
  }

